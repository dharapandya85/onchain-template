"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ts-case-convert";
exports.ids = ["vendor-chunks/ts-case-convert"];
exports.modules = {

/***/ "(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js":
/*!*********************************************************!*\
  !*** ./node_modules/ts-case-convert/lib/caseConvert.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.objectToPascal = exports.toPascal = exports.objectToSnake = exports.toSnake = exports.objectToCamel = exports.toCamel = void 0;\nfunction convertObject(obj, keyConverter) {\n    if (obj === null || typeof obj === 'undefined' || typeof obj !== 'object') {\n        return obj;\n    }\n    const out = (Array.isArray(obj) ? [] : {});\n    for (const [k, v] of Object.entries(obj)) {\n        // eslint-disable-next-line\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        out[keyConverter(k)] = Array.isArray(v)\n            ? v.map((item) => typeof item === 'object' &&\n                !(item instanceof Uint8Array) &&\n                !(item instanceof Date)\n                ? convertObject(item, keyConverter)\n                : item)\n            : v instanceof Uint8Array || v instanceof Date\n                ? v\n                : typeof v === 'object'\n                    ? convertObject(v, keyConverter)\n                    : v;\n    }\n    return out;\n}\nfunction toCamel(term) {\n    return (term.length === 1\n        ? term.toLowerCase()\n        : term\n            .replace(/^([A-Z])/, (m) => m[0].toLowerCase())\n            .replace(/[_-]([a-z0-9])/g, (m) => m[1].toUpperCase()));\n}\nexports.toCamel = toCamel;\nfunction objectToCamel(obj) {\n    return convertObject(obj, toCamel);\n}\nexports.objectToCamel = objectToCamel;\nfunction toSnake(term) {\n    var _a, _b;\n    let result = term;\n    let circuitBreaker = 0;\n    while ((((_a = /([a-z])([0-9])/.exec(result)) === null || _a === void 0 ? void 0 : _a.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/([a-z])([0-9])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    while ((((_b = /(.+?)([A-Z])/.exec(result)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 2 &&\n        circuitBreaker < 10) {\n        result = result.replace(/(.+?)([A-Z])/, (_all, $1, $2) => `${$1.toLowerCase()}_${$2.toLowerCase()}`);\n        circuitBreaker += 1;\n    }\n    return result.toLowerCase();\n}\nexports.toSnake = toSnake;\nfunction objectToSnake(obj) {\n    return convertObject(obj, toSnake);\n}\nexports.objectToSnake = objectToSnake;\nfunction toPascal(term) {\n    return toCamel(term).replace(/^([a-z])/, (m) => m[0].toUpperCase());\n}\nexports.toPascal = toPascal;\nfunction objectToPascal(obj) {\n    return convertObject(obj, toPascal);\n}\nexports.objectToPascal = objectToPascal;\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ts-case-convert/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ts-case-convert/lib/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.objectToPascal = exports.toPascal = exports.toCamel = exports.toSnake = exports.objectToSnake = exports.objectToCamel = void 0;\nvar caseConvert_1 = __webpack_require__(/*! ./caseConvert */ \"(rsc)/./node_modules/ts-case-convert/lib/caseConvert.js\");\nObject.defineProperty(exports, \"objectToCamel\", ({ enumerable: true, get: function () { return caseConvert_1.objectToCamel; } }));\nObject.defineProperty(exports, \"objectToSnake\", ({ enumerable: true, get: function () { return caseConvert_1.objectToSnake; } }));\nObject.defineProperty(exports, \"toSnake\", ({ enumerable: true, get: function () { return caseConvert_1.toSnake; } }));\nObject.defineProperty(exports, \"toCamel\", ({ enumerable: true, get: function () { return caseConvert_1.toCamel; } }));\nObject.defineProperty(exports, \"toPascal\", ({ enumerable: true, get: function () { return caseConvert_1.toPascal; } }));\nObject.defineProperty(exports, \"objectToPascal\", ({ enumerable: true, get: function () { return caseConvert_1.objectToPascal; } }));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBT3VCO0FBTnJCLDRHQUFBLGFBQWEsT0FBQTtBQUNiLDRHQUFBLGFBQWEsT0FBQTtBQUNiLHNHQUFBLE9BQU8sT0FBQTtBQUNQLHNHQUFBLE9BQU8sT0FBQTtBQUNQLHVHQUFBLFFBQVEsT0FBQTtBQUNSLDZHQUFBLGNBQWMsT0FBQSIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIG9iamVjdFRvQ2FtZWwsXG4gIG9iamVjdFRvU25ha2UsXG4gIHRvU25ha2UsXG4gIHRvQ2FtZWwsXG4gIHRvUGFzY2FsLFxuICBvYmplY3RUb1Bhc2NhbCxcbn0gZnJvbSAnLi9jYXNlQ29udmVydCc7XG5cbmV4cG9ydCB0eXBlIHtcbiAgT2JqZWN0VG9DYW1lbCxcbiAgT2JqZWN0VG9TbmFrZSxcbiAgVG9TbmFrZSxcbiAgVG9DYW1lbCxcbiAgVG9QYXNjYWwsXG4gIE9iamVjdFRvUGFzY2FsLFxufSBmcm9tICcuL2Nhc2VDb252ZXJ0JztcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdHMtY2FzZS1jb252ZXJ0L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxnQkFBZ0IsR0FBRyxlQUFlLEdBQUcsZUFBZSxHQUFHLHFCQUFxQixHQUFHLHFCQUFxQjtBQUM3SCxvQkFBb0IsbUJBQU8sQ0FBQyw4RUFBZTtBQUMzQyxpREFBZ0QsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDL0gsaURBQWdELEVBQUUscUNBQXFDLHVDQUF1QyxFQUFDO0FBQy9ILDJDQUEwQyxFQUFFLHFDQUFxQyxpQ0FBaUMsRUFBQztBQUNuSCwyQ0FBMEMsRUFBRSxxQ0FBcUMsaUNBQWlDLEVBQUM7QUFDbkgsNENBQTJDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3JILGtEQUFpRCxFQUFFLHFDQUFxQyx3Q0FBd0MsRUFBQztBQUNqSSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbmNoYWluLWFnZW50Ly4vbm9kZV9tb2R1bGVzL3RzLWNhc2UtY29udmVydC9saWIvaW5kZXguanM/NWZmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub2JqZWN0VG9QYXNjYWwgPSBleHBvcnRzLnRvUGFzY2FsID0gZXhwb3J0cy50b0NhbWVsID0gZXhwb3J0cy50b1NuYWtlID0gZXhwb3J0cy5vYmplY3RUb1NuYWtlID0gZXhwb3J0cy5vYmplY3RUb0NhbWVsID0gdm9pZCAwO1xudmFyIGNhc2VDb252ZXJ0XzEgPSByZXF1aXJlKFwiLi9jYXNlQ29udmVydFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9iamVjdFRvQ2FtZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhc2VDb252ZXJ0XzEub2JqZWN0VG9DYW1lbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9iamVjdFRvU25ha2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhc2VDb252ZXJ0XzEub2JqZWN0VG9TbmFrZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvU25ha2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhc2VDb252ZXJ0XzEudG9TbmFrZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvQ2FtZWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhc2VDb252ZXJ0XzEudG9DYW1lbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvUGFzY2FsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYXNlQ29udmVydF8xLnRvUGFzY2FsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib2JqZWN0VG9QYXNjYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhc2VDb252ZXJ0XzEub2JqZWN0VG9QYXNjYWw7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPMEZCUVVFc05rTkJUM1ZDTzBGQlRuSkNMRFJIUVVGQkxHRkJRV0VzVDBGQlFUdEJRVU5pTERSSFFVRkJMR0ZCUVdFc1QwRkJRVHRCUVVOaUxITkhRVUZCTEU5QlFVOHNUMEZCUVR0QlFVTlFMSE5IUVVGQkxFOUJRVThzVDBGQlFUdEJRVU5RTEhWSFFVRkJMRkZCUVZFc1QwRkJRVHRCUVVOU0xEWkhRVUZCTEdOQlFXTXNUMEZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCN1hHNGdJRzlpYW1WamRGUnZRMkZ0Wld3c1hHNGdJRzlpYW1WamRGUnZVMjVoYTJVc1hHNGdJSFJ2VTI1aGEyVXNYRzRnSUhSdlEyRnRaV3dzWEc0Z0lIUnZVR0Z6WTJGc0xGeHVJQ0J2WW1wbFkzUlViMUJoYzJOaGJDeGNibjBnWm5KdmJTQW5MaTlqWVhObFEyOXVkbVZ5ZENjN1hHNWNibVY0Y0c5eWRDQjBlWEJsSUh0Y2JpQWdUMkpxWldOMFZHOURZVzFsYkN4Y2JpQWdUMkpxWldOMFZHOVRibUZyWlN4Y2JpQWdWRzlUYm1GclpTeGNiaUFnVkc5RFlXMWxiQ3hjYmlBZ1ZHOVFZWE5qWVd3c1hHNGdJRTlpYW1WamRGUnZVR0Z6WTJGc0xGeHVmU0JtY205dElDY3VMMk5oYzJWRGIyNTJaWEowSnp0Y2JpSmRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-case-convert/lib/index.js\n");

/***/ })

};
;