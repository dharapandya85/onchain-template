"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@alloralabs";
exports.ids = ["vendor-chunks/@alloralabs"];
exports.modules = {

/***/ "(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AlloraAPIClient = exports.SignatureFormat = exports.PriceInferenceTimeframe = exports.PriceInferenceToken = exports.ChainID = exports.ChainSlug = void 0;\nvar ChainSlug;\n(function (ChainSlug) {\n    ChainSlug[\"TESTNET\"] = \"testnet\";\n    ChainSlug[\"MAINNET\"] = \"mainnet\";\n})(ChainSlug || (exports.ChainSlug = ChainSlug = {}));\nvar ChainID;\n(function (ChainID) {\n    ChainID[\"TESTNET\"] = \"allora-testnet-1\";\n    ChainID[\"MAINNET\"] = \"allora-mainnet-1\";\n})(ChainID || (exports.ChainID = ChainID = {}));\nvar PriceInferenceToken;\n(function (PriceInferenceToken) {\n    PriceInferenceToken[\"BTC\"] = \"BTC\";\n    PriceInferenceToken[\"ETH\"] = \"ETH\";\n})(PriceInferenceToken || (exports.PriceInferenceToken = PriceInferenceToken = {}));\nvar PriceInferenceTimeframe;\n(function (PriceInferenceTimeframe) {\n    PriceInferenceTimeframe[\"FIVE_MIN\"] = \"5m\";\n    PriceInferenceTimeframe[\"EIGHT_HOURS\"] = \"8h\";\n})(PriceInferenceTimeframe || (exports.PriceInferenceTimeframe = PriceInferenceTimeframe = {}));\nvar SignatureFormat;\n(function (SignatureFormat) {\n    SignatureFormat[\"ETHEREUM_SEPOLIA\"] = \"ethereum-11155111\";\n})(SignatureFormat || (exports.SignatureFormat = SignatureFormat = {}));\nclass AlloraAPIClient {\n    constructor(config) {\n        this.chainID =\n            config.chainSlug === ChainSlug.TESTNET\n                ? ChainID.TESTNET\n                : ChainID.MAINNET;\n        this.apiKey = config.apiKey || \"UP-8cbc632a67a84ac1b4078661\";\n        this.baseAPIUrl = config.baseAPIUrl || \"https://api.upshot.xyz/v2\";\n    }\n    /**\n     * Fetches all available topics from the Allora API.\n     * This method handles pagination automatically by following continuation tokens\n     * until all topics have been retrieved.\n     *\n     * @returns {Promise<AlloraTopic[]>} A promise that resolves to an array of all available topics\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getAllTopics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allTopics = [];\n            let continuationToken = null;\n            do {\n                const response = yield this.fetchAPIResponse(`allora/${this.chainID}/topics`, continuationToken\n                    ? {\n                        continuation_token: continuationToken,\n                    }\n                    : {});\n                allTopics.push(...response.data.topics);\n                continuationToken = response.data.continuation_token;\n            } while (continuationToken);\n            return allTopics;\n        });\n    }\n    /**\n     * Fetches an inference for a specific topic from the Allora API.\n     *\n     * @param {number} topicID - The unique identifier of the topic to get inference for\n     * @returns {Promise<AlloraInference>} A promise that resolves to the inference data\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getInferenceByTopicID(topicID_1) {\n        return __awaiter(this, arguments, void 0, function* (topicID, signatureFormat = SignatureFormat.ETHEREUM_SEPOLIA) {\n            var _a;\n            const response = yield this.fetchAPIResponse(`allora/consumer/${signatureFormat}?allora_topic_id=${topicID}&inference_value_type=uint256`);\n            if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.inference_data)) {\n                throw new Error(\"Failed to fetch price inference\");\n            }\n            return response.data;\n        });\n    }\n    /**\n     * Fetches a price inference for a specific asset and timeframe from the Allora API.\n     *\n     * @param {PriceInferenceToken} asset - The asset to get price inference for\n     * @param {PriceInferenceTimeframe} timeframe - The timeframe to get price inference for\n     * @returns {Promise<AlloraInference>} A promise that resolves to the inference data\n     * @throws {Error} If the API request fails or returns an unsuccessful status\n     */\n    getPriceInference(asset_1, timeframe_1) {\n        return __awaiter(this, arguments, void 0, function* (asset, timeframe, signatureFormat = SignatureFormat.ETHEREUM_SEPOLIA) {\n            var _a;\n            const response = yield this.fetchAPIResponse(`allora/consumer/price/${signatureFormat}/${asset}/${timeframe}`);\n            if (!((_a = response.data) === null || _a === void 0 ? void 0 : _a.inference_data)) {\n                throw new Error(\"Failed to fetch price inference\");\n            }\n            return response.data;\n        });\n    }\n    getRequestUrl(endpoint) {\n        // Remove trailing slash from baseAPIUrl if it exists\n        const apiUrl = this.baseAPIUrl.endsWith(\"/\")\n            ? this.baseAPIUrl.slice(0, -1)\n            : this.baseAPIUrl;\n        // Remove leading slash from endpoint if it exists\n        endpoint = endpoint.startsWith(\"/\") ? endpoint.slice(1) : endpoint;\n        return `${apiUrl}/${endpoint}`;\n    }\n    fetchAPIResponse(endpoint_1) {\n        return __awaiter(this, arguments, void 0, function* (endpoint, params = {}) {\n            const queryString = new URLSearchParams(params).toString();\n            const requestUrl = this.getRequestUrl(endpoint) + (queryString ? `?${queryString}` : \"\");\n            const response = yield fetch(requestUrl, {\n                method: \"GET\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    \"x-api-key\": this.apiKey,\n                },\n            });\n            const responseBody = yield response.json();\n            if (!response.ok) {\n                throw new Error(`Failed to fetch from Allora API:  url=${requestUrl} status=${response.status} body=${JSON.stringify(responseBody, null, 4)}`);\n            }\n            return responseBody;\n        });\n    }\n}\nexports.AlloraAPIClient = AlloraAPIClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./api-client */ \"(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/api-client.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFsbG9yYWxhYnMvYWxsb3JhLXNkay9kaXN0L3NyYy92Mi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsMkZBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbmNoYWluLWFnZW50Ly4vbm9kZV9tb2R1bGVzL0BhbGxvcmFsYWJzL2FsbG9yYS1zZGsvZGlzdC9zcmMvdjIvaW5kZXguanM/MTgyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FwaS1jbGllbnRcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@alloralabs/allora-sdk/dist/src/v2/index.js\n");

/***/ })

};
;