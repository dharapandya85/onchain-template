/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-fetch-native";
exports.ids = ["vendor-chunks/node-fetch-native"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs":
/*!*************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var N=Object.defineProperty;var c=(_,a)=>N(_,\"name\",{value:a,configurable:!0});__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");const node=__webpack_require__(/*! ../node.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ../shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\");let s=0;const S={START_BOUNDARY:s++,HEADER_FIELD_START:s++,HEADER_FIELD:s++,HEADER_VALUE_START:s++,HEADER_VALUE:s++,HEADER_VALUE_ALMOST_DONE:s++,HEADERS_ALMOST_DONE:s++,PART_DATA_START:s++,PART_DATA:s++,END:s++};let f=1;const F={PART_BOUNDARY:f,LAST_BOUNDARY:f*=2},LF=10,CR=13,SPACE=32,HYPHEN=45,COLON=58,A=97,Z=122,lower=c(_=>_|32,\"lower\"),noop=c(()=>{},\"noop\");class MultipartParser{static{c(this,\"MultipartParser\")}constructor(a){this.index=0,this.flags=0,this.onHeaderEnd=noop,this.onHeaderField=noop,this.onHeadersEnd=noop,this.onHeaderValue=noop,this.onPartBegin=noop,this.onPartData=noop,this.onPartEnd=noop,this.boundaryChars={},a=`\\r\n--`+a;const t=new Uint8Array(a.length);for(let n=0;n<a.length;n++)t[n]=a.charCodeAt(n),this.boundaryChars[t[n]]=!0;this.boundary=t,this.lookbehind=new Uint8Array(this.boundary.length+8),this.state=S.START_BOUNDARY}write(a){let t=0;const n=a.length;let E=this.index,{lookbehind:d,boundary:h,boundaryChars:H,index:e,state:o,flags:l}=this;const b=this.boundary.length,m=b-1,O=a.length;let r,P;const u=c(D=>{this[D+\"Mark\"]=t},\"mark\"),i=c(D=>{delete this[D+\"Mark\"]},\"clear\"),T=c((D,p,R,g)=>{(p===void 0||p!==R)&&this[D](g&&g.subarray(p,R))},\"callback\"),L=c((D,p)=>{const R=D+\"Mark\";R in this&&(p?(T(D,this[R],t,a),delete this[R]):(T(D,this[R],a.length,a),this[R]=0))},\"dataCallback\");for(t=0;t<n;t++)switch(r=a[t],o){case S.START_BOUNDARY:if(e===h.length-2){if(r===HYPHEN)l|=F.LAST_BOUNDARY;else if(r!==CR)return;e++;break}else if(e-1===h.length-2){if(l&F.LAST_BOUNDARY&&r===HYPHEN)o=S.END,l=0;else if(!(l&F.LAST_BOUNDARY)&&r===LF)e=0,T(\"onPartBegin\"),o=S.HEADER_FIELD_START;else return;break}r!==h[e+2]&&(e=-2),r===h[e+2]&&e++;break;case S.HEADER_FIELD_START:o=S.HEADER_FIELD,u(\"onHeaderField\"),e=0;case S.HEADER_FIELD:if(r===CR){i(\"onHeaderField\"),o=S.HEADERS_ALMOST_DONE;break}if(e++,r===HYPHEN)break;if(r===COLON){if(e===1)return;L(\"onHeaderField\",!0),o=S.HEADER_VALUE_START;break}if(P=lower(r),P<A||P>Z)return;break;case S.HEADER_VALUE_START:if(r===SPACE)break;u(\"onHeaderValue\"),o=S.HEADER_VALUE;case S.HEADER_VALUE:r===CR&&(L(\"onHeaderValue\",!0),T(\"onHeaderEnd\"),o=S.HEADER_VALUE_ALMOST_DONE);break;case S.HEADER_VALUE_ALMOST_DONE:if(r!==LF)return;o=S.HEADER_FIELD_START;break;case S.HEADERS_ALMOST_DONE:if(r!==LF)return;T(\"onHeadersEnd\"),o=S.PART_DATA_START;break;case S.PART_DATA_START:o=S.PART_DATA,u(\"onPartData\");case S.PART_DATA:if(E=e,e===0){for(t+=m;t<O&&!(a[t]in H);)t+=b;t-=m,r=a[t]}if(e<h.length)h[e]===r?(e===0&&L(\"onPartData\",!0),e++):e=0;else if(e===h.length)e++,r===CR?l|=F.PART_BOUNDARY:r===HYPHEN?l|=F.LAST_BOUNDARY:e=0;else if(e-1===h.length)if(l&F.PART_BOUNDARY){if(e=0,r===LF){l&=~F.PART_BOUNDARY,T(\"onPartEnd\"),T(\"onPartBegin\"),o=S.HEADER_FIELD_START;break}}else l&F.LAST_BOUNDARY&&r===HYPHEN?(T(\"onPartEnd\"),o=S.END,l=0):e=0;if(e>0)d[e-1]=r;else if(E>0){const D=new Uint8Array(d.buffer,d.byteOffset,d.byteLength);T(\"onPartData\",0,E,D),E=0,u(\"onPartData\"),t--}break;case S.END:break;default:throw new Error(`Unexpected state entered: ${o}`)}L(\"onHeaderField\"),L(\"onHeaderValue\"),L(\"onPartData\"),this.index=e,this.state=o,this.flags=l}end(){if(this.state===S.HEADER_FIELD_START&&this.index===0||this.state===S.PART_DATA&&this.index===this.boundary.length)this.onPartEnd();else if(this.state!==S.END)throw new Error(\"MultipartParser.end(): stream ended unexpectedly\")}}function _fileName(_){const a=_.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);if(!a)return;const t=a[2]||a[3]||\"\";let n=t.slice(t.lastIndexOf(\"\\\\\")+1);return n=n.replace(/%22/g,'\"'),n=n.replace(/&#(\\d{4});/g,(E,d)=>String.fromCharCode(d)),n}c(_fileName,\"_fileName\");async function toFormData(_,a){if(!/multipart/i.test(a))throw new TypeError(\"Failed to fetch\");const t=a.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);if(!t)throw new TypeError(\"no or bad content-type header, no multipart boundary\");const n=new MultipartParser(t[1]||t[2]);let E,d,h,H,e,o;const l=[],b=new node.FormData,m=c(i=>{h+=u.decode(i,{stream:!0})},\"onPartData\"),O=c(i=>{l.push(i)},\"appendToFile\"),r=c(()=>{const i=new node.File(l,o,{type:e});b.append(H,i)},\"appendFileToFormData\"),P=c(()=>{b.append(H,h)},\"appendEntryToFormData\"),u=new TextDecoder(\"utf-8\");u.decode(),n.onPartBegin=function(){n.onPartData=m,n.onPartEnd=P,E=\"\",d=\"\",h=\"\",H=\"\",e=\"\",o=null,l.length=0},n.onHeaderField=function(i){E+=u.decode(i,{stream:!0})},n.onHeaderValue=function(i){d+=u.decode(i,{stream:!0})},n.onHeaderEnd=function(){if(d+=u.decode(),E=E.toLowerCase(),E===\"content-disposition\"){const i=d.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);i&&(H=i[2]||i[3]||\"\"),o=_fileName(d),o&&(n.onPartData=O,n.onPartEnd=r)}else E===\"content-type\"&&(e=d);d=\"\",E=\"\"};for await(const i of _)n.write(i);return n.end(),b}c(toFormData,\"toFormData\"),exports.toFormData=toFormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/index.cjs":
/*!*******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/index.cjs ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", ({value:!0}));const node=__webpack_require__(/*! ./node.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/node.cjs\");__webpack_require__(/*! node:http */ \"node:http\"),__webpack_require__(/*! node:https */ \"node:https\"),__webpack_require__(/*! node:zlib */ \"node:zlib\"),__webpack_require__(/*! node:stream */ \"node:stream\"),__webpack_require__(/*! node:buffer */ \"node:buffer\"),__webpack_require__(/*! node:util */ \"node:util\"),__webpack_require__(/*! ./shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),__webpack_require__(/*! node:url */ \"node:url\"),__webpack_require__(/*! node:net */ \"node:net\"),__webpack_require__(/*! node:fs */ \"node:fs\"),__webpack_require__(/*! node:path */ \"node:path\");const o=!!globalThis.process?.env?.FORCE_NODE_FETCH,fetch=!o&&globalThis.fetch||node.fetch,Blob=!o&&globalThis.Blob||node.Blob,File=!o&&globalThis.File||node.File,FormData=!o&&globalThis.FormData||node.FormData,Headers=!o&&globalThis.Headers||node.Headers,Request=!o&&globalThis.Request||node.Request,Response=!o&&globalThis.Response||node.Response,AbortController=!o&&globalThis.AbortController||node.AbortController;exports.AbortError=node.AbortError,exports.FetchError=node.FetchError,exports.blobFrom=node.blobFrom,exports.blobFromSync=node.blobFromSync,exports.fileFrom=node.fileFrom,exports.fileFromSync=node.fileFromSync,exports.isRedirect=node.isRedirect,exports.AbortController=AbortController,exports.Blob=Blob,exports.File=File,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports[\"default\"]=fetch,exports.fetch=fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQWEsOENBQTJDLENBQUMsU0FBUyxFQUFDLENBQUMsV0FBVyxtQkFBTyxDQUFDLHdFQUFZLEVBQUUsbUJBQU8sQ0FBQyw0QkFBVyxFQUFFLG1CQUFPLENBQUMsOEJBQVksRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsbUJBQU8sQ0FBQyxnQ0FBYSxFQUFFLG1CQUFPLENBQUMsZ0NBQWEsRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsbUJBQU8sQ0FBQyxrSUFBeUMsRUFBRSxtQkFBTyxDQUFDLDBCQUFVLEVBQUUsbUJBQU8sQ0FBQywwQkFBVSxFQUFFLG1CQUFPLENBQUMsd0JBQVMsRUFBRSxtQkFBTyxDQUFDLDRCQUFXLEVBQUUsa2FBQWthLGtCQUFrQixpQkFBaUIsa0JBQWtCLGlCQUFpQixnQkFBZ0IsZUFBZSxvQkFBb0IsbUJBQW1CLGdCQUFnQixlQUFlLG9CQUFvQixtQkFBbUIsa0JBQWtCLGlCQUFpQix1QkFBdUIsaUJBQWlCLFlBQVksTUFBTSxZQUFZLE1BQU0sZ0JBQWdCLFVBQVUsZUFBZSxTQUFTLGVBQWUsU0FBUyxnQkFBZ0IsVUFBVSxrQkFBZSxPQUFPLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbmNoYWluLWFnZW50Ly4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gtbmF0aXZlL2Rpc3QvaW5kZXguY2pzP2NhMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbm9kZT1yZXF1aXJlKFwiLi9ub2RlLmNqc1wiKTtyZXF1aXJlKFwibm9kZTpodHRwXCIpLHJlcXVpcmUoXCJub2RlOmh0dHBzXCIpLHJlcXVpcmUoXCJub2RlOnpsaWJcIikscmVxdWlyZShcIm5vZGU6c3RyZWFtXCIpLHJlcXVpcmUoXCJub2RlOmJ1ZmZlclwiKSxyZXF1aXJlKFwibm9kZTp1dGlsXCIpLHJlcXVpcmUoXCIuL3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS5EaEVxYjA2Zy5janNcIikscmVxdWlyZShcIm5vZGU6dXJsXCIpLHJlcXVpcmUoXCJub2RlOm5ldFwiKSxyZXF1aXJlKFwibm9kZTpmc1wiKSxyZXF1aXJlKFwibm9kZTpwYXRoXCIpO2NvbnN0IG89ISFnbG9iYWxUaGlzLnByb2Nlc3M/LmVudj8uRk9SQ0VfTk9ERV9GRVRDSCxmZXRjaD0hbyYmZ2xvYmFsVGhpcy5mZXRjaHx8bm9kZS5mZXRjaCxCbG9iPSFvJiZnbG9iYWxUaGlzLkJsb2J8fG5vZGUuQmxvYixGaWxlPSFvJiZnbG9iYWxUaGlzLkZpbGV8fG5vZGUuRmlsZSxGb3JtRGF0YT0hbyYmZ2xvYmFsVGhpcy5Gb3JtRGF0YXx8bm9kZS5Gb3JtRGF0YSxIZWFkZXJzPSFvJiZnbG9iYWxUaGlzLkhlYWRlcnN8fG5vZGUuSGVhZGVycyxSZXF1ZXN0PSFvJiZnbG9iYWxUaGlzLlJlcXVlc3R8fG5vZGUuUmVxdWVzdCxSZXNwb25zZT0hbyYmZ2xvYmFsVGhpcy5SZXNwb25zZXx8bm9kZS5SZXNwb25zZSxBYm9ydENvbnRyb2xsZXI9IW8mJmdsb2JhbFRoaXMuQWJvcnRDb250cm9sbGVyfHxub2RlLkFib3J0Q29udHJvbGxlcjtleHBvcnRzLkFib3J0RXJyb3I9bm9kZS5BYm9ydEVycm9yLGV4cG9ydHMuRmV0Y2hFcnJvcj1ub2RlLkZldGNoRXJyb3IsZXhwb3J0cy5ibG9iRnJvbT1ub2RlLmJsb2JGcm9tLGV4cG9ydHMuYmxvYkZyb21TeW5jPW5vZGUuYmxvYkZyb21TeW5jLGV4cG9ydHMuZmlsZUZyb209bm9kZS5maWxlRnJvbSxleHBvcnRzLmZpbGVGcm9tU3luYz1ub2RlLmZpbGVGcm9tU3luYyxleHBvcnRzLmlzUmVkaXJlY3Q9bm9kZS5pc1JlZGlyZWN0LGV4cG9ydHMuQWJvcnRDb250cm9sbGVyPUFib3J0Q29udHJvbGxlcixleHBvcnRzLkJsb2I9QmxvYixleHBvcnRzLkZpbGU9RmlsZSxleHBvcnRzLkZvcm1EYXRhPUZvcm1EYXRhLGV4cG9ydHMuSGVhZGVycz1IZWFkZXJzLGV4cG9ydHMuUmVxdWVzdD1SZXF1ZXN0LGV4cG9ydHMuUmVzcG9uc2U9UmVzcG9uc2UsZXhwb3J0cy5kZWZhdWx0PWZldGNoLGV4cG9ydHMuZmV0Y2g9ZmV0Y2g7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/node.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/node.cjs ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("var qi=Object.defineProperty;var u=(c,l)=>qi(c,\"name\",{value:l,configurable:!0});Object.defineProperty(exports, \"__esModule\", ({value:!0}));const http=__webpack_require__(/*! node:http */ \"node:http\"),https=__webpack_require__(/*! node:https */ \"node:https\"),zlib=__webpack_require__(/*! node:zlib */ \"node:zlib\"),Stream=__webpack_require__(/*! node:stream */ \"node:stream\"),require$$0=__webpack_require__(/*! node:buffer */ \"node:buffer\"),require$$0$1=__webpack_require__(/*! node:util */ \"node:util\"),_commonjsHelpers=__webpack_require__(/*! ./shared/node-fetch-native.DhEqb06g.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\"),require$$1=__webpack_require__(/*! node:url */ \"node:url\"),require$$0$2=__webpack_require__(/*! node:net */ \"node:net\"),node_fs=__webpack_require__(/*! node:fs */ \"node:fs\"),node_path=__webpack_require__(/*! node:path */ \"node:path\");function _interopDefaultCompat(c){return c&&typeof c==\"object\"&&\"default\"in c?c.default:c}u(_interopDefaultCompat,\"_interopDefaultCompat\");const http__default=_interopDefaultCompat(http),https__default=_interopDefaultCompat(https),zlib__default=_interopDefaultCompat(zlib),Stream__default=_interopDefaultCompat(Stream);function dataUriToBuffer(c){if(!/^data:/i.test(c))throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');c=c.replace(/\\r?\\n/g,\"\");const l=c.indexOf(\",\");if(l===-1||l<=4)throw new TypeError(\"malformed data: URI\");const d=c.substring(5,l).split(\";\");let y=\"\",b=!1;const R=d[0]||\"text/plain\";let w=R;for(let z=1;z<d.length;z++)d[z]===\"base64\"?b=!0:d[z]&&(w+=`;${d[z]}`,d[z].indexOf(\"charset=\")===0&&(y=d[z].substring(8)));!d[0]&&!y.length&&(w+=\";charset=US-ASCII\",y=\"US-ASCII\");const A=b?\"base64\":\"ascii\",F=unescape(c.substring(l+1)),B=Buffer.from(F,A);return B.type=R,B.typeFull=w,B.charset=y,B}u(dataUriToBuffer,\"dataUriToBuffer\");var streams={},ponyfill_es2018$1={exports:{}};/**\n * @license\n * web-streams-polyfill v3.3.3\n * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.\n * This code is released under the MIT license.\n * SPDX-License-Identifier: MIT\n */var ponyfill_es2018=ponyfill_es2018$1.exports,hasRequiredPonyfill_es2018;function requirePonyfill_es2018(){return hasRequiredPonyfill_es2018||(hasRequiredPonyfill_es2018=1,function(c,l){(function(d,y){y(l)})(ponyfill_es2018,function(d){function y(){}u(y,\"noop\");function b(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(b,\"typeIsObject\");const R=y;function w(n,o){try{Object.defineProperty(n,\"name\",{value:o,configurable:!0})}catch{}}u(w,\"setFunctionName\");const A=Promise,F=Promise.prototype.then,B=Promise.reject.bind(A);function z(n){return new A(n)}u(z,\"newPromise\");function W(n){return z(o=>o(n))}u(W,\"promiseResolvedWith\");function T(n){return B(n)}u(T,\"promiseRejectedWith\");function D(n,o,a){return F.call(n,o,a)}u(D,\"PerformPromiseThen\");function E(n,o,a){D(D(n,o,a),void 0,R)}u(E,\"uponPromise\");function Z(n,o){E(n,o)}u(Z,\"uponFulfillment\");function M(n,o){E(n,void 0,o)}u(M,\"uponRejection\");function U(n,o,a){return D(n,o,a)}u(U,\"transformPromiseWith\");function K(n){D(n,void 0,R)}u(K,\"setPromiseIsHandledToTrue\");let se=u(n=>{if(typeof queueMicrotask==\"function\")se=queueMicrotask;else{const o=W(void 0);se=u(a=>D(o,a),\"_queueMicrotask\")}return se(n)},\"_queueMicrotask\");function $(n,o,a){if(typeof n!=\"function\")throw new TypeError(\"Argument is not a function\");return Function.prototype.apply.call(n,o,a)}u($,\"reflectCall\");function N(n,o,a){try{return W($(n,o,a))}catch(p){return T(p)}}u(N,\"promiseCall\");const V=16384;class Q{static{u(this,\"SimpleQueue\")}constructor(){this._cursor=0,this._size=0,this._front={_elements:[],_next:void 0},this._back=this._front,this._cursor=0,this._size=0}get length(){return this._size}push(o){const a=this._back;let p=a;a._elements.length===V-1&&(p={_elements:[],_next:void 0}),a._elements.push(o),p!==a&&(this._back=p,a._next=p),++this._size}shift(){const o=this._front;let a=o;const p=this._cursor;let g=p+1;const _=o._elements,S=_[p];return g===V&&(a=o._next,g=0),--this._size,this._cursor=g,o!==a&&(this._front=a),_[p]=void 0,S}forEach(o){let a=this._cursor,p=this._front,g=p._elements;for(;(a!==g.length||p._next!==void 0)&&!(a===g.length&&(p=p._next,g=p._elements,a=0,g.length===0));)o(g[a]),++a}peek(){const o=this._front,a=this._cursor;return o._elements[a]}}const rt=Symbol(\"[[AbortSteps]]\"),wr=Symbol(\"[[ErrorSteps]]\"),Ot=Symbol(\"[[CancelSteps]]\"),Ft=Symbol(\"[[PullSteps]]\"),It=Symbol(\"[[ReleaseSteps]]\");function Rr(n,o){n._ownerReadableStream=o,o._reader=n,o._state===\"readable\"?jt(n):o._state===\"closed\"?Dn(n):Tr(n,o._storedError)}u(Rr,\"ReadableStreamReaderGenericInitialize\");function zt(n,o){const a=n._ownerReadableStream;return ne(a,o)}u(zt,\"ReadableStreamReaderGenericCancel\");function ue(n){const o=n._ownerReadableStream;o._state===\"readable\"?Lt(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")):$n(n,new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\")),o._readableStreamController[It](),o._reader=void 0,n._ownerReadableStream=void 0}u(ue,\"ReadableStreamReaderGenericRelease\");function nt(n){return new TypeError(\"Cannot \"+n+\" a stream using a released reader\")}u(nt,\"readerLockException\");function jt(n){n._closedPromise=z((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a})}u(jt,\"defaultReaderClosedPromiseInitialize\");function Tr(n,o){jt(n),Lt(n,o)}u(Tr,\"defaultReaderClosedPromiseInitializeAsRejected\");function Dn(n){jt(n),Cr(n)}u(Dn,\"defaultReaderClosedPromiseInitializeAsResolved\");function Lt(n,o){n._closedPromise_reject!==void 0&&(K(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(Lt,\"defaultReaderClosedPromiseReject\");function $n(n,o){Tr(n,o)}u($n,\"defaultReaderClosedPromiseResetToRejected\");function Cr(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0)}u(Cr,\"defaultReaderClosedPromiseResolve\");const Pr=Number.isFinite||function(n){return typeof n==\"number\"&&isFinite(n)},Mn=Math.trunc||function(n){return n<0?Math.ceil(n):Math.floor(n)};function xn(n){return typeof n==\"object\"||typeof n==\"function\"}u(xn,\"isDictionary\");function ie(n,o){if(n!==void 0&&!xn(n))throw new TypeError(`${o} is not an object.`)}u(ie,\"assertDictionary\");function X(n,o){if(typeof n!=\"function\")throw new TypeError(`${o} is not a function.`)}u(X,\"assertFunction\");function Un(n){return typeof n==\"object\"&&n!==null||typeof n==\"function\"}u(Un,\"isObject\");function Er(n,o){if(!Un(n))throw new TypeError(`${o} is not an object.`)}u(Er,\"assertObject\");function le(n,o,a){if(n===void 0)throw new TypeError(`Parameter ${o} is required in '${a}'.`)}u(le,\"assertRequiredArgument\");function Dt(n,o,a){if(n===void 0)throw new TypeError(`${o} is required in '${a}'.`)}u(Dt,\"assertRequiredField\");function $t(n){return Number(n)}u($t,\"convertUnrestrictedDouble\");function vr(n){return n===0?0:n}u(vr,\"censorNegativeZero\");function Nn(n){return vr(Mn(n))}u(Nn,\"integerPart\");function Mt(n,o){const p=Number.MAX_SAFE_INTEGER;let g=Number(n);if(g=vr(g),!Pr(g))throw new TypeError(`${o} is not a finite number`);if(g=Nn(g),g<0||g>p)throw new TypeError(`${o} is outside the accepted range of 0 to ${p}, inclusive`);return!Pr(g)||g===0?0:g}u(Mt,\"convertUnsignedLongLongWithEnforceRange\");function xt(n,o){if(!Re(n))throw new TypeError(`${o} is not a ReadableStream.`)}u(xt,\"assertReadableStream\");function Fe(n){return new me(n)}u(Fe,\"AcquireReadableStreamDefaultReader\");function Ar(n,o){n._reader._readRequests.push(o)}u(Ar,\"ReadableStreamAddReadRequest\");function Ut(n,o,a){const g=n._reader._readRequests.shift();a?g._closeSteps():g._chunkSteps(o)}u(Ut,\"ReadableStreamFulfillReadRequest\");function ot(n){return n._reader._readRequests.length}u(ot,\"ReadableStreamGetNumReadRequests\");function Br(n){const o=n._reader;return!(o===void 0||!ye(o))}u(Br,\"ReadableStreamHasDefaultReader\");class me{static{u(this,\"ReadableStreamDefaultReader\")}constructor(o){if(le(o,1,\"ReadableStreamDefaultReader\"),xt(o,\"First parameter\"),Te(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");Rr(this,o),this._readRequests=new Q}get closed(){return ye(this)?this._closedPromise:T(it(\"closed\"))}cancel(o=void 0){return ye(this)?this._ownerReadableStream===void 0?T(nt(\"cancel\")):zt(this,o):T(it(\"cancel\"))}read(){if(!ye(this))return T(it(\"read\"));if(this._ownerReadableStream===void 0)return T(nt(\"read from\"));let o,a;const p=z((_,S)=>{o=_,a=S});return Ve(this,{_chunkSteps:u(_=>o({value:_,done:!1}),\"_chunkSteps\"),_closeSteps:u(()=>o({value:void 0,done:!0}),\"_closeSteps\"),_errorSteps:u(_=>a(_),\"_errorSteps\")}),p}releaseLock(){if(!ye(this))throw it(\"releaseLock\");this._ownerReadableStream!==void 0&&Hn(this)}}Object.defineProperties(me.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(me.prototype.cancel,\"cancel\"),w(me.prototype.read,\"read\"),w(me.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(me.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultReader\",configurable:!0});function ye(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readRequests\")?!1:n instanceof me}u(ye,\"IsReadableStreamDefaultReader\");function Ve(n,o){const a=n._ownerReadableStream;a._disturbed=!0,a._state===\"closed\"?o._closeSteps():a._state===\"errored\"?o._errorSteps(a._storedError):a._readableStreamController[Ft](o)}u(Ve,\"ReadableStreamDefaultReaderRead\");function Hn(n){ue(n);const o=new TypeError(\"Reader was released\");qr(n,o)}u(Hn,\"ReadableStreamDefaultReaderRelease\");function qr(n,o){const a=n._readRequests;n._readRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(qr,\"ReadableStreamDefaultReaderErrorReadRequests\");function it(n){return new TypeError(`ReadableStreamDefaultReader.prototype.${n} can only be used on a ReadableStreamDefaultReader`)}u(it,\"defaultReaderBrandCheckException\");const Vn=Object.getPrototypeOf(Object.getPrototypeOf(async function*(){}).prototype);class Wr{static{u(this,\"ReadableStreamAsyncIteratorImpl\")}constructor(o,a){this._ongoingPromise=void 0,this._isFinished=!1,this._reader=o,this._preventCancel=a}next(){const o=u(()=>this._nextSteps(),\"nextSteps\");return this._ongoingPromise=this._ongoingPromise?U(this._ongoingPromise,o,o):o(),this._ongoingPromise}return(o){const a=u(()=>this._returnSteps(o),\"returnSteps\");return this._ongoingPromise?U(this._ongoingPromise,a,a):a()}_nextSteps(){if(this._isFinished)return Promise.resolve({value:void 0,done:!0});const o=this._reader;let a,p;const g=z((S,C)=>{a=S,p=C});return Ve(o,{_chunkSteps:u(S=>{this._ongoingPromise=void 0,se(()=>a({value:S,done:!1}))},\"_chunkSteps\"),_closeSteps:u(()=>{this._ongoingPromise=void 0,this._isFinished=!0,ue(o),a({value:void 0,done:!0})},\"_closeSteps\"),_errorSteps:u(S=>{this._ongoingPromise=void 0,this._isFinished=!0,ue(o),p(S)},\"_errorSteps\")}),g}_returnSteps(o){if(this._isFinished)return Promise.resolve({value:o,done:!0});this._isFinished=!0;const a=this._reader;if(!this._preventCancel){const p=zt(a,o);return ue(a),U(p,()=>({value:o,done:!0}))}return ue(a),W({value:o,done:!0})}}const kr={next(){return Or(this)?this._asyncIteratorImpl.next():T(Fr(\"next\"))},return(n){return Or(this)?this._asyncIteratorImpl.return(n):T(Fr(\"return\"))}};Object.setPrototypeOf(kr,Vn);function Qn(n,o){const a=Fe(n),p=new Wr(a,o),g=Object.create(kr);return g._asyncIteratorImpl=p,g}u(Qn,\"AcquireReadableStreamAsyncIterator\");function Or(n){if(!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_asyncIteratorImpl\"))return!1;try{return n._asyncIteratorImpl instanceof Wr}catch{return!1}}u(Or,\"IsReadableStreamAsyncIterator\");function Fr(n){return new TypeError(`ReadableStreamAsyncIterator.${n} can only be used on a ReadableSteamAsyncIterator`)}u(Fr,\"streamAsyncIteratorBrandCheckException\");const Ir=Number.isNaN||function(n){return n!==n};var Nt,Ht,Vt;function Qe(n){return n.slice()}u(Qe,\"CreateArrayFromList\");function zr(n,o,a,p,g){new Uint8Array(n).set(new Uint8Array(a,p,g),o)}u(zr,\"CopyDataBlockBytes\");let fe=u(n=>(typeof n.transfer==\"function\"?fe=u(o=>o.transfer(),\"TransferArrayBuffer\"):typeof structuredClone==\"function\"?fe=u(o=>structuredClone(o,{transfer:[o]}),\"TransferArrayBuffer\"):fe=u(o=>o,\"TransferArrayBuffer\"),fe(n)),\"TransferArrayBuffer\"),ge=u(n=>(typeof n.detached==\"boolean\"?ge=u(o=>o.detached,\"IsDetachedBuffer\"):ge=u(o=>o.byteLength===0,\"IsDetachedBuffer\"),ge(n)),\"IsDetachedBuffer\");function jr(n,o,a){if(n.slice)return n.slice(o,a);const p=a-o,g=new ArrayBuffer(p);return zr(g,0,n,o,p),g}u(jr,\"ArrayBufferSlice\");function at(n,o){const a=n[o];if(a!=null){if(typeof a!=\"function\")throw new TypeError(`${String(o)} is not a function`);return a}}u(at,\"GetMethod\");function Yn(n){const o={[Symbol.iterator]:()=>n.iterator},a=async function*(){return yield*o}(),p=a.next;return{iterator:a,nextMethod:p,done:!1}}u(Yn,\"CreateAsyncFromSyncIterator\");const Qt=(Vt=(Nt=Symbol.asyncIterator)!==null&&Nt!==void 0?Nt:(Ht=Symbol.for)===null||Ht===void 0?void 0:Ht.call(Symbol,\"Symbol.asyncIterator\"))!==null&&Vt!==void 0?Vt:\"@@asyncIterator\";function Lr(n,o=\"sync\",a){if(a===void 0)if(o===\"async\"){if(a=at(n,Qt),a===void 0){const _=at(n,Symbol.iterator),S=Lr(n,\"sync\",_);return Yn(S)}}else a=at(n,Symbol.iterator);if(a===void 0)throw new TypeError(\"The object is not iterable\");const p=$(a,n,[]);if(!b(p))throw new TypeError(\"The iterator method must return an object\");const g=p.next;return{iterator:p,nextMethod:g,done:!1}}u(Lr,\"GetIterator\");function Gn(n){const o=$(n.nextMethod,n.iterator,[]);if(!b(o))throw new TypeError(\"The iterator.next() method must return an object\");return o}u(Gn,\"IteratorNext\");function Zn(n){return!!n.done}u(Zn,\"IteratorComplete\");function Kn(n){return n.value}u(Kn,\"IteratorValue\");function Jn(n){return!(typeof n!=\"number\"||Ir(n)||n<0)}u(Jn,\"IsNonNegativeNumber\");function Dr(n){const o=jr(n.buffer,n.byteOffset,n.byteOffset+n.byteLength);return new Uint8Array(o)}u(Dr,\"CloneAsUint8Array\");function Yt(n){const o=n._queue.shift();return n._queueTotalSize-=o.size,n._queueTotalSize<0&&(n._queueTotalSize=0),o.value}u(Yt,\"DequeueValue\");function Gt(n,o,a){if(!Jn(a)||a===1/0)throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");n._queue.push({value:o,size:a}),n._queueTotalSize+=a}u(Gt,\"EnqueueValueWithSize\");function Xn(n){return n._queue.peek().value}u(Xn,\"PeekQueueValue\");function _e(n){n._queue=new Q,n._queueTotalSize=0}u(_e,\"ResetQueue\");function $r(n){return n===DataView}u($r,\"isDataViewConstructor\");function eo(n){return $r(n.constructor)}u(eo,\"isDataView\");function to(n){return $r(n)?1:n.BYTES_PER_ELEMENT}u(to,\"arrayBufferViewElementSize\");class Ee{static{u(this,\"ReadableStreamBYOBRequest\")}constructor(){throw new TypeError(\"Illegal constructor\")}get view(){if(!Zt(this))throw tr(\"view\");return this._view}respond(o){if(!Zt(this))throw tr(\"respond\");if(le(o,1,\"respond\"),o=Mt(o,\"First parameter\"),this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(ge(this._view.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be used as a response\");ft(this._associatedReadableByteStreamController,o)}respondWithNewView(o){if(!Zt(this))throw tr(\"respondWithNewView\");if(le(o,1,\"respondWithNewView\"),!ArrayBuffer.isView(o))throw new TypeError(\"You can only respond with array buffer views\");if(this._associatedReadableByteStreamController===void 0)throw new TypeError(\"This BYOB request has been invalidated\");if(ge(o.buffer))throw new TypeError(\"The given view's buffer has been detached and so cannot be used as a response\");ct(this._associatedReadableByteStreamController,o)}}Object.defineProperties(Ee.prototype,{respond:{enumerable:!0},respondWithNewView:{enumerable:!0},view:{enumerable:!0}}),w(Ee.prototype.respond,\"respond\"),w(Ee.prototype.respondWithNewView,\"respondWithNewView\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ee.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBRequest\",configurable:!0});class ce{static{u(this,\"ReadableByteStreamController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get byobRequest(){if(!ve(this))throw Ge(\"byobRequest\");return er(this)}get desiredSize(){if(!ve(this))throw Ge(\"desiredSize\");return Zr(this)}close(){if(!ve(this))throw Ge(\"close\");if(this._closeRequested)throw new TypeError(\"The stream has already been closed; do not close it again!\");const o=this._controlledReadableByteStream._state;if(o!==\"readable\")throw new TypeError(`The stream (in ${o} state) is not in the readable state and cannot be closed`);Ye(this)}enqueue(o){if(!ve(this))throw Ge(\"enqueue\");if(le(o,1,\"enqueue\"),!ArrayBuffer.isView(o))throw new TypeError(\"chunk must be an array buffer view\");if(o.byteLength===0)throw new TypeError(\"chunk must have non-zero byteLength\");if(o.buffer.byteLength===0)throw new TypeError(\"chunk's buffer must have non-zero byteLength\");if(this._closeRequested)throw new TypeError(\"stream is closed or draining\");const a=this._controlledReadableByteStream._state;if(a!==\"readable\")throw new TypeError(`The stream (in ${a} state) is not in the readable state and cannot be enqueued to`);lt(this,o)}error(o=void 0){if(!ve(this))throw Ge(\"error\");ee(this,o)}[Ot](o){Mr(this),_e(this);const a=this._cancelAlgorithm(o);return ut(this),a}[Ft](o){const a=this._controlledReadableByteStream;if(this._queueTotalSize>0){Gr(this,o);return}const p=this._autoAllocateChunkSize;if(p!==void 0){let g;try{g=new ArrayBuffer(p)}catch(S){o._errorSteps(S);return}const _={buffer:g,bufferByteLength:p,byteOffset:0,byteLength:p,bytesFilled:0,minimumFill:1,elementSize:1,viewConstructor:Uint8Array,readerType:\"default\"};this._pendingPullIntos.push(_)}Ar(a,o),Ae(this)}[It](){if(this._pendingPullIntos.length>0){const o=this._pendingPullIntos.peek();o.readerType=\"none\",this._pendingPullIntos=new Q,this._pendingPullIntos.push(o)}}}Object.defineProperties(ce.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},byobRequest:{enumerable:!0},desiredSize:{enumerable:!0}}),w(ce.prototype.close,\"close\"),w(ce.prototype.enqueue,\"enqueue\"),w(ce.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(ce.prototype,Symbol.toStringTag,{value:\"ReadableByteStreamController\",configurable:!0});function ve(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableByteStream\")?!1:n instanceof ce}u(ve,\"IsReadableByteStreamController\");function Zt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_associatedReadableByteStreamController\")?!1:n instanceof Ee}u(Zt,\"IsReadableStreamBYOBRequest\");function Ae(n){if(!ao(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,Ae(n)),null),p=>(ee(n,p),null))}u(Ae,\"ReadableByteStreamControllerCallPullIfNeeded\");function Mr(n){Jt(n),n._pendingPullIntos=new Q}u(Mr,\"ReadableByteStreamControllerClearPendingPullIntos\");function Kt(n,o){let a=!1;n._state===\"closed\"&&(a=!0);const p=xr(o);o.readerType===\"default\"?Ut(n,p,a):ho(n,p,a)}u(Kt,\"ReadableByteStreamControllerCommitPullIntoDescriptor\");function xr(n){const o=n.bytesFilled,a=n.elementSize;return new n.viewConstructor(n.buffer,n.byteOffset,o/a)}u(xr,\"ReadableByteStreamControllerConvertPullIntoDescriptor\");function st(n,o,a,p){n._queue.push({buffer:o,byteOffset:a,byteLength:p}),n._queueTotalSize+=p}u(st,\"ReadableByteStreamControllerEnqueueChunkToQueue\");function Ur(n,o,a,p){let g;try{g=jr(o,a,a+p)}catch(_){throw ee(n,_),_}st(n,g,0,p)}u(Ur,\"ReadableByteStreamControllerEnqueueClonedChunkToQueue\");function Nr(n,o){o.bytesFilled>0&&Ur(n,o.buffer,o.byteOffset,o.bytesFilled),Ie(n)}u(Nr,\"ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue\");function Hr(n,o){const a=Math.min(n._queueTotalSize,o.byteLength-o.bytesFilled),p=o.bytesFilled+a;let g=a,_=!1;const S=p%o.elementSize,C=p-S;C>=o.minimumFill&&(g=C-o.bytesFilled,_=!0);const q=n._queue;for(;g>0;){const P=q.peek(),k=Math.min(g,P.byteLength),O=o.byteOffset+o.bytesFilled;zr(o.buffer,O,P.buffer,P.byteOffset,k),P.byteLength===k?q.shift():(P.byteOffset+=k,P.byteLength-=k),n._queueTotalSize-=k,Vr(n,k,o),g-=k}return _}u(Hr,\"ReadableByteStreamControllerFillPullIntoDescriptorFromQueue\");function Vr(n,o,a){a.bytesFilled+=o}u(Vr,\"ReadableByteStreamControllerFillHeadPullIntoDescriptor\");function Qr(n){n._queueTotalSize===0&&n._closeRequested?(ut(n),tt(n._controlledReadableByteStream)):Ae(n)}u(Qr,\"ReadableByteStreamControllerHandleQueueDrain\");function Jt(n){n._byobRequest!==null&&(n._byobRequest._associatedReadableByteStreamController=void 0,n._byobRequest._view=null,n._byobRequest=null)}u(Jt,\"ReadableByteStreamControllerInvalidateBYOBRequest\");function Xt(n){for(;n._pendingPullIntos.length>0;){if(n._queueTotalSize===0)return;const o=n._pendingPullIntos.peek();Hr(n,o)&&(Ie(n),Kt(n._controlledReadableByteStream,o))}}u(Xt,\"ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue\");function ro(n){const o=n._controlledReadableByteStream._reader;for(;o._readRequests.length>0;){if(n._queueTotalSize===0)return;const a=o._readRequests.shift();Gr(n,a)}}u(ro,\"ReadableByteStreamControllerProcessReadRequestsUsingQueue\");function no(n,o,a,p){const g=n._controlledReadableByteStream,_=o.constructor,S=to(_),{byteOffset:C,byteLength:q}=o,P=a*S;let k;try{k=fe(o.buffer)}catch(j){p._errorSteps(j);return}const O={buffer:k,bufferByteLength:k.byteLength,byteOffset:C,byteLength:q,bytesFilled:0,minimumFill:P,elementSize:S,viewConstructor:_,readerType:\"byob\"};if(n._pendingPullIntos.length>0){n._pendingPullIntos.push(O),Xr(g,p);return}if(g._state===\"closed\"){const j=new _(O.buffer,O.byteOffset,0);p._closeSteps(j);return}if(n._queueTotalSize>0){if(Hr(n,O)){const j=xr(O);Qr(n),p._chunkSteps(j);return}if(n._closeRequested){const j=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");ee(n,j),p._errorSteps(j);return}}n._pendingPullIntos.push(O),Xr(g,p),Ae(n)}u(no,\"ReadableByteStreamControllerPullInto\");function oo(n,o){o.readerType===\"none\"&&Ie(n);const a=n._controlledReadableByteStream;if(rr(a))for(;en(a)>0;){const p=Ie(n);Kt(a,p)}}u(oo,\"ReadableByteStreamControllerRespondInClosedState\");function io(n,o,a){if(Vr(n,o,a),a.readerType===\"none\"){Nr(n,a),Xt(n);return}if(a.bytesFilled<a.minimumFill)return;Ie(n);const p=a.bytesFilled%a.elementSize;if(p>0){const g=a.byteOffset+a.bytesFilled;Ur(n,a.buffer,g-p,p)}a.bytesFilled-=p,Kt(n._controlledReadableByteStream,a),Xt(n)}u(io,\"ReadableByteStreamControllerRespondInReadableState\");function Yr(n,o){const a=n._pendingPullIntos.peek();Jt(n),n._controlledReadableByteStream._state===\"closed\"?oo(n,a):io(n,o,a),Ae(n)}u(Yr,\"ReadableByteStreamControllerRespondInternal\");function Ie(n){return n._pendingPullIntos.shift()}u(Ie,\"ReadableByteStreamControllerShiftPendingPullInto\");function ao(n){const o=n._controlledReadableByteStream;return o._state!==\"readable\"||n._closeRequested||!n._started?!1:!!(Br(o)&&ot(o)>0||rr(o)&&en(o)>0||Zr(n)>0)}u(ao,\"ReadableByteStreamControllerShouldCallPull\");function ut(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0}u(ut,\"ReadableByteStreamControllerClearAlgorithms\");function Ye(n){const o=n._controlledReadableByteStream;if(!(n._closeRequested||o._state!==\"readable\")){if(n._queueTotalSize>0){n._closeRequested=!0;return}if(n._pendingPullIntos.length>0){const a=n._pendingPullIntos.peek();if(a.bytesFilled%a.elementSize!==0){const p=new TypeError(\"Insufficient bytes to fill elements in the given buffer\");throw ee(n,p),p}}ut(n),tt(o)}}u(Ye,\"ReadableByteStreamControllerClose\");function lt(n,o){const a=n._controlledReadableByteStream;if(n._closeRequested||a._state!==\"readable\")return;const{buffer:p,byteOffset:g,byteLength:_}=o;if(ge(p))throw new TypeError(\"chunk's buffer is detached and so cannot be enqueued\");const S=fe(p);if(n._pendingPullIntos.length>0){const C=n._pendingPullIntos.peek();if(ge(C.buffer))throw new TypeError(\"The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk\");Jt(n),C.buffer=fe(C.buffer),C.readerType===\"none\"&&Nr(n,C)}if(Br(a))if(ro(n),ot(a)===0)st(n,S,g,_);else{n._pendingPullIntos.length>0&&Ie(n);const C=new Uint8Array(S,g,_);Ut(a,C,!1)}else rr(a)?(st(n,S,g,_),Xt(n)):st(n,S,g,_);Ae(n)}u(lt,\"ReadableByteStreamControllerEnqueue\");function ee(n,o){const a=n._controlledReadableByteStream;a._state===\"readable\"&&(Mr(n),_e(n),ut(n),Pn(a,o))}u(ee,\"ReadableByteStreamControllerError\");function Gr(n,o){const a=n._queue.shift();n._queueTotalSize-=a.byteLength,Qr(n);const p=new Uint8Array(a.buffer,a.byteOffset,a.byteLength);o._chunkSteps(p)}u(Gr,\"ReadableByteStreamControllerFillReadRequestFromQueue\");function er(n){if(n._byobRequest===null&&n._pendingPullIntos.length>0){const o=n._pendingPullIntos.peek(),a=new Uint8Array(o.buffer,o.byteOffset+o.bytesFilled,o.byteLength-o.bytesFilled),p=Object.create(Ee.prototype);uo(p,n,a),n._byobRequest=p}return n._byobRequest}u(er,\"ReadableByteStreamControllerGetBYOBRequest\");function Zr(n){const o=n._controlledReadableByteStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(Zr,\"ReadableByteStreamControllerGetDesiredSize\");function ft(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o!==0)throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\")}else{if(o===0)throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");if(a.bytesFilled+o>a.byteLength)throw new RangeError(\"bytesWritten out of range\")}a.buffer=fe(a.buffer),Yr(n,o)}u(ft,\"ReadableByteStreamControllerRespond\");function ct(n,o){const a=n._pendingPullIntos.peek();if(n._controlledReadableByteStream._state===\"closed\"){if(o.byteLength!==0)throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\")}else if(o.byteLength===0)throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");if(a.byteOffset+a.bytesFilled!==o.byteOffset)throw new RangeError(\"The region specified by view does not match byobRequest\");if(a.bufferByteLength!==o.buffer.byteLength)throw new RangeError(\"The buffer of view has different capacity than byobRequest\");if(a.bytesFilled+o.byteLength>a.byteLength)throw new RangeError(\"The region specified by view is larger than byobRequest\");const g=o.byteLength;a.buffer=fe(o.buffer),Yr(n,g)}u(ct,\"ReadableByteStreamControllerRespondWithNewView\");function Kr(n,o,a,p,g,_,S){o._controlledReadableByteStream=n,o._pullAgain=!1,o._pulling=!1,o._byobRequest=null,o._queue=o._queueTotalSize=void 0,_e(o),o._closeRequested=!1,o._started=!1,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,o._autoAllocateChunkSize=S,o._pendingPullIntos=new Q,n._readableStreamController=o;const C=a();E(W(C),()=>(o._started=!0,Ae(o),null),q=>(ee(o,q),null))}u(Kr,\"SetUpReadableByteStreamController\");function so(n,o,a){const p=Object.create(ce.prototype);let g,_,S;o.start!==void 0?g=u(()=>o.start(p),\"startAlgorithm\"):g=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?_=u(()=>o.pull(p),\"pullAlgorithm\"):_=u(()=>W(void 0),\"pullAlgorithm\"),o.cancel!==void 0?S=u(q=>o.cancel(q),\"cancelAlgorithm\"):S=u(()=>W(void 0),\"cancelAlgorithm\");const C=o.autoAllocateChunkSize;if(C===0)throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");Kr(n,p,g,_,S,a,C)}u(so,\"SetUpReadableByteStreamControllerFromUnderlyingSource\");function uo(n,o,a){n._associatedReadableByteStreamController=o,n._view=a}u(uo,\"SetUpReadableStreamBYOBRequest\");function tr(n){return new TypeError(`ReadableStreamBYOBRequest.prototype.${n} can only be used on a ReadableStreamBYOBRequest`)}u(tr,\"byobRequestBrandCheckException\");function Ge(n){return new TypeError(`ReadableByteStreamController.prototype.${n} can only be used on a ReadableByteStreamController`)}u(Ge,\"byteStreamControllerBrandCheckException\");function lo(n,o){ie(n,o);const a=n?.mode;return{mode:a===void 0?void 0:fo(a,`${o} has member 'mode' that`)}}u(lo,\"convertReaderOptions\");function fo(n,o){if(n=`${n}`,n!==\"byob\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamReaderMode`);return n}u(fo,\"convertReadableStreamReaderMode\");function co(n,o){var a;ie(n,o);const p=(a=n?.min)!==null&&a!==void 0?a:1;return{min:Mt(p,`${o} has member 'min' that`)}}u(co,\"convertByobReadOptions\");function Jr(n){return new Se(n)}u(Jr,\"AcquireReadableStreamBYOBReader\");function Xr(n,o){n._reader._readIntoRequests.push(o)}u(Xr,\"ReadableStreamAddReadIntoRequest\");function ho(n,o,a){const g=n._reader._readIntoRequests.shift();a?g._closeSteps(o):g._chunkSteps(o)}u(ho,\"ReadableStreamFulfillReadIntoRequest\");function en(n){return n._reader._readIntoRequests.length}u(en,\"ReadableStreamGetNumReadIntoRequests\");function rr(n){const o=n._reader;return!(o===void 0||!Be(o))}u(rr,\"ReadableStreamHasBYOBReader\");class Se{static{u(this,\"ReadableStreamBYOBReader\")}constructor(o){if(le(o,1,\"ReadableStreamBYOBReader\"),xt(o,\"First parameter\"),Te(o))throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");if(!ve(o._readableStreamController))throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");Rr(this,o),this._readIntoRequests=new Q}get closed(){return Be(this)?this._closedPromise:T(dt(\"closed\"))}cancel(o=void 0){return Be(this)?this._ownerReadableStream===void 0?T(nt(\"cancel\")):zt(this,o):T(dt(\"cancel\"))}read(o,a={}){if(!Be(this))return T(dt(\"read\"));if(!ArrayBuffer.isView(o))return T(new TypeError(\"view must be an array buffer view\"));if(o.byteLength===0)return T(new TypeError(\"view must have non-zero byteLength\"));if(o.buffer.byteLength===0)return T(new TypeError(\"view's buffer must have non-zero byteLength\"));if(ge(o.buffer))return T(new TypeError(\"view's buffer has been detached\"));let p;try{p=co(a,\"options\")}catch(P){return T(P)}const g=p.min;if(g===0)return T(new TypeError(\"options.min must be greater than 0\"));if(eo(o)){if(g>o.byteLength)return T(new RangeError(\"options.min must be less than or equal to view's byteLength\"))}else if(g>o.length)return T(new RangeError(\"options.min must be less than or equal to view's length\"));if(this._ownerReadableStream===void 0)return T(nt(\"read from\"));let _,S;const C=z((P,k)=>{_=P,S=k});return tn(this,o,g,{_chunkSteps:u(P=>_({value:P,done:!1}),\"_chunkSteps\"),_closeSteps:u(P=>_({value:P,done:!0}),\"_closeSteps\"),_errorSteps:u(P=>S(P),\"_errorSteps\")}),C}releaseLock(){if(!Be(this))throw dt(\"releaseLock\");this._ownerReadableStream!==void 0&&po(this)}}Object.defineProperties(Se.prototype,{cancel:{enumerable:!0},read:{enumerable:!0},releaseLock:{enumerable:!0},closed:{enumerable:!0}}),w(Se.prototype.cancel,\"cancel\"),w(Se.prototype.read,\"read\"),w(Se.prototype.releaseLock,\"releaseLock\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Se.prototype,Symbol.toStringTag,{value:\"ReadableStreamBYOBReader\",configurable:!0});function Be(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readIntoRequests\")?!1:n instanceof Se}u(Be,\"IsReadableStreamBYOBReader\");function tn(n,o,a,p){const g=n._ownerReadableStream;g._disturbed=!0,g._state===\"errored\"?p._errorSteps(g._storedError):no(g._readableStreamController,o,a,p)}u(tn,\"ReadableStreamBYOBReaderRead\");function po(n){ue(n);const o=new TypeError(\"Reader was released\");rn(n,o)}u(po,\"ReadableStreamBYOBReaderRelease\");function rn(n,o){const a=n._readIntoRequests;n._readIntoRequests=new Q,a.forEach(p=>{p._errorSteps(o)})}u(rn,\"ReadableStreamBYOBReaderErrorReadIntoRequests\");function dt(n){return new TypeError(`ReadableStreamBYOBReader.prototype.${n} can only be used on a ReadableStreamBYOBReader`)}u(dt,\"byobReaderBrandCheckException\");function Ze(n,o){const{highWaterMark:a}=n;if(a===void 0)return o;if(Ir(a)||a<0)throw new RangeError(\"Invalid highWaterMark\");return a}u(Ze,\"ExtractHighWaterMark\");function ht(n){const{size:o}=n;return o||(()=>1)}u(ht,\"ExtractSizeAlgorithm\");function pt(n,o){ie(n,o);const a=n?.highWaterMark,p=n?.size;return{highWaterMark:a===void 0?void 0:$t(a),size:p===void 0?void 0:bo(p,`${o} has member 'size' that`)}}u(pt,\"convertQueuingStrategy\");function bo(n,o){return X(n,o),a=>$t(n(a))}u(bo,\"convertQueuingStrategySize\");function mo(n,o){ie(n,o);const a=n?.abort,p=n?.close,g=n?.start,_=n?.type,S=n?.write;return{abort:a===void 0?void 0:yo(a,n,`${o} has member 'abort' that`),close:p===void 0?void 0:go(p,n,`${o} has member 'close' that`),start:g===void 0?void 0:_o(g,n,`${o} has member 'start' that`),write:S===void 0?void 0:So(S,n,`${o} has member 'write' that`),type:_}}u(mo,\"convertUnderlyingSink\");function yo(n,o,a){return X(n,a),p=>N(n,o,[p])}u(yo,\"convertUnderlyingSinkAbortCallback\");function go(n,o,a){return X(n,a),()=>N(n,o,[])}u(go,\"convertUnderlyingSinkCloseCallback\");function _o(n,o,a){return X(n,a),p=>$(n,o,[p])}u(_o,\"convertUnderlyingSinkStartCallback\");function So(n,o,a){return X(n,a),(p,g)=>N(n,o,[p,g])}u(So,\"convertUnderlyingSinkWriteCallback\");function nn(n,o){if(!ze(n))throw new TypeError(`${o} is not a WritableStream.`)}u(nn,\"assertWritableStream\");function wo(n){if(typeof n!=\"object\"||n===null)return!1;try{return typeof n.aborted==\"boolean\"}catch{return!1}}u(wo,\"isAbortSignal\");const Ro=typeof AbortController==\"function\";function To(){if(Ro)return new AbortController}u(To,\"createAbortController\");class we{static{u(this,\"WritableStream\")}constructor(o={},a={}){o===void 0?o=null:Er(o,\"First parameter\");const p=pt(a,\"Second parameter\"),g=mo(o,\"First parameter\");if(an(this),g.type!==void 0)throw new RangeError(\"Invalid type is specified\");const S=ht(p),C=Ze(p,1);jo(this,g,C,S)}get locked(){if(!ze(this))throw _t(\"locked\");return je(this)}abort(o=void 0){return ze(this)?je(this)?T(new TypeError(\"Cannot abort a stream that already has a writer\")):bt(this,o):T(_t(\"abort\"))}close(){return ze(this)?je(this)?T(new TypeError(\"Cannot close a stream that already has a writer\")):ae(this)?T(new TypeError(\"Cannot close an already-closing stream\")):sn(this):T(_t(\"close\"))}getWriter(){if(!ze(this))throw _t(\"getWriter\");return on(this)}}Object.defineProperties(we.prototype,{abort:{enumerable:!0},close:{enumerable:!0},getWriter:{enumerable:!0},locked:{enumerable:!0}}),w(we.prototype.abort,\"abort\"),w(we.prototype.close,\"close\"),w(we.prototype.getWriter,\"getWriter\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(we.prototype,Symbol.toStringTag,{value:\"WritableStream\",configurable:!0});function on(n){return new de(n)}u(on,\"AcquireWritableStreamDefaultWriter\");function Co(n,o,a,p,g=1,_=()=>1){const S=Object.create(we.prototype);an(S);const C=Object.create(Le.prototype);return hn(S,C,n,o,a,p,g,_),S}u(Co,\"CreateWritableStream\");function an(n){n._state=\"writable\",n._storedError=void 0,n._writer=void 0,n._writableStreamController=void 0,n._writeRequests=new Q,n._inFlightWriteRequest=void 0,n._closeRequest=void 0,n._inFlightCloseRequest=void 0,n._pendingAbortRequest=void 0,n._backpressure=!1}u(an,\"InitializeWritableStream\");function ze(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_writableStreamController\")?!1:n instanceof we}u(ze,\"IsWritableStream\");function je(n){return n._writer!==void 0}u(je,\"IsWritableStreamLocked\");function bt(n,o){var a;if(n._state===\"closed\"||n._state===\"errored\")return W(void 0);n._writableStreamController._abortReason=o,(a=n._writableStreamController._abortController)===null||a===void 0||a.abort(o);const p=n._state;if(p===\"closed\"||p===\"errored\")return W(void 0);if(n._pendingAbortRequest!==void 0)return n._pendingAbortRequest._promise;let g=!1;p===\"erroring\"&&(g=!0,o=void 0);const _=z((S,C)=>{n._pendingAbortRequest={_promise:void 0,_resolve:S,_reject:C,_reason:o,_wasAlreadyErroring:g}});return n._pendingAbortRequest._promise=_,g||or(n,o),_}u(bt,\"WritableStreamAbort\");function sn(n){const o=n._state;if(o===\"closed\"||o===\"errored\")return T(new TypeError(`The stream (in ${o} state) is not in the writable state and cannot be closed`));const a=z((g,_)=>{const S={_resolve:g,_reject:_};n._closeRequest=S}),p=n._writer;return p!==void 0&&n._backpressure&&o===\"writable\"&&dr(p),Lo(n._writableStreamController),a}u(sn,\"WritableStreamClose\");function Po(n){return z((a,p)=>{const g={_resolve:a,_reject:p};n._writeRequests.push(g)})}u(Po,\"WritableStreamAddWriteRequest\");function nr(n,o){if(n._state===\"writable\"){or(n,o);return}ir(n)}u(nr,\"WritableStreamDealWithRejection\");function or(n,o){const a=n._writableStreamController;n._state=\"erroring\",n._storedError=o;const p=n._writer;p!==void 0&&ln(p,o),!qo(n)&&a._started&&ir(n)}u(or,\"WritableStreamStartErroring\");function ir(n){n._state=\"errored\",n._writableStreamController[wr]();const o=n._storedError;if(n._writeRequests.forEach(g=>{g._reject(o)}),n._writeRequests=new Q,n._pendingAbortRequest===void 0){mt(n);return}const a=n._pendingAbortRequest;if(n._pendingAbortRequest=void 0,a._wasAlreadyErroring){a._reject(o),mt(n);return}const p=n._writableStreamController[rt](a._reason);E(p,()=>(a._resolve(),mt(n),null),g=>(a._reject(g),mt(n),null))}u(ir,\"WritableStreamFinishErroring\");function Eo(n){n._inFlightWriteRequest._resolve(void 0),n._inFlightWriteRequest=void 0}u(Eo,\"WritableStreamFinishInFlightWrite\");function vo(n,o){n._inFlightWriteRequest._reject(o),n._inFlightWriteRequest=void 0,nr(n,o)}u(vo,\"WritableStreamFinishInFlightWriteWithError\");function Ao(n){n._inFlightCloseRequest._resolve(void 0),n._inFlightCloseRequest=void 0,n._state===\"erroring\"&&(n._storedError=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._resolve(),n._pendingAbortRequest=void 0)),n._state=\"closed\";const a=n._writer;a!==void 0&&yn(a)}u(Ao,\"WritableStreamFinishInFlightClose\");function Bo(n,o){n._inFlightCloseRequest._reject(o),n._inFlightCloseRequest=void 0,n._pendingAbortRequest!==void 0&&(n._pendingAbortRequest._reject(o),n._pendingAbortRequest=void 0),nr(n,o)}u(Bo,\"WritableStreamFinishInFlightCloseWithError\");function ae(n){return!(n._closeRequest===void 0&&n._inFlightCloseRequest===void 0)}u(ae,\"WritableStreamCloseQueuedOrInFlight\");function qo(n){return!(n._inFlightWriteRequest===void 0&&n._inFlightCloseRequest===void 0)}u(qo,\"WritableStreamHasOperationMarkedInFlight\");function Wo(n){n._inFlightCloseRequest=n._closeRequest,n._closeRequest=void 0}u(Wo,\"WritableStreamMarkCloseRequestInFlight\");function ko(n){n._inFlightWriteRequest=n._writeRequests.shift()}u(ko,\"WritableStreamMarkFirstWriteRequestInFlight\");function mt(n){n._closeRequest!==void 0&&(n._closeRequest._reject(n._storedError),n._closeRequest=void 0);const o=n._writer;o!==void 0&&fr(o,n._storedError)}u(mt,\"WritableStreamRejectCloseAndClosedPromiseIfNeeded\");function ar(n,o){const a=n._writer;a!==void 0&&o!==n._backpressure&&(o?Ho(a):dr(a)),n._backpressure=o}u(ar,\"WritableStreamUpdateBackpressure\");class de{static{u(this,\"WritableStreamDefaultWriter\")}constructor(o){if(le(o,1,\"WritableStreamDefaultWriter\"),nn(o,\"First parameter\"),je(o))throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");this._ownerWritableStream=o,o._writer=this;const a=o._state;if(a===\"writable\")!ae(o)&&o._backpressure?wt(this):gn(this),St(this);else if(a===\"erroring\")cr(this,o._storedError),St(this);else if(a===\"closed\")gn(this),Uo(this);else{const p=o._storedError;cr(this,p),mn(this,p)}}get closed(){return qe(this)?this._closedPromise:T(We(\"closed\"))}get desiredSize(){if(!qe(this))throw We(\"desiredSize\");if(this._ownerWritableStream===void 0)throw Je(\"desiredSize\");return zo(this)}get ready(){return qe(this)?this._readyPromise:T(We(\"ready\"))}abort(o=void 0){return qe(this)?this._ownerWritableStream===void 0?T(Je(\"abort\")):Oo(this,o):T(We(\"abort\"))}close(){if(!qe(this))return T(We(\"close\"));const o=this._ownerWritableStream;return o===void 0?T(Je(\"close\")):ae(o)?T(new TypeError(\"Cannot close an already-closing stream\")):un(this)}releaseLock(){if(!qe(this))throw We(\"releaseLock\");this._ownerWritableStream!==void 0&&fn(this)}write(o=void 0){return qe(this)?this._ownerWritableStream===void 0?T(Je(\"write to\")):cn(this,o):T(We(\"write\"))}}Object.defineProperties(de.prototype,{abort:{enumerable:!0},close:{enumerable:!0},releaseLock:{enumerable:!0},write:{enumerable:!0},closed:{enumerable:!0},desiredSize:{enumerable:!0},ready:{enumerable:!0}}),w(de.prototype.abort,\"abort\"),w(de.prototype.close,\"close\"),w(de.prototype.releaseLock,\"releaseLock\"),w(de.prototype.write,\"write\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(de.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultWriter\",configurable:!0});function qe(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_ownerWritableStream\")?!1:n instanceof de}u(qe,\"IsWritableStreamDefaultWriter\");function Oo(n,o){const a=n._ownerWritableStream;return bt(a,o)}u(Oo,\"WritableStreamDefaultWriterAbort\");function un(n){const o=n._ownerWritableStream;return sn(o)}u(un,\"WritableStreamDefaultWriterClose\");function Fo(n){const o=n._ownerWritableStream,a=o._state;return ae(o)||a===\"closed\"?W(void 0):a===\"errored\"?T(o._storedError):un(n)}u(Fo,\"WritableStreamDefaultWriterCloseWithErrorPropagation\");function Io(n,o){n._closedPromiseState===\"pending\"?fr(n,o):No(n,o)}u(Io,\"WritableStreamDefaultWriterEnsureClosedPromiseRejected\");function ln(n,o){n._readyPromiseState===\"pending\"?_n(n,o):Vo(n,o)}u(ln,\"WritableStreamDefaultWriterEnsureReadyPromiseRejected\");function zo(n){const o=n._ownerWritableStream,a=o._state;return a===\"errored\"||a===\"erroring\"?null:a===\"closed\"?0:pn(o._writableStreamController)}u(zo,\"WritableStreamDefaultWriterGetDesiredSize\");function fn(n){const o=n._ownerWritableStream,a=new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");ln(n,a),Io(n,a),o._writer=void 0,n._ownerWritableStream=void 0}u(fn,\"WritableStreamDefaultWriterRelease\");function cn(n,o){const a=n._ownerWritableStream,p=a._writableStreamController,g=Do(p,o);if(a!==n._ownerWritableStream)return T(Je(\"write to\"));const _=a._state;if(_===\"errored\")return T(a._storedError);if(ae(a)||_===\"closed\")return T(new TypeError(\"The stream is closing or closed and cannot be written to\"));if(_===\"erroring\")return T(a._storedError);const S=Po(a);return $o(p,o,g),S}u(cn,\"WritableStreamDefaultWriterWrite\");const dn={};class Le{static{u(this,\"WritableStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get abortReason(){if(!sr(this))throw lr(\"abortReason\");return this._abortReason}get signal(){if(!sr(this))throw lr(\"signal\");if(this._abortController===void 0)throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");return this._abortController.signal}error(o=void 0){if(!sr(this))throw lr(\"error\");this._controlledWritableStream._state===\"writable\"&&bn(this,o)}[rt](o){const a=this._abortAlgorithm(o);return yt(this),a}[wr](){_e(this)}}Object.defineProperties(Le.prototype,{abortReason:{enumerable:!0},signal:{enumerable:!0},error:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Le.prototype,Symbol.toStringTag,{value:\"WritableStreamDefaultController\",configurable:!0});function sr(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledWritableStream\")?!1:n instanceof Le}u(sr,\"IsWritableStreamDefaultController\");function hn(n,o,a,p,g,_,S,C){o._controlledWritableStream=n,n._writableStreamController=o,o._queue=void 0,o._queueTotalSize=void 0,_e(o),o._abortReason=void 0,o._abortController=To(),o._started=!1,o._strategySizeAlgorithm=C,o._strategyHWM=S,o._writeAlgorithm=p,o._closeAlgorithm=g,o._abortAlgorithm=_;const q=ur(o);ar(n,q);const P=a(),k=W(P);E(k,()=>(o._started=!0,gt(o),null),O=>(o._started=!0,nr(n,O),null))}u(hn,\"SetUpWritableStreamDefaultController\");function jo(n,o,a,p){const g=Object.create(Le.prototype);let _,S,C,q;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.write!==void 0?S=u(P=>o.write(P,g),\"writeAlgorithm\"):S=u(()=>W(void 0),\"writeAlgorithm\"),o.close!==void 0?C=u(()=>o.close(),\"closeAlgorithm\"):C=u(()=>W(void 0),\"closeAlgorithm\"),o.abort!==void 0?q=u(P=>o.abort(P),\"abortAlgorithm\"):q=u(()=>W(void 0),\"abortAlgorithm\"),hn(n,g,_,S,C,q,a,p)}u(jo,\"SetUpWritableStreamDefaultControllerFromUnderlyingSink\");function yt(n){n._writeAlgorithm=void 0,n._closeAlgorithm=void 0,n._abortAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(yt,\"WritableStreamDefaultControllerClearAlgorithms\");function Lo(n){Gt(n,dn,0),gt(n)}u(Lo,\"WritableStreamDefaultControllerClose\");function Do(n,o){try{return n._strategySizeAlgorithm(o)}catch(a){return Ke(n,a),1}}u(Do,\"WritableStreamDefaultControllerGetChunkSize\");function pn(n){return n._strategyHWM-n._queueTotalSize}u(pn,\"WritableStreamDefaultControllerGetDesiredSize\");function $o(n,o,a){try{Gt(n,o,a)}catch(g){Ke(n,g);return}const p=n._controlledWritableStream;if(!ae(p)&&p._state===\"writable\"){const g=ur(n);ar(p,g)}gt(n)}u($o,\"WritableStreamDefaultControllerWrite\");function gt(n){const o=n._controlledWritableStream;if(!n._started||o._inFlightWriteRequest!==void 0)return;if(o._state===\"erroring\"){ir(o);return}if(n._queue.length===0)return;const p=Xn(n);p===dn?Mo(n):xo(n,p)}u(gt,\"WritableStreamDefaultControllerAdvanceQueueIfNeeded\");function Ke(n,o){n._controlledWritableStream._state===\"writable\"&&bn(n,o)}u(Ke,\"WritableStreamDefaultControllerErrorIfNeeded\");function Mo(n){const o=n._controlledWritableStream;Wo(o),Yt(n);const a=n._closeAlgorithm();yt(n),E(a,()=>(Ao(o),null),p=>(Bo(o,p),null))}u(Mo,\"WritableStreamDefaultControllerProcessClose\");function xo(n,o){const a=n._controlledWritableStream;ko(a);const p=n._writeAlgorithm(o);E(p,()=>{Eo(a);const g=a._state;if(Yt(n),!ae(a)&&g===\"writable\"){const _=ur(n);ar(a,_)}return gt(n),null},g=>(a._state===\"writable\"&&yt(n),vo(a,g),null))}u(xo,\"WritableStreamDefaultControllerProcessWrite\");function ur(n){return pn(n)<=0}u(ur,\"WritableStreamDefaultControllerGetBackpressure\");function bn(n,o){const a=n._controlledWritableStream;yt(n),or(a,o)}u(bn,\"WritableStreamDefaultControllerError\");function _t(n){return new TypeError(`WritableStream.prototype.${n} can only be used on a WritableStream`)}u(_t,\"streamBrandCheckException$2\");function lr(n){return new TypeError(`WritableStreamDefaultController.prototype.${n} can only be used on a WritableStreamDefaultController`)}u(lr,\"defaultControllerBrandCheckException$2\");function We(n){return new TypeError(`WritableStreamDefaultWriter.prototype.${n} can only be used on a WritableStreamDefaultWriter`)}u(We,\"defaultWriterBrandCheckException\");function Je(n){return new TypeError(\"Cannot \"+n+\" a stream using a released writer\")}u(Je,\"defaultWriterLockException\");function St(n){n._closedPromise=z((o,a)=>{n._closedPromise_resolve=o,n._closedPromise_reject=a,n._closedPromiseState=\"pending\"})}u(St,\"defaultWriterClosedPromiseInitialize\");function mn(n,o){St(n),fr(n,o)}u(mn,\"defaultWriterClosedPromiseInitializeAsRejected\");function Uo(n){St(n),yn(n)}u(Uo,\"defaultWriterClosedPromiseInitializeAsResolved\");function fr(n,o){n._closedPromise_reject!==void 0&&(K(n._closedPromise),n._closedPromise_reject(o),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"rejected\")}u(fr,\"defaultWriterClosedPromiseReject\");function No(n,o){mn(n,o)}u(No,\"defaultWriterClosedPromiseResetToRejected\");function yn(n){n._closedPromise_resolve!==void 0&&(n._closedPromise_resolve(void 0),n._closedPromise_resolve=void 0,n._closedPromise_reject=void 0,n._closedPromiseState=\"resolved\")}u(yn,\"defaultWriterClosedPromiseResolve\");function wt(n){n._readyPromise=z((o,a)=>{n._readyPromise_resolve=o,n._readyPromise_reject=a}),n._readyPromiseState=\"pending\"}u(wt,\"defaultWriterReadyPromiseInitialize\");function cr(n,o){wt(n),_n(n,o)}u(cr,\"defaultWriterReadyPromiseInitializeAsRejected\");function gn(n){wt(n),dr(n)}u(gn,\"defaultWriterReadyPromiseInitializeAsResolved\");function _n(n,o){n._readyPromise_reject!==void 0&&(K(n._readyPromise),n._readyPromise_reject(o),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"rejected\")}u(_n,\"defaultWriterReadyPromiseReject\");function Ho(n){wt(n)}u(Ho,\"defaultWriterReadyPromiseReset\");function Vo(n,o){cr(n,o)}u(Vo,\"defaultWriterReadyPromiseResetToRejected\");function dr(n){n._readyPromise_resolve!==void 0&&(n._readyPromise_resolve(void 0),n._readyPromise_resolve=void 0,n._readyPromise_reject=void 0,n._readyPromiseState=\"fulfilled\")}u(dr,\"defaultWriterReadyPromiseResolve\");function Qo(){if(typeof globalThis<\"u\")return globalThis;if(typeof self<\"u\")return self;if(typeof _commonjsHelpers.commonjsGlobal<\"u\")return _commonjsHelpers.commonjsGlobal}u(Qo,\"getGlobals\");const hr=Qo();function Yo(n){if(!(typeof n==\"function\"||typeof n==\"object\")||n.name!==\"DOMException\")return!1;try{return new n,!0}catch{return!1}}u(Yo,\"isDOMExceptionConstructor\");function Go(){const n=hr?.DOMException;return Yo(n)?n:void 0}u(Go,\"getFromGlobal\");function Zo(){const n=u(function(a,p){this.message=a||\"\",this.name=p||\"Error\",Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)},\"DOMException\");return w(n,\"DOMException\"),n.prototype=Object.create(Error.prototype),Object.defineProperty(n.prototype,\"constructor\",{value:n,writable:!0,configurable:!0}),n}u(Zo,\"createPolyfill\");const Ko=Go()||Zo();function Sn(n,o,a,p,g,_){const S=Fe(n),C=on(o);n._disturbed=!0;let q=!1,P=W(void 0);return z((k,O)=>{let j;if(_!==void 0){if(j=u(()=>{const v=_.reason!==void 0?_.reason:new Ko(\"Aborted\",\"AbortError\"),I=[];p||I.push(()=>o._state===\"writable\"?bt(o,v):W(void 0)),g||I.push(()=>n._state===\"readable\"?ne(n,v):W(void 0)),G(()=>Promise.all(I.map(L=>L())),!0,v)},\"abortAlgorithm\"),_.aborted){j();return}_.addEventListener(\"abort\",j)}function oe(){return z((v,I)=>{function L(J){J?v():D(xe(),L,I)}u(L,\"next\"),L(!1)})}u(oe,\"pipeLoop\");function xe(){return q?W(!0):D(C._readyPromise,()=>z((v,I)=>{Ve(S,{_chunkSteps:u(L=>{P=D(cn(C,L),void 0,y),v(!1)},\"_chunkSteps\"),_closeSteps:u(()=>v(!0),\"_closeSteps\"),_errorSteps:I})}))}if(u(xe,\"pipeStep\"),pe(n,S._closedPromise,v=>(p?te(!0,v):G(()=>bt(o,v),!0,v),null)),pe(o,C._closedPromise,v=>(g?te(!0,v):G(()=>ne(n,v),!0,v),null)),Y(n,S._closedPromise,()=>(a?te():G(()=>Fo(C)),null)),ae(o)||o._state===\"closed\"){const v=new TypeError(\"the destination writable stream closed before all data could be piped to it\");g?te(!0,v):G(()=>ne(n,v),!0,v)}K(oe());function Pe(){const v=P;return D(P,()=>v!==P?Pe():void 0)}u(Pe,\"waitForWritesToFinish\");function pe(v,I,L){v._state===\"errored\"?L(v._storedError):M(I,L)}u(pe,\"isOrBecomesErrored\");function Y(v,I,L){v._state===\"closed\"?L():Z(I,L)}u(Y,\"isOrBecomesClosed\");function G(v,I,L){if(q)return;q=!0,o._state===\"writable\"&&!ae(o)?Z(Pe(),J):J();function J(){return E(v(),()=>be(I,L),Ue=>be(!0,Ue)),null}u(J,\"doTheRest\")}u(G,\"shutdownWithAction\");function te(v,I){q||(q=!0,o._state===\"writable\"&&!ae(o)?Z(Pe(),()=>be(v,I)):be(v,I))}u(te,\"shutdown\");function be(v,I){return fn(C),ue(S),_!==void 0&&_.removeEventListener(\"abort\",j),v?O(I):k(void 0),null}u(be,\"finalize\")})}u(Sn,\"ReadableStreamPipeTo\");class he{static{u(this,\"ReadableStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Rt(this))throw Ct(\"desiredSize\");return pr(this)}close(){if(!Rt(this))throw Ct(\"close\");if(!$e(this))throw new TypeError(\"The stream is not in a state that permits close\");ke(this)}enqueue(o=void 0){if(!Rt(this))throw Ct(\"enqueue\");if(!$e(this))throw new TypeError(\"The stream is not in a state that permits enqueue\");return De(this,o)}error(o=void 0){if(!Rt(this))throw Ct(\"error\");re(this,o)}[Ot](o){_e(this);const a=this._cancelAlgorithm(o);return Tt(this),a}[Ft](o){const a=this._controlledReadableStream;if(this._queue.length>0){const p=Yt(this);this._closeRequested&&this._queue.length===0?(Tt(this),tt(a)):Xe(this),o._chunkSteps(p)}else Ar(a,o),Xe(this)}[It](){}}Object.defineProperties(he.prototype,{close:{enumerable:!0},enqueue:{enumerable:!0},error:{enumerable:!0},desiredSize:{enumerable:!0}}),w(he.prototype.close,\"close\"),w(he.prototype.enqueue,\"enqueue\"),w(he.prototype.error,\"error\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(he.prototype,Symbol.toStringTag,{value:\"ReadableStreamDefaultController\",configurable:!0});function Rt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledReadableStream\")?!1:n instanceof he}u(Rt,\"IsReadableStreamDefaultController\");function Xe(n){if(!wn(n))return;if(n._pulling){n._pullAgain=!0;return}n._pulling=!0;const a=n._pullAlgorithm();E(a,()=>(n._pulling=!1,n._pullAgain&&(n._pullAgain=!1,Xe(n)),null),p=>(re(n,p),null))}u(Xe,\"ReadableStreamDefaultControllerCallPullIfNeeded\");function wn(n){const o=n._controlledReadableStream;return!$e(n)||!n._started?!1:!!(Te(o)&&ot(o)>0||pr(n)>0)}u(wn,\"ReadableStreamDefaultControllerShouldCallPull\");function Tt(n){n._pullAlgorithm=void 0,n._cancelAlgorithm=void 0,n._strategySizeAlgorithm=void 0}u(Tt,\"ReadableStreamDefaultControllerClearAlgorithms\");function ke(n){if(!$e(n))return;const o=n._controlledReadableStream;n._closeRequested=!0,n._queue.length===0&&(Tt(n),tt(o))}u(ke,\"ReadableStreamDefaultControllerClose\");function De(n,o){if(!$e(n))return;const a=n._controlledReadableStream;if(Te(a)&&ot(a)>0)Ut(a,o,!1);else{let p;try{p=n._strategySizeAlgorithm(o)}catch(g){throw re(n,g),g}try{Gt(n,o,p)}catch(g){throw re(n,g),g}}Xe(n)}u(De,\"ReadableStreamDefaultControllerEnqueue\");function re(n,o){const a=n._controlledReadableStream;a._state===\"readable\"&&(_e(n),Tt(n),Pn(a,o))}u(re,\"ReadableStreamDefaultControllerError\");function pr(n){const o=n._controlledReadableStream._state;return o===\"errored\"?null:o===\"closed\"?0:n._strategyHWM-n._queueTotalSize}u(pr,\"ReadableStreamDefaultControllerGetDesiredSize\");function Jo(n){return!wn(n)}u(Jo,\"ReadableStreamDefaultControllerHasBackpressure\");function $e(n){const o=n._controlledReadableStream._state;return!n._closeRequested&&o===\"readable\"}u($e,\"ReadableStreamDefaultControllerCanCloseOrEnqueue\");function Rn(n,o,a,p,g,_,S){o._controlledReadableStream=n,o._queue=void 0,o._queueTotalSize=void 0,_e(o),o._started=!1,o._closeRequested=!1,o._pullAgain=!1,o._pulling=!1,o._strategySizeAlgorithm=S,o._strategyHWM=_,o._pullAlgorithm=p,o._cancelAlgorithm=g,n._readableStreamController=o;const C=a();E(W(C),()=>(o._started=!0,Xe(o),null),q=>(re(o,q),null))}u(Rn,\"SetUpReadableStreamDefaultController\");function Xo(n,o,a,p){const g=Object.create(he.prototype);let _,S,C;o.start!==void 0?_=u(()=>o.start(g),\"startAlgorithm\"):_=u(()=>{},\"startAlgorithm\"),o.pull!==void 0?S=u(()=>o.pull(g),\"pullAlgorithm\"):S=u(()=>W(void 0),\"pullAlgorithm\"),o.cancel!==void 0?C=u(q=>o.cancel(q),\"cancelAlgorithm\"):C=u(()=>W(void 0),\"cancelAlgorithm\"),Rn(n,g,_,S,C,a,p)}u(Xo,\"SetUpReadableStreamDefaultControllerFromUnderlyingSource\");function Ct(n){return new TypeError(`ReadableStreamDefaultController.prototype.${n} can only be used on a ReadableStreamDefaultController`)}u(Ct,\"defaultControllerBrandCheckException$1\");function ei(n,o){return ve(n._readableStreamController)?ri(n):ti(n)}u(ei,\"ReadableStreamTee\");function ti(n,o){const a=Fe(n);let p=!1,g=!1,_=!1,S=!1,C,q,P,k,O;const j=z(Y=>{O=Y});function oe(){return p?(g=!0,W(void 0)):(p=!0,Ve(a,{_chunkSteps:u(G=>{se(()=>{g=!1;const te=G,be=G;_||De(P._readableStreamController,te),S||De(k._readableStreamController,be),p=!1,g&&oe()})},\"_chunkSteps\"),_closeSteps:u(()=>{p=!1,_||ke(P._readableStreamController),S||ke(k._readableStreamController),(!_||!S)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{p=!1},\"_errorSteps\")}),W(void 0))}u(oe,\"pullAlgorithm\");function xe(Y){if(_=!0,C=Y,S){const G=Qe([C,q]),te=ne(n,G);O(te)}return j}u(xe,\"cancel1Algorithm\");function Pe(Y){if(S=!0,q=Y,_){const G=Qe([C,q]),te=ne(n,G);O(te)}return j}u(Pe,\"cancel2Algorithm\");function pe(){}return u(pe,\"startAlgorithm\"),P=et(pe,oe,xe),k=et(pe,oe,Pe),M(a._closedPromise,Y=>(re(P._readableStreamController,Y),re(k._readableStreamController,Y),(!_||!S)&&O(void 0),null)),[P,k]}u(ti,\"ReadableStreamDefaultTee\");function ri(n){let o=Fe(n),a=!1,p=!1,g=!1,_=!1,S=!1,C,q,P,k,O;const j=z(v=>{O=v});function oe(v){M(v._closedPromise,I=>(v!==o||(ee(P._readableStreamController,I),ee(k._readableStreamController,I),(!_||!S)&&O(void 0)),null))}u(oe,\"forwardReaderError\");function xe(){Be(o)&&(ue(o),o=Fe(n),oe(o)),Ve(o,{_chunkSteps:u(I=>{se(()=>{p=!1,g=!1;const L=I;let J=I;if(!_&&!S)try{J=Dr(I)}catch(Ue){ee(P._readableStreamController,Ue),ee(k._readableStreamController,Ue),O(ne(n,Ue));return}_||lt(P._readableStreamController,L),S||lt(k._readableStreamController,J),a=!1,p?pe():g&&Y()})},\"_chunkSteps\"),_closeSteps:u(()=>{a=!1,_||Ye(P._readableStreamController),S||Ye(k._readableStreamController),P._readableStreamController._pendingPullIntos.length>0&&ft(P._readableStreamController,0),k._readableStreamController._pendingPullIntos.length>0&&ft(k._readableStreamController,0),(!_||!S)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{a=!1},\"_errorSteps\")})}u(xe,\"pullWithDefaultReader\");function Pe(v,I){ye(o)&&(ue(o),o=Jr(n),oe(o));const L=I?k:P,J=I?P:k;tn(o,v,1,{_chunkSteps:u(Ne=>{se(()=>{p=!1,g=!1;const He=I?S:_;if(I?_:S)He||ct(L._readableStreamController,Ne);else{let Ln;try{Ln=Dr(Ne)}catch(_r){ee(L._readableStreamController,_r),ee(J._readableStreamController,_r),O(ne(n,_r));return}He||ct(L._readableStreamController,Ne),lt(J._readableStreamController,Ln)}a=!1,p?pe():g&&Y()})},\"_chunkSteps\"),_closeSteps:u(Ne=>{a=!1;const He=I?S:_,kt=I?_:S;He||Ye(L._readableStreamController),kt||Ye(J._readableStreamController),Ne!==void 0&&(He||ct(L._readableStreamController,Ne),!kt&&J._readableStreamController._pendingPullIntos.length>0&&ft(J._readableStreamController,0)),(!He||!kt)&&O(void 0)},\"_closeSteps\"),_errorSteps:u(()=>{a=!1},\"_errorSteps\")})}u(Pe,\"pullWithBYOBReader\");function pe(){if(a)return p=!0,W(void 0);a=!0;const v=er(P._readableStreamController);return v===null?xe():Pe(v._view,!1),W(void 0)}u(pe,\"pull1Algorithm\");function Y(){if(a)return g=!0,W(void 0);a=!0;const v=er(k._readableStreamController);return v===null?xe():Pe(v._view,!0),W(void 0)}u(Y,\"pull2Algorithm\");function G(v){if(_=!0,C=v,S){const I=Qe([C,q]),L=ne(n,I);O(L)}return j}u(G,\"cancel1Algorithm\");function te(v){if(S=!0,q=v,_){const I=Qe([C,q]),L=ne(n,I);O(L)}return j}u(te,\"cancel2Algorithm\");function be(){}return u(be,\"startAlgorithm\"),P=Cn(be,pe,G),k=Cn(be,Y,te),oe(o),[P,k]}u(ri,\"ReadableByteStreamTee\");function ni(n){return b(n)&&typeof n.getReader<\"u\"}u(ni,\"isReadableStreamLike\");function oi(n){return ni(n)?ai(n.getReader()):ii(n)}u(oi,\"ReadableStreamFrom\");function ii(n){let o;const a=Lr(n,\"async\"),p=y;function g(){let S;try{S=Gn(a)}catch(q){return T(q)}const C=W(S);return U(C,q=>{if(!b(q))throw new TypeError(\"The promise returned by the iterator.next() method must fulfill with an object\");if(Zn(q))ke(o._readableStreamController);else{const k=Kn(q);De(o._readableStreamController,k)}})}u(g,\"pullAlgorithm\");function _(S){const C=a.iterator;let q;try{q=at(C,\"return\")}catch(O){return T(O)}if(q===void 0)return W(void 0);let P;try{P=$(q,C,[S])}catch(O){return T(O)}const k=W(P);return U(k,O=>{if(!b(O))throw new TypeError(\"The promise returned by the iterator.return() method must fulfill with an object\")})}return u(_,\"cancelAlgorithm\"),o=et(p,g,_,0),o}u(ii,\"ReadableStreamFromIterable\");function ai(n){let o;const a=y;function p(){let _;try{_=n.read()}catch(S){return T(S)}return U(_,S=>{if(!b(S))throw new TypeError(\"The promise returned by the reader.read() method must fulfill with an object\");if(S.done)ke(o._readableStreamController);else{const C=S.value;De(o._readableStreamController,C)}})}u(p,\"pullAlgorithm\");function g(_){try{return W(n.cancel(_))}catch(S){return T(S)}}return u(g,\"cancelAlgorithm\"),o=et(a,p,g,0),o}u(ai,\"ReadableStreamFromDefaultReader\");function si(n,o){ie(n,o);const a=n,p=a?.autoAllocateChunkSize,g=a?.cancel,_=a?.pull,S=a?.start,C=a?.type;return{autoAllocateChunkSize:p===void 0?void 0:Mt(p,`${o} has member 'autoAllocateChunkSize' that`),cancel:g===void 0?void 0:ui(g,a,`${o} has member 'cancel' that`),pull:_===void 0?void 0:li(_,a,`${o} has member 'pull' that`),start:S===void 0?void 0:fi(S,a,`${o} has member 'start' that`),type:C===void 0?void 0:ci(C,`${o} has member 'type' that`)}}u(si,\"convertUnderlyingDefaultOrByteSource\");function ui(n,o,a){return X(n,a),p=>N(n,o,[p])}u(ui,\"convertUnderlyingSourceCancelCallback\");function li(n,o,a){return X(n,a),p=>N(n,o,[p])}u(li,\"convertUnderlyingSourcePullCallback\");function fi(n,o,a){return X(n,a),p=>$(n,o,[p])}u(fi,\"convertUnderlyingSourceStartCallback\");function ci(n,o){if(n=`${n}`,n!==\"bytes\")throw new TypeError(`${o} '${n}' is not a valid enumeration value for ReadableStreamType`);return n}u(ci,\"convertReadableStreamType\");function di(n,o){return ie(n,o),{preventCancel:!!n?.preventCancel}}u(di,\"convertIteratorOptions\");function Tn(n,o){ie(n,o);const a=n?.preventAbort,p=n?.preventCancel,g=n?.preventClose,_=n?.signal;return _!==void 0&&hi(_,`${o} has member 'signal' that`),{preventAbort:!!a,preventCancel:!!p,preventClose:!!g,signal:_}}u(Tn,\"convertPipeOptions\");function hi(n,o){if(!wo(n))throw new TypeError(`${o} is not an AbortSignal.`)}u(hi,\"assertAbortSignal\");function pi(n,o){ie(n,o);const a=n?.readable;Dt(a,\"readable\",\"ReadableWritablePair\"),xt(a,`${o} has member 'readable' that`);const p=n?.writable;return Dt(p,\"writable\",\"ReadableWritablePair\"),nn(p,`${o} has member 'writable' that`),{readable:a,writable:p}}u(pi,\"convertReadableWritablePair\");class H{static{u(this,\"ReadableStream\")}constructor(o={},a={}){o===void 0?o=null:Er(o,\"First parameter\");const p=pt(a,\"Second parameter\"),g=si(o,\"First parameter\");if(br(this),g.type===\"bytes\"){if(p.size!==void 0)throw new RangeError(\"The strategy for a byte stream cannot have a size function\");const _=Ze(p,0);so(this,g,_)}else{const _=ht(p),S=Ze(p,1);Xo(this,g,S,_)}}get locked(){if(!Re(this))throw Oe(\"locked\");return Te(this)}cancel(o=void 0){return Re(this)?Te(this)?T(new TypeError(\"Cannot cancel a stream that already has a reader\")):ne(this,o):T(Oe(\"cancel\"))}getReader(o=void 0){if(!Re(this))throw Oe(\"getReader\");return lo(o,\"First parameter\").mode===void 0?Fe(this):Jr(this)}pipeThrough(o,a={}){if(!Re(this))throw Oe(\"pipeThrough\");le(o,1,\"pipeThrough\");const p=pi(o,\"First parameter\"),g=Tn(a,\"Second parameter\");if(Te(this))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");if(je(p.writable))throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");const _=Sn(this,p.writable,g.preventClose,g.preventAbort,g.preventCancel,g.signal);return K(_),p.readable}pipeTo(o,a={}){if(!Re(this))return T(Oe(\"pipeTo\"));if(o===void 0)return T(\"Parameter 1 is required in 'pipeTo'.\");if(!ze(o))return T(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));let p;try{p=Tn(a,\"Second parameter\")}catch(g){return T(g)}return Te(this)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\")):je(o)?T(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\")):Sn(this,o,p.preventClose,p.preventAbort,p.preventCancel,p.signal)}tee(){if(!Re(this))throw Oe(\"tee\");const o=ei(this);return Qe(o)}values(o=void 0){if(!Re(this))throw Oe(\"values\");const a=di(o,\"First parameter\");return Qn(this,a.preventCancel)}[Qt](o){return this.values(o)}static from(o){return oi(o)}}Object.defineProperties(H,{from:{enumerable:!0}}),Object.defineProperties(H.prototype,{cancel:{enumerable:!0},getReader:{enumerable:!0},pipeThrough:{enumerable:!0},pipeTo:{enumerable:!0},tee:{enumerable:!0},values:{enumerable:!0},locked:{enumerable:!0}}),w(H.from,\"from\"),w(H.prototype.cancel,\"cancel\"),w(H.prototype.getReader,\"getReader\"),w(H.prototype.pipeThrough,\"pipeThrough\"),w(H.prototype.pipeTo,\"pipeTo\"),w(H.prototype.tee,\"tee\"),w(H.prototype.values,\"values\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(H.prototype,Symbol.toStringTag,{value:\"ReadableStream\",configurable:!0}),Object.defineProperty(H.prototype,Qt,{value:H.prototype.values,writable:!0,configurable:!0});function et(n,o,a,p=1,g=()=>1){const _=Object.create(H.prototype);br(_);const S=Object.create(he.prototype);return Rn(_,S,n,o,a,p,g),_}u(et,\"CreateReadableStream\");function Cn(n,o,a){const p=Object.create(H.prototype);br(p);const g=Object.create(ce.prototype);return Kr(p,g,n,o,a,0,void 0),p}u(Cn,\"CreateReadableByteStream\");function br(n){n._state=\"readable\",n._reader=void 0,n._storedError=void 0,n._disturbed=!1}u(br,\"InitializeReadableStream\");function Re(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_readableStreamController\")?!1:n instanceof H}u(Re,\"IsReadableStream\");function Te(n){return n._reader!==void 0}u(Te,\"IsReadableStreamLocked\");function ne(n,o){if(n._disturbed=!0,n._state===\"closed\")return W(void 0);if(n._state===\"errored\")return T(n._storedError);tt(n);const a=n._reader;if(a!==void 0&&Be(a)){const g=a._readIntoRequests;a._readIntoRequests=new Q,g.forEach(_=>{_._closeSteps(void 0)})}const p=n._readableStreamController[Ot](o);return U(p,y)}u(ne,\"ReadableStreamCancel\");function tt(n){n._state=\"closed\";const o=n._reader;if(o!==void 0&&(Cr(o),ye(o))){const a=o._readRequests;o._readRequests=new Q,a.forEach(p=>{p._closeSteps()})}}u(tt,\"ReadableStreamClose\");function Pn(n,o){n._state=\"errored\",n._storedError=o;const a=n._reader;a!==void 0&&(Lt(a,o),ye(a)?qr(a,o):rn(a,o))}u(Pn,\"ReadableStreamError\");function Oe(n){return new TypeError(`ReadableStream.prototype.${n} can only be used on a ReadableStream`)}u(Oe,\"streamBrandCheckException$1\");function En(n,o){ie(n,o);const a=n?.highWaterMark;return Dt(a,\"highWaterMark\",\"QueuingStrategyInit\"),{highWaterMark:$t(a)}}u(En,\"convertQueuingStrategyInit\");const vn=u(n=>n.byteLength,\"byteLengthSizeFunction\");w(vn,\"size\");class Pt{static{u(this,\"ByteLengthQueuingStrategy\")}constructor(o){le(o,1,\"ByteLengthQueuingStrategy\"),o=En(o,\"First parameter\"),this._byteLengthQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!Bn(this))throw An(\"highWaterMark\");return this._byteLengthQueuingStrategyHighWaterMark}get size(){if(!Bn(this))throw An(\"size\");return vn}}Object.defineProperties(Pt.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Pt.prototype,Symbol.toStringTag,{value:\"ByteLengthQueuingStrategy\",configurable:!0});function An(n){return new TypeError(`ByteLengthQueuingStrategy.prototype.${n} can only be used on a ByteLengthQueuingStrategy`)}u(An,\"byteLengthBrandCheckException\");function Bn(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_byteLengthQueuingStrategyHighWaterMark\")?!1:n instanceof Pt}u(Bn,\"IsByteLengthQueuingStrategy\");const qn=u(()=>1,\"countSizeFunction\");w(qn,\"size\");class Et{static{u(this,\"CountQueuingStrategy\")}constructor(o){le(o,1,\"CountQueuingStrategy\"),o=En(o,\"First parameter\"),this._countQueuingStrategyHighWaterMark=o.highWaterMark}get highWaterMark(){if(!kn(this))throw Wn(\"highWaterMark\");return this._countQueuingStrategyHighWaterMark}get size(){if(!kn(this))throw Wn(\"size\");return qn}}Object.defineProperties(Et.prototype,{highWaterMark:{enumerable:!0},size:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Et.prototype,Symbol.toStringTag,{value:\"CountQueuingStrategy\",configurable:!0});function Wn(n){return new TypeError(`CountQueuingStrategy.prototype.${n} can only be used on a CountQueuingStrategy`)}u(Wn,\"countBrandCheckException\");function kn(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_countQueuingStrategyHighWaterMark\")?!1:n instanceof Et}u(kn,\"IsCountQueuingStrategy\");function bi(n,o){ie(n,o);const a=n?.cancel,p=n?.flush,g=n?.readableType,_=n?.start,S=n?.transform,C=n?.writableType;return{cancel:a===void 0?void 0:_i(a,n,`${o} has member 'cancel' that`),flush:p===void 0?void 0:mi(p,n,`${o} has member 'flush' that`),readableType:g,start:_===void 0?void 0:yi(_,n,`${o} has member 'start' that`),transform:S===void 0?void 0:gi(S,n,`${o} has member 'transform' that`),writableType:C}}u(bi,\"convertTransformer\");function mi(n,o,a){return X(n,a),p=>N(n,o,[p])}u(mi,\"convertTransformerFlushCallback\");function yi(n,o,a){return X(n,a),p=>$(n,o,[p])}u(yi,\"convertTransformerStartCallback\");function gi(n,o,a){return X(n,a),(p,g)=>N(n,o,[p,g])}u(gi,\"convertTransformerTransformCallback\");function _i(n,o,a){return X(n,a),p=>N(n,o,[p])}u(_i,\"convertTransformerCancelCallback\");class vt{static{u(this,\"TransformStream\")}constructor(o={},a={},p={}){o===void 0&&(o=null);const g=pt(a,\"Second parameter\"),_=pt(p,\"Third parameter\"),S=bi(o,\"First parameter\");if(S.readableType!==void 0)throw new RangeError(\"Invalid readableType specified\");if(S.writableType!==void 0)throw new RangeError(\"Invalid writableType specified\");const C=Ze(_,0),q=ht(_),P=Ze(g,1),k=ht(g);let O;const j=z(oe=>{O=oe});Si(this,j,P,k,C,q),Ri(this,S),S.start!==void 0?O(S.start(this._transformStreamController)):O(void 0)}get readable(){if(!On(this))throw jn(\"readable\");return this._readable}get writable(){if(!On(this))throw jn(\"writable\");return this._writable}}Object.defineProperties(vt.prototype,{readable:{enumerable:!0},writable:{enumerable:!0}}),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(vt.prototype,Symbol.toStringTag,{value:\"TransformStream\",configurable:!0});function Si(n,o,a,p,g,_){function S(){return o}u(S,\"startAlgorithm\");function C(j){return Pi(n,j)}u(C,\"writeAlgorithm\");function q(j){return Ei(n,j)}u(q,\"abortAlgorithm\");function P(){return vi(n)}u(P,\"closeAlgorithm\"),n._writable=Co(S,C,P,q,a,p);function k(){return Ai(n)}u(k,\"pullAlgorithm\");function O(j){return Bi(n,j)}u(O,\"cancelAlgorithm\"),n._readable=et(S,k,O,g,_),n._backpressure=void 0,n._backpressureChangePromise=void 0,n._backpressureChangePromise_resolve=void 0,At(n,!0),n._transformStreamController=void 0}u(Si,\"InitializeTransformStream\");function On(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_transformStreamController\")?!1:n instanceof vt}u(On,\"IsTransformStream\");function Fn(n,o){re(n._readable._readableStreamController,o),mr(n,o)}u(Fn,\"TransformStreamError\");function mr(n,o){qt(n._transformStreamController),Ke(n._writable._writableStreamController,o),yr(n)}u(mr,\"TransformStreamErrorWritableAndUnblockWrite\");function yr(n){n._backpressure&&At(n,!1)}u(yr,\"TransformStreamUnblockWrite\");function At(n,o){n._backpressureChangePromise!==void 0&&n._backpressureChangePromise_resolve(),n._backpressureChangePromise=z(a=>{n._backpressureChangePromise_resolve=a}),n._backpressure=o}u(At,\"TransformStreamSetBackpressure\");class Ce{static{u(this,\"TransformStreamDefaultController\")}constructor(){throw new TypeError(\"Illegal constructor\")}get desiredSize(){if(!Bt(this))throw Wt(\"desiredSize\");const o=this._controlledTransformStream._readable._readableStreamController;return pr(o)}enqueue(o=void 0){if(!Bt(this))throw Wt(\"enqueue\");In(this,o)}error(o=void 0){if(!Bt(this))throw Wt(\"error\");Ti(this,o)}terminate(){if(!Bt(this))throw Wt(\"terminate\");Ci(this)}}Object.defineProperties(Ce.prototype,{enqueue:{enumerable:!0},error:{enumerable:!0},terminate:{enumerable:!0},desiredSize:{enumerable:!0}}),w(Ce.prototype.enqueue,\"enqueue\"),w(Ce.prototype.error,\"error\"),w(Ce.prototype.terminate,\"terminate\"),typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(Ce.prototype,Symbol.toStringTag,{value:\"TransformStreamDefaultController\",configurable:!0});function Bt(n){return!b(n)||!Object.prototype.hasOwnProperty.call(n,\"_controlledTransformStream\")?!1:n instanceof Ce}u(Bt,\"IsTransformStreamDefaultController\");function wi(n,o,a,p,g){o._controlledTransformStream=n,n._transformStreamController=o,o._transformAlgorithm=a,o._flushAlgorithm=p,o._cancelAlgorithm=g,o._finishPromise=void 0,o._finishPromise_resolve=void 0,o._finishPromise_reject=void 0}u(wi,\"SetUpTransformStreamDefaultController\");function Ri(n,o){const a=Object.create(Ce.prototype);let p,g,_;o.transform!==void 0?p=u(S=>o.transform(S,a),\"transformAlgorithm\"):p=u(S=>{try{return In(a,S),W(void 0)}catch(C){return T(C)}},\"transformAlgorithm\"),o.flush!==void 0?g=u(()=>o.flush(a),\"flushAlgorithm\"):g=u(()=>W(void 0),\"flushAlgorithm\"),o.cancel!==void 0?_=u(S=>o.cancel(S),\"cancelAlgorithm\"):_=u(()=>W(void 0),\"cancelAlgorithm\"),wi(n,a,p,g,_)}u(Ri,\"SetUpTransformStreamDefaultControllerFromTransformer\");function qt(n){n._transformAlgorithm=void 0,n._flushAlgorithm=void 0,n._cancelAlgorithm=void 0}u(qt,\"TransformStreamDefaultControllerClearAlgorithms\");function In(n,o){const a=n._controlledTransformStream,p=a._readable._readableStreamController;if(!$e(p))throw new TypeError(\"Readable side is not in a state that permits enqueue\");try{De(p,o)}catch(_){throw mr(a,_),a._readable._storedError}Jo(p)!==a._backpressure&&At(a,!0)}u(In,\"TransformStreamDefaultControllerEnqueue\");function Ti(n,o){Fn(n._controlledTransformStream,o)}u(Ti,\"TransformStreamDefaultControllerError\");function zn(n,o){const a=n._transformAlgorithm(o);return U(a,void 0,p=>{throw Fn(n._controlledTransformStream,p),p})}u(zn,\"TransformStreamDefaultControllerPerformTransform\");function Ci(n){const o=n._controlledTransformStream,a=o._readable._readableStreamController;ke(a);const p=new TypeError(\"TransformStream terminated\");mr(o,p)}u(Ci,\"TransformStreamDefaultControllerTerminate\");function Pi(n,o){const a=n._transformStreamController;if(n._backpressure){const p=n._backpressureChangePromise;return U(p,()=>{const g=n._writable;if(g._state===\"erroring\")throw g._storedError;return zn(a,o)})}return zn(a,o)}u(Pi,\"TransformStreamDefaultSinkWriteAlgorithm\");function Ei(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._readable;a._finishPromise=z((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return qt(a),E(g,()=>(p._state===\"errored\"?Me(a,p._storedError):(re(p._readableStreamController,o),gr(a)),null),_=>(re(p._readableStreamController,_),Me(a,_),null)),a._finishPromise}u(Ei,\"TransformStreamDefaultSinkAbortAlgorithm\");function vi(n){const o=n._transformStreamController;if(o._finishPromise!==void 0)return o._finishPromise;const a=n._readable;o._finishPromise=z((g,_)=>{o._finishPromise_resolve=g,o._finishPromise_reject=_});const p=o._flushAlgorithm();return qt(o),E(p,()=>(a._state===\"errored\"?Me(o,a._storedError):(ke(a._readableStreamController),gr(o)),null),g=>(re(a._readableStreamController,g),Me(o,g),null)),o._finishPromise}u(vi,\"TransformStreamDefaultSinkCloseAlgorithm\");function Ai(n){return At(n,!1),n._backpressureChangePromise}u(Ai,\"TransformStreamDefaultSourcePullAlgorithm\");function Bi(n,o){const a=n._transformStreamController;if(a._finishPromise!==void 0)return a._finishPromise;const p=n._writable;a._finishPromise=z((_,S)=>{a._finishPromise_resolve=_,a._finishPromise_reject=S});const g=a._cancelAlgorithm(o);return qt(a),E(g,()=>(p._state===\"errored\"?Me(a,p._storedError):(Ke(p._writableStreamController,o),yr(n),gr(a)),null),_=>(Ke(p._writableStreamController,_),yr(n),Me(a,_),null)),a._finishPromise}u(Bi,\"TransformStreamDefaultSourceCancelAlgorithm\");function Wt(n){return new TypeError(`TransformStreamDefaultController.prototype.${n} can only be used on a TransformStreamDefaultController`)}u(Wt,\"defaultControllerBrandCheckException\");function gr(n){n._finishPromise_resolve!==void 0&&(n._finishPromise_resolve(),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u(gr,\"defaultControllerFinishPromiseResolve\");function Me(n,o){n._finishPromise_reject!==void 0&&(K(n._finishPromise),n._finishPromise_reject(o),n._finishPromise_resolve=void 0,n._finishPromise_reject=void 0)}u(Me,\"defaultControllerFinishPromiseReject\");function jn(n){return new TypeError(`TransformStream.prototype.${n} can only be used on a TransformStream`)}u(jn,\"streamBrandCheckException\"),d.ByteLengthQueuingStrategy=Pt,d.CountQueuingStrategy=Et,d.ReadableByteStreamController=ce,d.ReadableStream=H,d.ReadableStreamBYOBReader=Se,d.ReadableStreamBYOBRequest=Ee,d.ReadableStreamDefaultController=he,d.ReadableStreamDefaultReader=me,d.TransformStream=vt,d.TransformStreamDefaultController=Ce,d.WritableStream=we,d.WritableStreamDefaultController=Le,d.WritableStreamDefaultWriter=de})}(ponyfill_es2018$1,ponyfill_es2018$1.exports)),ponyfill_es2018$1.exports}u(requirePonyfill_es2018,\"requirePonyfill_es2018\");var hasRequiredStreams;function requireStreams(){if(hasRequiredStreams)return streams;hasRequiredStreams=1;const c=65536;if(!globalThis.ReadableStream)try{const l=__webpack_require__(/*! node:process */ \"node:process\"),{emitWarning:d}=l;try{l.emitWarning=()=>{},Object.assign(globalThis,__webpack_require__(/*! node:stream/web */ \"node:stream/web\")),l.emitWarning=d}catch(y){throw l.emitWarning=d,y}}catch{Object.assign(globalThis,requirePonyfill_es2018())}try{const{Blob:l}=__webpack_require__(/*! buffer */ \"buffer\");l&&!l.prototype.stream&&(l.prototype.stream=u(function(y){let b=0;const R=this;return new ReadableStream({type:\"bytes\",async pull(w){const F=await R.slice(b,Math.min(R.size,b+c)).arrayBuffer();b+=F.byteLength,w.enqueue(new Uint8Array(F)),b===R.size&&w.close()}})},\"name\"))}catch{}return streams}u(requireStreams,\"requireStreams\"),requireStreams();/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */const POOL_SIZE=65536;async function*toIterator(c,l=!0){for(const d of c)if(\"stream\"in d)yield*d.stream();else if(ArrayBuffer.isView(d))if(l){let y=d.byteOffset;const b=d.byteOffset+d.byteLength;for(;y!==b;){const R=Math.min(b-y,POOL_SIZE),w=d.buffer.slice(y,y+R);y+=w.byteLength,yield new Uint8Array(w)}}else yield d;else{let y=0,b=d;for(;y!==b.size;){const w=await b.slice(y,Math.min(b.size,y+POOL_SIZE)).arrayBuffer();y+=w.byteLength,yield new Uint8Array(w)}}}u(toIterator,\"toIterator\");const _Blob=class Sr{static{u(this,\"Blob\")}#e=[];#t=\"\";#r=0;#n=\"transparent\";constructor(l=[],d={}){if(typeof l!=\"object\"||l===null)throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");if(typeof l[Symbol.iterator]!=\"function\")throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");if(typeof d!=\"object\"&&typeof d!=\"function\")throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");d===null&&(d={});const y=new TextEncoder;for(const R of l){let w;ArrayBuffer.isView(R)?w=new Uint8Array(R.buffer.slice(R.byteOffset,R.byteOffset+R.byteLength)):R instanceof ArrayBuffer?w=new Uint8Array(R.slice(0)):R instanceof Sr?w=R:w=y.encode(`${R}`),this.#r+=ArrayBuffer.isView(w)?w.byteLength:w.size,this.#e.push(w)}this.#n=`${d.endings===void 0?\"transparent\":d.endings}`;const b=d.type===void 0?\"\":String(d.type);this.#t=/^[\\x20-\\x7E]*$/.test(b)?b:\"\"}get size(){return this.#r}get type(){return this.#t}async text(){const l=new TextDecoder;let d=\"\";for await(const y of toIterator(this.#e,!1))d+=l.decode(y,{stream:!0});return d+=l.decode(),d}async arrayBuffer(){const l=new Uint8Array(this.size);let d=0;for await(const y of toIterator(this.#e,!1))l.set(y,d),d+=y.length;return l.buffer}stream(){const l=toIterator(this.#e,!0);return new globalThis.ReadableStream({type:\"bytes\",async pull(d){const y=await l.next();y.done?d.close():d.enqueue(y.value)},async cancel(){await l.return()}})}slice(l=0,d=this.size,y=\"\"){const{size:b}=this;let R=l<0?Math.max(b+l,0):Math.min(l,b),w=d<0?Math.max(b+d,0):Math.min(d,b);const A=Math.max(w-R,0),F=this.#e,B=[];let z=0;for(const T of F){if(z>=A)break;const D=ArrayBuffer.isView(T)?T.byteLength:T.size;if(R&&D<=R)R-=D,w-=D;else{let E;ArrayBuffer.isView(T)?(E=T.subarray(R,Math.min(D,w)),z+=E.byteLength):(E=T.slice(R,Math.min(D,w)),z+=E.size),w-=D,B.push(E),R=0}}const W=new Sr([],{type:String(y).toLowerCase()});return W.#r=A,W.#e=B,W}get[Symbol.toStringTag](){return\"Blob\"}static[Symbol.hasInstance](l){return l&&typeof l==\"object\"&&typeof l.constructor==\"function\"&&(typeof l.stream==\"function\"||typeof l.arrayBuffer==\"function\")&&/^(Blob|File)$/.test(l[Symbol.toStringTag])}};Object.defineProperties(_Blob.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}});const Blob=_Blob,_File=class extends Blob{static{u(this,\"File\")}#e=0;#t=\"\";constructor(l,d,y={}){if(arguments.length<2)throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);super(l,y),y===null&&(y={});const b=y.lastModified===void 0?Date.now():Number(y.lastModified);Number.isNaN(b)||(this.#e=b),this.#t=String(d)}get name(){return this.#t}get lastModified(){return this.#e}get[Symbol.toStringTag](){return\"File\"}static[Symbol.hasInstance](l){return!!l&&l instanceof Blob&&/^(File)$/.test(l[Symbol.toStringTag])}},File=_File;/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var{toStringTag:t$1,iterator:i,hasInstance:h}=Symbol,r=Math.random,m=\"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\"),f=u((c,l,d)=>(c+=\"\",/^(Blob|File)$/.test(l&&l[t$1])?[(d=d!==void 0?d+\"\":l[t$1]==\"File\"?l.name:\"blob\",c),l.name!==d||l[t$1]==\"blob\"?new File([l],d,l):l]:[c,l+\"\"]),\"f\"),e$1=u((c,l)=>(l?c:c.replace(/\\r?\\n|\\r/g,`\\r\n`)).replace(/\\n/g,\"%0A\").replace(/\\r/g,\"%0D\").replace(/\"/g,\"%22\"),\"e$1\"),x=u((c,l,d)=>{if(l.length<d)throw new TypeError(`Failed to execute '${c}' on 'FormData': ${d} arguments required, but only ${l.length} present.`)},\"x\");const FormData=class{static{u(this,\"FormData\")}#e=[];constructor(...l){if(l.length)throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\")}get[t$1](){return\"FormData\"}[i](){return this.entries()}static[h](l){return l&&typeof l==\"object\"&&l[t$1]===\"FormData\"&&!m.some(d=>typeof l[d]!=\"function\")}append(...l){x(\"append\",arguments,2),this.#e.push(f(...l))}delete(l){x(\"delete\",arguments,1),l+=\"\",this.#e=this.#e.filter(([d])=>d!==l)}get(l){x(\"get\",arguments,1),l+=\"\";for(var d=this.#e,y=d.length,b=0;b<y;b++)if(d[b][0]===l)return d[b][1];return null}getAll(l,d){return x(\"getAll\",arguments,1),d=[],l+=\"\",this.#e.forEach(y=>y[0]===l&&d.push(y[1])),d}has(l){return x(\"has\",arguments,1),l+=\"\",this.#e.some(d=>d[0]===l)}forEach(l,d){x(\"forEach\",arguments,1);for(var[y,b]of this)l.call(d,b,y,this)}set(...l){x(\"set\",arguments,2);var d=[],y=!0;l=f(...l),this.#e.forEach(b=>{b[0]===l[0]?y&&(y=!d.push(l)):d.push(b)}),y&&d.push(l),this.#e=d}*entries(){yield*this.#e}*keys(){for(var[l]of this)yield l}*values(){for(var[,l]of this)yield l}};function formDataToBlob(c,l=Blob){var d=`${r()}${r()}`.replace(/\\./g,\"\").slice(-28).padStart(32,\"-\"),y=[],b=`--${d}\\r\nContent-Disposition: form-data; name=\"`;return c.forEach((R,w)=>typeof R==\"string\"?y.push(b+e$1(w)+`\"\\r\n\\r\n${R.replace(/\\r(?!\\n)|(?<!\\r)\\n/g,`\\r\n`)}\\r\n`):y.push(b+e$1(w)+`\"; filename=\"${e$1(R.name,1)}\"\\r\nContent-Type: ${R.type||\"application/octet-stream\"}\\r\n\\r\n`,R,`\\r\n`)),y.push(`--${d}--`),new l(y,{type:\"multipart/form-data; boundary=\"+d})}u(formDataToBlob,\"formDataToBlob\");class FetchBaseError extends Error{static{u(this,\"FetchBaseError\")}constructor(l,d){super(l),Error.captureStackTrace(this,this.constructor),this.type=d}get name(){return this.constructor.name}get[Symbol.toStringTag](){return this.constructor.name}}class FetchError extends FetchBaseError{static{u(this,\"FetchError\")}constructor(l,d,y){super(l,d),y&&(this.code=this.errno=y.code,this.erroredSysCall=y.syscall)}}const NAME=Symbol.toStringTag,isURLSearchParameters=u(c=>typeof c==\"object\"&&typeof c.append==\"function\"&&typeof c.delete==\"function\"&&typeof c.get==\"function\"&&typeof c.getAll==\"function\"&&typeof c.has==\"function\"&&typeof c.set==\"function\"&&typeof c.sort==\"function\"&&c[NAME]===\"URLSearchParams\",\"isURLSearchParameters\"),isBlob=u(c=>c&&typeof c==\"object\"&&typeof c.arrayBuffer==\"function\"&&typeof c.type==\"string\"&&typeof c.stream==\"function\"&&typeof c.constructor==\"function\"&&/^(Blob|File)$/.test(c[NAME]),\"isBlob\"),isAbortSignal=u(c=>typeof c==\"object\"&&(c[NAME]===\"AbortSignal\"||c[NAME]===\"EventTarget\"),\"isAbortSignal\"),isDomainOrSubdomain=u((c,l)=>{const d=new URL(l).hostname,y=new URL(c).hostname;return d===y||d.endsWith(`.${y}`)},\"isDomainOrSubdomain\"),isSameProtocol=u((c,l)=>{const d=new URL(l).protocol,y=new URL(c).protocol;return d===y},\"isSameProtocol\"),pipeline=require$$0$1.promisify(Stream__default.pipeline),INTERNALS$2=Symbol(\"Body internals\");class Body{static{u(this,\"Body\")}constructor(l,{size:d=0}={}){let y=null;l===null?l=null:isURLSearchParameters(l)?l=require$$0.Buffer.from(l.toString()):isBlob(l)||require$$0.Buffer.isBuffer(l)||(require$$0$1.types.isAnyArrayBuffer(l)?l=require$$0.Buffer.from(l):ArrayBuffer.isView(l)?l=require$$0.Buffer.from(l.buffer,l.byteOffset,l.byteLength):l instanceof Stream__default||(l instanceof FormData?(l=formDataToBlob(l),y=l.type.split(\"=\")[1]):l=require$$0.Buffer.from(String(l))));let b=l;require$$0.Buffer.isBuffer(l)?b=Stream__default.Readable.from(l):isBlob(l)&&(b=Stream__default.Readable.from(l.stream())),this[INTERNALS$2]={body:l,stream:b,boundary:y,disturbed:!1,error:null},this.size=d,l instanceof Stream__default&&l.on(\"error\",R=>{const w=R instanceof FetchBaseError?R:new FetchError(`Invalid response body while trying to fetch ${this.url}: ${R.message}`,\"system\",R);this[INTERNALS$2].error=w})}get body(){return this[INTERNALS$2].stream}get bodyUsed(){return this[INTERNALS$2].disturbed}async arrayBuffer(){const{buffer:l,byteOffset:d,byteLength:y}=await consumeBody(this);return l.slice(d,d+y)}async formData(){const l=this.headers.get(\"content-type\");if(l.startsWith(\"application/x-www-form-urlencoded\")){const y=new FormData,b=new URLSearchParams(await this.text());for(const[R,w]of b)y.append(R,w);return y}const{toFormData:d}=await __webpack_require__.e(/*! import() */ \"vendor-chunks/node-fetch-native\").then(__webpack_require__.t.bind(__webpack_require__, /*! ./chunks/multipart-parser.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/chunks/multipart-parser.cjs\", 19));return d(this.body,l)}async blob(){const l=this.headers&&this.headers.get(\"content-type\")||this[INTERNALS$2].body&&this[INTERNALS$2].body.type||\"\",d=await this.arrayBuffer();return new Blob([d],{type:l})}async json(){const l=await this.text();return JSON.parse(l)}async text(){const l=await consumeBody(this);return new TextDecoder().decode(l)}buffer(){return consumeBody(this)}}Body.prototype.buffer=require$$0$1.deprecate(Body.prototype.buffer,\"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\",\"node-fetch#buffer\"),Object.defineProperties(Body.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0},data:{get:require$$0$1.deprecate(()=>{},\"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (response)\")}});async function consumeBody(c){if(c[INTERNALS$2].disturbed)throw new TypeError(`body used already for: ${c.url}`);if(c[INTERNALS$2].disturbed=!0,c[INTERNALS$2].error)throw c[INTERNALS$2].error;const{body:l}=c;if(l===null||!(l instanceof Stream__default))return require$$0.Buffer.alloc(0);const d=[];let y=0;try{for await(const b of l){if(c.size>0&&y+b.length>c.size){const R=new FetchError(`content size at ${c.url} over limit: ${c.size}`,\"max-size\");throw l.destroy(R),R}y+=b.length,d.push(b)}}catch(b){throw b instanceof FetchBaseError?b:new FetchError(`Invalid response body while trying to fetch ${c.url}: ${b.message}`,\"system\",b)}if(l.readableEnded===!0||l._readableState.ended===!0)try{return d.every(b=>typeof b==\"string\")?require$$0.Buffer.from(d.join(\"\")):require$$0.Buffer.concat(d,y)}catch(b){throw new FetchError(`Could not create Buffer from response body for ${c.url}: ${b.message}`,\"system\",b)}else throw new FetchError(`Premature close of server response while trying to fetch ${c.url}`)}u(consumeBody,\"consumeBody\");const clone=u((c,l)=>{let d,y,{body:b}=c[INTERNALS$2];if(c.bodyUsed)throw new Error(\"cannot clone body after it is used\");return b instanceof Stream__default&&typeof b.getBoundary!=\"function\"&&(d=new Stream.PassThrough({highWaterMark:l}),y=new Stream.PassThrough({highWaterMark:l}),b.pipe(d),b.pipe(y),c[INTERNALS$2].stream=d,b=y),b},\"clone\"),getNonSpecFormDataBoundary=require$$0$1.deprecate(c=>c.getBoundary(),\"form-data doesn't follow the spec and requires special treatment. Use alternative package\",\"https://github.com/node-fetch/node-fetch/issues/1167\"),extractContentType=u((c,l)=>c===null?null:typeof c==\"string\"?\"text/plain;charset=UTF-8\":isURLSearchParameters(c)?\"application/x-www-form-urlencoded;charset=UTF-8\":isBlob(c)?c.type||null:require$$0.Buffer.isBuffer(c)||require$$0$1.types.isAnyArrayBuffer(c)||ArrayBuffer.isView(c)?null:c instanceof FormData?`multipart/form-data; boundary=${l[INTERNALS$2].boundary}`:c&&typeof c.getBoundary==\"function\"?`multipart/form-data;boundary=${getNonSpecFormDataBoundary(c)}`:c instanceof Stream__default?null:\"text/plain;charset=UTF-8\",\"extractContentType\"),getTotalBytes=u(c=>{const{body:l}=c[INTERNALS$2];return l===null?0:isBlob(l)?l.size:require$$0.Buffer.isBuffer(l)?l.length:l&&typeof l.getLengthSync==\"function\"&&l.hasKnownLength&&l.hasKnownLength()?l.getLengthSync():null},\"getTotalBytes\"),writeToStream=u(async(c,{body:l})=>{l===null?c.end():await pipeline(l,c)},\"writeToStream\"),validateHeaderName=typeof http__default.validateHeaderName==\"function\"?http__default.validateHeaderName:c=>{if(!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(c)){const l=new TypeError(`Header name must be a valid HTTP token [${c}]`);throw Object.defineProperty(l,\"code\",{value:\"ERR_INVALID_HTTP_TOKEN\"}),l}},validateHeaderValue=typeof http__default.validateHeaderValue==\"function\"?http__default.validateHeaderValue:(c,l)=>{if(/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(l)){const d=new TypeError(`Invalid character in header content [\"${c}\"]`);throw Object.defineProperty(d,\"code\",{value:\"ERR_INVALID_CHAR\"}),d}};class Headers extends URLSearchParams{static{u(this,\"Headers\")}constructor(l){let d=[];if(l instanceof Headers){const y=l.raw();for(const[b,R]of Object.entries(y))d.push(...R.map(w=>[b,w]))}else if(l!=null)if(typeof l==\"object\"&&!require$$0$1.types.isBoxedPrimitive(l)){const y=l[Symbol.iterator];if(y==null)d.push(...Object.entries(l));else{if(typeof y!=\"function\")throw new TypeError(\"Header pairs must be iterable\");d=[...l].map(b=>{if(typeof b!=\"object\"||require$$0$1.types.isBoxedPrimitive(b))throw new TypeError(\"Each header pair must be an iterable object\");return[...b]}).map(b=>{if(b.length!==2)throw new TypeError(\"Each header pair must be a name/value tuple\");return[...b]})}}else throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");return d=d.length>0?d.map(([y,b])=>(validateHeaderName(y),validateHeaderValue(y,String(b)),[String(y).toLowerCase(),String(b)])):void 0,super(d),new Proxy(this,{get(y,b,R){switch(b){case\"append\":case\"set\":return(w,A)=>(validateHeaderName(w),validateHeaderValue(w,String(A)),URLSearchParams.prototype[b].call(y,String(w).toLowerCase(),String(A)));case\"delete\":case\"has\":case\"getAll\":return w=>(validateHeaderName(w),URLSearchParams.prototype[b].call(y,String(w).toLowerCase()));case\"keys\":return()=>(y.sort(),new Set(URLSearchParams.prototype.keys.call(y)).keys());default:return Reflect.get(y,b,R)}}})}get[Symbol.toStringTag](){return this.constructor.name}toString(){return Object.prototype.toString.call(this)}get(l){const d=this.getAll(l);if(d.length===0)return null;let y=d.join(\", \");return/^content-encoding$/i.test(l)&&(y=y.toLowerCase()),y}forEach(l,d=void 0){for(const y of this.keys())Reflect.apply(l,d,[this.get(y),y,this])}*values(){for(const l of this.keys())yield this.get(l)}*entries(){for(const l of this.keys())yield[l,this.get(l)]}[Symbol.iterator](){return this.entries()}raw(){return[...this.keys()].reduce((l,d)=>(l[d]=this.getAll(d),l),{})}[Symbol.for(\"nodejs.util.inspect.custom\")](){return[...this.keys()].reduce((l,d)=>{const y=this.getAll(d);return d===\"host\"?l[d]=y[0]:l[d]=y.length>1?y:y[0],l},{})}}Object.defineProperties(Headers.prototype,[\"get\",\"entries\",\"forEach\",\"values\"].reduce((c,l)=>(c[l]={enumerable:!0},c),{}));function fromRawHeaders(c=[]){return new Headers(c.reduce((l,d,y,b)=>(y%2===0&&l.push(b.slice(y,y+2)),l),[]).filter(([l,d])=>{try{return validateHeaderName(l),validateHeaderValue(l,String(d)),!0}catch{return!1}}))}u(fromRawHeaders,\"fromRawHeaders\");const redirectStatus=new Set([301,302,303,307,308]),isRedirect=u(c=>redirectStatus.has(c),\"isRedirect\"),INTERNALS$1=Symbol(\"Response internals\");class Response extends Body{static{u(this,\"Response\")}constructor(l=null,d={}){super(l,d);const y=d.status!=null?d.status:200,b=new Headers(d.headers);if(l!==null&&!b.has(\"Content-Type\")){const R=extractContentType(l,this);R&&b.append(\"Content-Type\",R)}this[INTERNALS$1]={type:\"default\",url:d.url,status:y,statusText:d.statusText||\"\",headers:b,counter:d.counter,highWaterMark:d.highWaterMark}}get type(){return this[INTERNALS$1].type}get url(){return this[INTERNALS$1].url||\"\"}get status(){return this[INTERNALS$1].status}get ok(){return this[INTERNALS$1].status>=200&&this[INTERNALS$1].status<300}get redirected(){return this[INTERNALS$1].counter>0}get statusText(){return this[INTERNALS$1].statusText}get headers(){return this[INTERNALS$1].headers}get highWaterMark(){return this[INTERNALS$1].highWaterMark}clone(){return new Response(clone(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(l,d=302){if(!isRedirect(d))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new Response(null,{headers:{location:new URL(l).toString()},status:d})}static error(){const l=new Response(null,{status:0,statusText:\"\"});return l[INTERNALS$1].type=\"error\",l}static json(l=void 0,d={}){const y=JSON.stringify(l);if(y===void 0)throw new TypeError(\"data is not JSON serializable\");const b=new Headers(d&&d.headers);return b.has(\"content-type\")||b.set(\"content-type\",\"application/json\"),new Response(y,{...d,headers:b})}get[Symbol.toStringTag](){return\"Response\"}}Object.defineProperties(Response.prototype,{type:{enumerable:!0},url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}});const getSearch=u(c=>{if(c.search)return c.search;const l=c.href.length-1,d=c.hash||(c.href[l]===\"#\"?\"#\":\"\");return c.href[l-d.length]===\"?\"?\"?\":\"\"},\"getSearch\");function stripURLForUseAsAReferrer(c,l=!1){return c==null||(c=new URL(c),/^(about|blob|data):$/.test(c.protocol))?\"no-referrer\":(c.username=\"\",c.password=\"\",c.hash=\"\",l&&(c.pathname=\"\",c.search=\"\"),c)}u(stripURLForUseAsAReferrer,\"stripURLForUseAsAReferrer\");const ReferrerPolicy=new Set([\"\",\"no-referrer\",\"no-referrer-when-downgrade\",\"same-origin\",\"origin\",\"strict-origin\",\"origin-when-cross-origin\",\"strict-origin-when-cross-origin\",\"unsafe-url\"]),DEFAULT_REFERRER_POLICY=\"strict-origin-when-cross-origin\";function validateReferrerPolicy(c){if(!ReferrerPolicy.has(c))throw new TypeError(`Invalid referrerPolicy: ${c}`);return c}u(validateReferrerPolicy,\"validateReferrerPolicy\");function isOriginPotentiallyTrustworthy(c){if(/^(http|ws)s:$/.test(c.protocol))return!0;const l=c.host.replace(/(^\\[)|(]$)/g,\"\"),d=require$$0$2.isIP(l);return d===4&&/^127\\./.test(l)||d===6&&/^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(l)?!0:c.host===\"localhost\"||c.host.endsWith(\".localhost\")?!1:c.protocol===\"file:\"}u(isOriginPotentiallyTrustworthy,\"isOriginPotentiallyTrustworthy\");function isUrlPotentiallyTrustworthy(c){return/^about:(blank|srcdoc)$/.test(c)||c.protocol===\"data:\"||/^(blob|filesystem):$/.test(c.protocol)?!0:isOriginPotentiallyTrustworthy(c)}u(isUrlPotentiallyTrustworthy,\"isUrlPotentiallyTrustworthy\");function determineRequestsReferrer(c,{referrerURLCallback:l,referrerOriginCallback:d}={}){if(c.referrer===\"no-referrer\"||c.referrerPolicy===\"\")return null;const y=c.referrerPolicy;if(c.referrer===\"about:client\")return\"no-referrer\";const b=c.referrer;let R=stripURLForUseAsAReferrer(b),w=stripURLForUseAsAReferrer(b,!0);R.toString().length>4096&&(R=w),l&&(R=l(R)),d&&(w=d(w));const A=new URL(c.url);switch(y){case\"no-referrer\":return\"no-referrer\";case\"origin\":return w;case\"unsafe-url\":return R;case\"strict-origin\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":w.toString();case\"strict-origin-when-cross-origin\":return R.origin===A.origin?R:isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":w;case\"same-origin\":return R.origin===A.origin?R:\"no-referrer\";case\"origin-when-cross-origin\":return R.origin===A.origin?R:w;case\"no-referrer-when-downgrade\":return isUrlPotentiallyTrustworthy(R)&&!isUrlPotentiallyTrustworthy(A)?\"no-referrer\":R;default:throw new TypeError(`Invalid referrerPolicy: ${y}`)}}u(determineRequestsReferrer,\"determineRequestsReferrer\");function parseReferrerPolicyFromHeader(c){const l=(c.get(\"referrer-policy\")||\"\").split(/[,\\s]+/);let d=\"\";for(const y of l)y&&ReferrerPolicy.has(y)&&(d=y);return d}u(parseReferrerPolicyFromHeader,\"parseReferrerPolicyFromHeader\");const INTERNALS=Symbol(\"Request internals\"),isRequest=u(c=>typeof c==\"object\"&&typeof c[INTERNALS]==\"object\",\"isRequest\"),doBadDataWarn=require$$0$1.deprecate(()=>{},\".data is not a valid RequestInit property, use .body instead\",\"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");class Request extends Body{static{u(this,\"Request\")}constructor(l,d={}){let y;if(isRequest(l)?y=new URL(l.url):(y=new URL(l),l={}),y.username!==\"\"||y.password!==\"\")throw new TypeError(`${y} is an url with embedded credentials.`);let b=d.method||l.method||\"GET\";if(/^(delete|get|head|options|post|put)$/i.test(b)&&(b=b.toUpperCase()),!isRequest(d)&&\"data\"in d&&doBadDataWarn(),(d.body!=null||isRequest(l)&&l.body!==null)&&(b===\"GET\"||b===\"HEAD\"))throw new TypeError(\"Request with GET/HEAD method cannot have body\");const R=d.body?d.body:isRequest(l)&&l.body!==null?clone(l):null;super(R,{size:d.size||l.size||0});const w=new Headers(d.headers||l.headers||{});if(R!==null&&!w.has(\"Content-Type\")){const B=extractContentType(R,this);B&&w.set(\"Content-Type\",B)}let A=isRequest(l)?l.signal:null;if(\"signal\"in d&&(A=d.signal),A!=null&&!isAbortSignal(A))throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");let F=d.referrer==null?l.referrer:d.referrer;if(F===\"\")F=\"no-referrer\";else if(F){const B=new URL(F);F=/^about:(\\/\\/)?client$/.test(B)?\"client\":B}else F=void 0;this[INTERNALS]={method:b,redirect:d.redirect||l.redirect||\"follow\",headers:w,parsedURL:y,signal:A,referrer:F},this.follow=d.follow===void 0?l.follow===void 0?20:l.follow:d.follow,this.compress=d.compress===void 0?l.compress===void 0?!0:l.compress:d.compress,this.counter=d.counter||l.counter||0,this.agent=d.agent||l.agent,this.highWaterMark=d.highWaterMark||l.highWaterMark||16384,this.insecureHTTPParser=d.insecureHTTPParser||l.insecureHTTPParser||!1,this.referrerPolicy=d.referrerPolicy||l.referrerPolicy||\"\"}get method(){return this[INTERNALS].method}get url(){return require$$1.format(this[INTERNALS].parsedURL)}get headers(){return this[INTERNALS].headers}get redirect(){return this[INTERNALS].redirect}get signal(){return this[INTERNALS].signal}get referrer(){if(this[INTERNALS].referrer===\"no-referrer\")return\"\";if(this[INTERNALS].referrer===\"client\")return\"about:client\";if(this[INTERNALS].referrer)return this[INTERNALS].referrer.toString()}get referrerPolicy(){return this[INTERNALS].referrerPolicy}set referrerPolicy(l){this[INTERNALS].referrerPolicy=validateReferrerPolicy(l)}clone(){return new Request(this)}get[Symbol.toStringTag](){return\"Request\"}}Object.defineProperties(Request.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0},referrer:{enumerable:!0},referrerPolicy:{enumerable:!0}});const getNodeRequestOptions=u(c=>{const{parsedURL:l}=c[INTERNALS],d=new Headers(c[INTERNALS].headers);d.has(\"Accept\")||d.set(\"Accept\",\"*/*\");let y=null;if(c.body===null&&/^(post|put)$/i.test(c.method)&&(y=\"0\"),c.body!==null){const A=getTotalBytes(c);typeof A==\"number\"&&!Number.isNaN(A)&&(y=String(A))}y&&d.set(\"Content-Length\",y),c.referrerPolicy===\"\"&&(c.referrerPolicy=DEFAULT_REFERRER_POLICY),c.referrer&&c.referrer!==\"no-referrer\"?c[INTERNALS].referrer=determineRequestsReferrer(c):c[INTERNALS].referrer=\"no-referrer\",c[INTERNALS].referrer instanceof URL&&d.set(\"Referer\",c.referrer),d.has(\"User-Agent\")||d.set(\"User-Agent\",\"node-fetch\"),c.compress&&!d.has(\"Accept-Encoding\")&&d.set(\"Accept-Encoding\",\"gzip, deflate, br\");let{agent:b}=c;typeof b==\"function\"&&(b=b(l));const R=getSearch(l),w={path:l.pathname+R,method:c.method,headers:d[Symbol.for(\"nodejs.util.inspect.custom\")](),insecureHTTPParser:c.insecureHTTPParser,agent:b};return{parsedURL:l,options:w}},\"getNodeRequestOptions\");class AbortError extends FetchBaseError{static{u(this,\"AbortError\")}constructor(l,d=\"aborted\"){super(l,d)}}/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */var nodeDomexception,hasRequiredNodeDomexception;function requireNodeDomexception(){if(hasRequiredNodeDomexception)return nodeDomexception;if(hasRequiredNodeDomexception=1,!globalThis.DOMException)try{const{MessageChannel:c}=__webpack_require__(/*! worker_threads */ \"worker_threads\"),l=new c().port1,d=new ArrayBuffer;l.postMessage(d,[d,d])}catch(c){c.constructor.name===\"DOMException\"&&(globalThis.DOMException=c.constructor)}return nodeDomexception=globalThis.DOMException,nodeDomexception}u(requireNodeDomexception,\"requireNodeDomexception\");var nodeDomexceptionExports=requireNodeDomexception();const DOMException=_commonjsHelpers.getDefaultExportFromCjs(nodeDomexceptionExports),{stat}=node_fs.promises,blobFromSync=u((c,l)=>fromBlob(node_fs.statSync(c),c,l),\"blobFromSync\"),blobFrom=u((c,l)=>stat(c).then(d=>fromBlob(d,c,l)),\"blobFrom\"),fileFrom=u((c,l)=>stat(c).then(d=>fromFile(d,c,l)),\"fileFrom\"),fileFromSync=u((c,l)=>fromFile(node_fs.statSync(c),c,l),\"fileFromSync\"),fromBlob=u((c,l,d=\"\")=>new Blob([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],{type:d}),\"fromBlob\"),fromFile=u((c,l,d=\"\")=>new File([new BlobDataItem({path:l,size:c.size,lastModified:c.mtimeMs,start:0})],node_path.basename(l),{type:d,lastModified:c.mtimeMs}),\"fromFile\");class BlobDataItem{static{u(this,\"BlobDataItem\")}#e;#t;constructor(l){this.#e=l.path,this.#t=l.start,this.size=l.size,this.lastModified=l.lastModified}slice(l,d){return new BlobDataItem({path:this.#e,lastModified:this.lastModified,size:d-l,start:this.#t+l})}async*stream(){const{mtimeMs:l}=await stat(this.#e);if(l>this.lastModified)throw new DOMException(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\",\"NotReadableError\");yield*node_fs.createReadStream(this.#e,{start:this.#t,end:this.#t+this.size-1})}get[Symbol.toStringTag](){return\"Blob\"}}const supportedSchemas=new Set([\"data:\",\"http:\",\"https:\"]);async function fetch$1(c,l){return new Promise((d,y)=>{const b=new Request(c,l),{parsedURL:R,options:w}=getNodeRequestOptions(b);if(!supportedSchemas.has(R.protocol))throw new TypeError(`node-fetch cannot load ${c}. URL scheme \"${R.protocol.replace(/:$/,\"\")}\" is not supported.`);if(R.protocol===\"data:\"){const E=dataUriToBuffer(b.url),Z=new Response(E,{headers:{\"Content-Type\":E.typeFull}});d(Z);return}const A=(R.protocol===\"https:\"?https__default:http__default).request,{signal:F}=b;let B=null;const z=u(()=>{const E=new AbortError(\"The operation was aborted.\");y(E),b.body&&b.body instanceof Stream__default.Readable&&b.body.destroy(E),!(!B||!B.body)&&B.body.emit(\"error\",E)},\"abort\");if(F&&F.aborted){z();return}const W=u(()=>{z(),D()},\"abortAndFinalize\"),T=A(R.toString(),w);F&&F.addEventListener(\"abort\",W);const D=u(()=>{T.abort(),F&&F.removeEventListener(\"abort\",W)},\"finalize\");T.on(\"error\",E=>{y(new FetchError(`request to ${b.url} failed, reason: ${E.message}`,\"system\",E)),D()}),fixResponseChunkedTransferBadEnding(T,E=>{B&&B.body&&B.body.destroy(E)}),process.version<\"v14\"&&T.on(\"socket\",E=>{let Z;E.prependListener(\"end\",()=>{Z=E._eventsCount}),E.prependListener(\"close\",M=>{if(B&&Z<E._eventsCount&&!M){const U=new Error(\"Premature close\");U.code=\"ERR_STREAM_PREMATURE_CLOSE\",B.body.emit(\"error\",U)}})}),T.on(\"response\",E=>{T.setTimeout(0);const Z=fromRawHeaders(E.rawHeaders);if(isRedirect(E.statusCode)){const $=Z.get(\"Location\");let N=null;try{N=$===null?null:new URL($,b.url)}catch{if(b.redirect!==\"manual\"){y(new FetchError(`uri requested responds with an invalid redirect URL: ${$}`,\"invalid-redirect\")),D();return}}switch(b.redirect){case\"error\":y(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${b.url}`,\"no-redirect\")),D();return;case\"manual\":break;case\"follow\":{if(N===null)break;if(b.counter>=b.follow){y(new FetchError(`maximum redirect reached at: ${b.url}`,\"max-redirect\")),D();return}const V={headers:new Headers(b.headers),follow:b.follow,counter:b.counter+1,agent:b.agent,compress:b.compress,method:b.method,body:clone(b),signal:b.signal,size:b.size,referrer:b.referrer,referrerPolicy:b.referrerPolicy};if(!isDomainOrSubdomain(b.url,N)||!isSameProtocol(b.url,N))for(const rt of[\"authorization\",\"www-authenticate\",\"cookie\",\"cookie2\"])V.headers.delete(rt);if(E.statusCode!==303&&b.body&&l.body instanceof Stream__default.Readable){y(new FetchError(\"Cannot follow redirect with body being a readable stream\",\"unsupported-redirect\")),D();return}(E.statusCode===303||(E.statusCode===301||E.statusCode===302)&&b.method===\"POST\")&&(V.method=\"GET\",V.body=void 0,V.headers.delete(\"content-length\"));const Q=parseReferrerPolicyFromHeader(Z);Q&&(V.referrerPolicy=Q),d(fetch$1(new Request(N,V))),D();return}default:return y(new TypeError(`Redirect option '${b.redirect}' is not a valid value of RequestRedirect`))}}F&&E.once(\"end\",()=>{F.removeEventListener(\"abort\",W)});let M=Stream.pipeline(E,new Stream.PassThrough,$=>{$&&y($)});process.version<\"v12.10\"&&E.on(\"aborted\",W);const U={url:b.url,status:E.statusCode,statusText:E.statusMessage,headers:Z,size:b.size,counter:b.counter,highWaterMark:b.highWaterMark},K=Z.get(\"Content-Encoding\");if(!b.compress||b.method===\"HEAD\"||K===null||E.statusCode===204||E.statusCode===304){B=new Response(M,U),d(B);return}const se={flush:zlib__default.Z_SYNC_FLUSH,finishFlush:zlib__default.Z_SYNC_FLUSH};if(K===\"gzip\"||K===\"x-gzip\"){M=Stream.pipeline(M,zlib__default.createGunzip(se),$=>{$&&y($)}),B=new Response(M,U),d(B);return}if(K===\"deflate\"||K===\"x-deflate\"){const $=Stream.pipeline(E,new Stream.PassThrough,N=>{N&&y(N)});$.once(\"data\",N=>{(N[0]&15)===8?M=Stream.pipeline(M,zlib__default.createInflate(),V=>{V&&y(V)}):M=Stream.pipeline(M,zlib__default.createInflateRaw(),V=>{V&&y(V)}),B=new Response(M,U),d(B)}),$.once(\"end\",()=>{B||(B=new Response(M,U),d(B))});return}if(K===\"br\"){M=Stream.pipeline(M,zlib__default.createBrotliDecompress(),$=>{$&&y($)}),B=new Response(M,U),d(B);return}B=new Response(M,U),d(B)}),writeToStream(T,b).catch(y)})}u(fetch$1,\"fetch$1\");function fixResponseChunkedTransferBadEnding(c,l){const d=require$$0.Buffer.from(`0\\r\n\\r\n`);let y=!1,b=!1,R;c.on(\"response\",w=>{const{headers:A}=w;y=A[\"transfer-encoding\"]===\"chunked\"&&!A[\"content-length\"]}),c.on(\"socket\",w=>{const A=u(()=>{if(y&&!b){const B=new Error(\"Premature close\");B.code=\"ERR_STREAM_PREMATURE_CLOSE\",l(B)}},\"onSocketClose\"),F=u(B=>{b=require$$0.Buffer.compare(B.slice(-5),d)===0,!b&&R&&(b=require$$0.Buffer.compare(R.slice(-3),d.slice(0,3))===0&&require$$0.Buffer.compare(B.slice(-2),d.slice(3))===0),R=B},\"onData\");w.prependListener(\"close\",A),w.on(\"data\",F),c.on(\"close\",()=>{w.removeListener(\"close\",A),w.removeListener(\"data\",F)})})}u(fixResponseChunkedTransferBadEnding,\"fixResponseChunkedTransferBadEnding\");const privateData=new WeakMap,wrappers=new WeakMap;function pd(c){const l=privateData.get(c);return console.assert(l!=null,\"'this' is expected an Event object, but got\",c),l}u(pd,\"pd\");function setCancelFlag(c){if(c.passiveListener!=null){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(\"Unable to preventDefault inside passive event listener invocation.\",c.passiveListener);return}c.event.cancelable&&(c.canceled=!0,typeof c.event.preventDefault==\"function\"&&c.event.preventDefault())}u(setCancelFlag,\"setCancelFlag\");function Event(c,l){privateData.set(this,{eventTarget:c,event:l,eventPhase:2,currentTarget:c,canceled:!1,stopped:!1,immediateStopped:!1,passiveListener:null,timeStamp:l.timeStamp||Date.now()}),Object.defineProperty(this,\"isTrusted\",{value:!1,enumerable:!0});const d=Object.keys(l);for(let y=0;y<d.length;++y){const b=d[y];b in this||Object.defineProperty(this,b,defineRedirectDescriptor(b))}}u(Event,\"Event\"),Event.prototype={get type(){return pd(this).event.type},get target(){return pd(this).eventTarget},get currentTarget(){return pd(this).currentTarget},composedPath(){const c=pd(this).currentTarget;return c==null?[]:[c]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return pd(this).eventPhase},stopPropagation(){const c=pd(this);c.stopped=!0,typeof c.event.stopPropagation==\"function\"&&c.event.stopPropagation()},stopImmediatePropagation(){const c=pd(this);c.stopped=!0,c.immediateStopped=!0,typeof c.event.stopImmediatePropagation==\"function\"&&c.event.stopImmediatePropagation()},get bubbles(){return!!pd(this).event.bubbles},get cancelable(){return!!pd(this).event.cancelable},preventDefault(){setCancelFlag(pd(this))},get defaultPrevented(){return pd(this).canceled},get composed(){return!!pd(this).event.composed},get timeStamp(){return pd(this).timeStamp},get srcElement(){return pd(this).eventTarget},get cancelBubble(){return pd(this).stopped},set cancelBubble(c){if(!c)return;const l=pd(this);l.stopped=!0,typeof l.event.cancelBubble==\"boolean\"&&(l.event.cancelBubble=!0)},get returnValue(){return!pd(this).canceled},set returnValue(c){c||setCancelFlag(pd(this))},initEvent(){}},Object.defineProperty(Event.prototype,\"constructor\",{value:Event,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.Event<\"u\"&&(Object.setPrototypeOf(Event.prototype,window.Event.prototype),wrappers.set(window.Event.prototype,Event));function defineRedirectDescriptor(c){return{get(){return pd(this).event[c]},set(l){pd(this).event[c]=l},configurable:!0,enumerable:!0}}u(defineRedirectDescriptor,\"defineRedirectDescriptor\");function defineCallDescriptor(c){return{value(){const l=pd(this).event;return l[c].apply(l,arguments)},configurable:!0,enumerable:!0}}u(defineCallDescriptor,\"defineCallDescriptor\");function defineWrapper(c,l){const d=Object.keys(l);if(d.length===0)return c;function y(b,R){c.call(this,b,R)}u(y,\"CustomEvent\"),y.prototype=Object.create(c.prototype,{constructor:{value:y,configurable:!0,writable:!0}});for(let b=0;b<d.length;++b){const R=d[b];if(!(R in c.prototype)){const A=typeof Object.getOwnPropertyDescriptor(l,R).value==\"function\";Object.defineProperty(y.prototype,R,A?defineCallDescriptor(R):defineRedirectDescriptor(R))}}return y}u(defineWrapper,\"defineWrapper\");function getWrapper(c){if(c==null||c===Object.prototype)return Event;let l=wrappers.get(c);return l==null&&(l=defineWrapper(getWrapper(Object.getPrototypeOf(c)),c),wrappers.set(c,l)),l}u(getWrapper,\"getWrapper\");function wrapEvent(c,l){const d=getWrapper(Object.getPrototypeOf(l));return new d(c,l)}u(wrapEvent,\"wrapEvent\");function isStopped(c){return pd(c).immediateStopped}u(isStopped,\"isStopped\");function setEventPhase(c,l){pd(c).eventPhase=l}u(setEventPhase,\"setEventPhase\");function setCurrentTarget(c,l){pd(c).currentTarget=l}u(setCurrentTarget,\"setCurrentTarget\");function setPassiveListener(c,l){pd(c).passiveListener=l}u(setPassiveListener,\"setPassiveListener\");const listenersMap=new WeakMap,CAPTURE=1,BUBBLE=2,ATTRIBUTE=3;function isObject(c){return c!==null&&typeof c==\"object\"}u(isObject,\"isObject\");function getListeners(c){const l=listenersMap.get(c);if(l==null)throw new TypeError(\"'this' is expected an EventTarget object, but got another value.\");return l}u(getListeners,\"getListeners\");function defineEventAttributeDescriptor(c){return{get(){let d=getListeners(this).get(c);for(;d!=null;){if(d.listenerType===ATTRIBUTE)return d.listener;d=d.next}return null},set(l){typeof l!=\"function\"&&!isObject(l)&&(l=null);const d=getListeners(this);let y=null,b=d.get(c);for(;b!=null;)b.listenerType===ATTRIBUTE?y!==null?y.next=b.next:b.next!==null?d.set(c,b.next):d.delete(c):y=b,b=b.next;if(l!==null){const R={listener:l,listenerType:ATTRIBUTE,passive:!1,once:!1,next:null};y===null?d.set(c,R):y.next=R}},configurable:!0,enumerable:!0}}u(defineEventAttributeDescriptor,\"defineEventAttributeDescriptor\");function defineEventAttribute(c,l){Object.defineProperty(c,`on${l}`,defineEventAttributeDescriptor(l))}u(defineEventAttribute,\"defineEventAttribute\");function defineCustomEventTarget(c){function l(){EventTarget.call(this)}u(l,\"CustomEventTarget\"),l.prototype=Object.create(EventTarget.prototype,{constructor:{value:l,configurable:!0,writable:!0}});for(let d=0;d<c.length;++d)defineEventAttribute(l.prototype,c[d]);return l}u(defineCustomEventTarget,\"defineCustomEventTarget\");function EventTarget(){if(this instanceof EventTarget){listenersMap.set(this,new Map);return}if(arguments.length===1&&Array.isArray(arguments[0]))return defineCustomEventTarget(arguments[0]);if(arguments.length>0){const c=new Array(arguments.length);for(let l=0;l<arguments.length;++l)c[l]=arguments[l];return defineCustomEventTarget(c)}throw new TypeError(\"Cannot call a class as a function\")}u(EventTarget,\"EventTarget\"),EventTarget.prototype={addEventListener(c,l,d){if(l==null)return;if(typeof l!=\"function\"&&!isObject(l))throw new TypeError(\"'listener' should be a function or an object.\");const y=getListeners(this),b=isObject(d),w=(b?!!d.capture:!!d)?CAPTURE:BUBBLE,A={listener:l,listenerType:w,passive:b&&!!d.passive,once:b&&!!d.once,next:null};let F=y.get(c);if(F===void 0){y.set(c,A);return}let B=null;for(;F!=null;){if(F.listener===l&&F.listenerType===w)return;B=F,F=F.next}B.next=A},removeEventListener(c,l,d){if(l==null)return;const y=getListeners(this),R=(isObject(d)?!!d.capture:!!d)?CAPTURE:BUBBLE;let w=null,A=y.get(c);for(;A!=null;){if(A.listener===l&&A.listenerType===R){w!==null?w.next=A.next:A.next!==null?y.set(c,A.next):y.delete(c);return}w=A,A=A.next}},dispatchEvent(c){if(c==null||typeof c.type!=\"string\")throw new TypeError('\"event.type\" should be a string.');const l=getListeners(this),d=c.type;let y=l.get(d);if(y==null)return!0;const b=wrapEvent(this,c);let R=null;for(;y!=null;){if(y.once?R!==null?R.next=y.next:y.next!==null?l.set(d,y.next):l.delete(d):R=y,setPassiveListener(b,y.passive?y.listener:null),typeof y.listener==\"function\")try{y.listener.call(this,b)}catch(w){typeof console<\"u\"&&typeof console.error==\"function\"&&console.error(w)}else y.listenerType!==ATTRIBUTE&&typeof y.listener.handleEvent==\"function\"&&y.listener.handleEvent(b);if(isStopped(b))break;y=y.next}return setPassiveListener(b,null),setEventPhase(b,0),setCurrentTarget(b,null),!b.defaultPrevented}},Object.defineProperty(EventTarget.prototype,\"constructor\",{value:EventTarget,configurable:!0,writable:!0}),typeof window<\"u\"&&typeof window.EventTarget<\"u\"&&Object.setPrototypeOf(EventTarget.prototype,window.EventTarget.prototype);class AbortSignal extends EventTarget{static{u(this,\"AbortSignal\")}constructor(){throw super(),new TypeError(\"AbortSignal cannot be constructed directly\")}get aborted(){const l=abortedFlags.get(this);if(typeof l!=\"boolean\")throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this===null?\"null\":typeof this}`);return l}}defineEventAttribute(AbortSignal.prototype,\"abort\");function createAbortSignal(){const c=Object.create(AbortSignal.prototype);return EventTarget.call(c),abortedFlags.set(c,!1),c}u(createAbortSignal,\"createAbortSignal\");function abortSignal(c){abortedFlags.get(c)===!1&&(abortedFlags.set(c,!0),c.dispatchEvent({type:\"abort\"}))}u(abortSignal,\"abortSignal\");const abortedFlags=new WeakMap;Object.defineProperties(AbortSignal.prototype,{aborted:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortSignal.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortSignal\"});let AbortController$1=class{static{u(this,\"AbortController\")}constructor(){signals.set(this,createAbortSignal())}get signal(){return getSignal(this)}abort(){abortSignal(getSignal(this))}};const signals=new WeakMap;function getSignal(c){const l=signals.get(c);if(l==null)throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${c===null?\"null\":typeof c}`);return l}u(getSignal,\"getSignal\"),Object.defineProperties(AbortController$1.prototype,{signal:{enumerable:!0},abort:{enumerable:!0}}),typeof Symbol==\"function\"&&typeof Symbol.toStringTag==\"symbol\"&&Object.defineProperty(AbortController$1.prototype,Symbol.toStringTag,{configurable:!0,value:\"AbortController\"});var t=Object.defineProperty,e=u((c,l)=>t(c,\"name\",{value:l,configurable:!0}),\"e\");const fetch=fetch$1;s();function s(){!globalThis.process?.versions?.node&&!globalThis.process?.env?.DISABLE_NODE_FETCH_NATIVE_WARN&&console.warn(\"[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.\")}u(s,\"s\"),e(s,\"checkNodeEnvironment\"),exports.AbortController=AbortController$1,exports.AbortError=AbortError,exports.Blob=Blob,exports.FetchError=FetchError,exports.File=File,exports.FormData=FormData,exports.Headers=Headers,exports.Request=Request,exports.Response=Response,exports.blobFrom=blobFrom,exports.blobFromSync=blobFromSync,exports[\"default\"]=fetch,exports.fetch=fetch,exports.fileFrom=fileFrom,exports.fileFromSync=fileFromSync,exports.isRedirect=isRedirect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9ub2RlLmNqcyIsIm1hcHBpbmdzIjoiQUFBYSw2QkFBNkIsMEJBQTBCLHdCQUF3QixFQUFFLDhDQUEyQyxDQUFDLFNBQVMsRUFBQyxDQUFDLFdBQVcsbUJBQU8sQ0FBQyw0QkFBVyxRQUFRLG1CQUFPLENBQUMsOEJBQVksT0FBTyxtQkFBTyxDQUFDLDRCQUFXLFNBQVMsbUJBQU8sQ0FBQyxnQ0FBYSxhQUFhLG1CQUFPLENBQUMsZ0NBQWEsZUFBZSxtQkFBTyxDQUFDLDRCQUFXLG1CQUFtQixtQkFBTyxDQUFDLGtJQUF5QyxhQUFhLG1CQUFPLENBQUMsMEJBQVUsZUFBZSxtQkFBTyxDQUFDLDBCQUFVLFVBQVUsbUJBQU8sQ0FBQyx3QkFBUyxZQUFZLG1CQUFPLENBQUMsNEJBQVcsRUFBRSxrQ0FBa0Msd0RBQXdELGlEQUFpRCxvTEFBb0wsNEJBQTRCLDhHQUE4Ryx5QkFBeUIsdUJBQXVCLDJEQUEyRCxpQ0FBaUMsR0FBRyxjQUFjLDJCQUEyQixRQUFRLFlBQVksV0FBVyxxQ0FBcUMsRUFBRSxLQUFLLHVEQUF1RCx3QkFBd0IsZ0NBQWdDLDJFQUEyRSwyQ0FBMkMscUNBQXFDLGNBQWMsb0JBQW9CLFlBQVk7QUFDL2dEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsa0NBQWtDLCtFQUErRSxlQUFlLEtBQUssOEJBQThCLGNBQWMsWUFBWSxjQUFjLDBEQUEwRCxvQkFBb0IsVUFBVSxnQkFBZ0IsSUFBSSxnQ0FBZ0Msd0JBQXdCLEVBQUUsUUFBUSx1QkFBdUIsa0VBQWtFLGNBQWMsZ0JBQWdCLGtCQUFrQixjQUFjLGtCQUFrQiwyQkFBMkIsY0FBYyxZQUFZLDJCQUEyQixrQkFBa0IscUJBQXFCLDBCQUEwQixrQkFBa0IscUJBQXFCLG1CQUFtQixnQkFBZ0IsT0FBTyx1QkFBdUIsZ0JBQWdCLGNBQWMscUJBQXFCLGtCQUFrQixnQkFBZ0IsNEJBQTRCLGNBQWMsY0FBYyxpQ0FBaUMs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LGtCQUFlLE9BQU8sYUFBYSxPQUFPLGdCQUFnQixVQUFVLG9CQUFvQixjQUFjLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL29uY2hhaW4tYWdlbnQvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9ub2RlLmNqcz9lYTMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO3ZhciBxaT1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIHU9KGMsbCk9PnFpKGMsXCJuYW1lXCIse3ZhbHVlOmwsY29uZmlndXJhYmxlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgaHR0cD1yZXF1aXJlKFwibm9kZTpodHRwXCIpLGh0dHBzPXJlcXVpcmUoXCJub2RlOmh0dHBzXCIpLHpsaWI9cmVxdWlyZShcIm5vZGU6emxpYlwiKSxTdHJlYW09cmVxdWlyZShcIm5vZGU6c3RyZWFtXCIpLHJlcXVpcmUkJDA9cmVxdWlyZShcIm5vZGU6YnVmZmVyXCIpLHJlcXVpcmUkJDAkMT1yZXF1aXJlKFwibm9kZTp1dGlsXCIpLF9jb21tb25qc0hlbHBlcnM9cmVxdWlyZShcIi4vc2hhcmVkL25vZGUtZmV0Y2gtbmF0aXZlLkRoRXFiMDZnLmNqc1wiKSxyZXF1aXJlJCQxPXJlcXVpcmUoXCJub2RlOnVybFwiKSxyZXF1aXJlJCQwJDI9cmVxdWlyZShcIm5vZGU6bmV0XCIpLG5vZGVfZnM9cmVxdWlyZShcIm5vZGU6ZnNcIiksbm9kZV9wYXRoPXJlcXVpcmUoXCJub2RlOnBhdGhcIik7ZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0Q29tcGF0KGMpe3JldHVybiBjJiZ0eXBlb2YgYz09XCJvYmplY3RcIiYmXCJkZWZhdWx0XCJpbiBjP2MuZGVmYXVsdDpjfXUoX2ludGVyb3BEZWZhdWx0Q29tcGF0LFwiX2ludGVyb3BEZWZhdWx0Q29tcGF0XCIpO2NvbnN0IGh0dHBfX2RlZmF1bHQ9X2ludGVyb3BEZWZhdWx0Q29tcGF0KGh0dHApLGh0dHBzX19kZWZhdWx0PV9pbnRlcm9wRGVmYXVsdENvbXBhdChodHRwcyksemxpYl9fZGVmYXVsdD1faW50ZXJvcERlZmF1bHRDb21wYXQoemxpYiksU3RyZWFtX19kZWZhdWx0PV9pbnRlcm9wRGVmYXVsdENvbXBhdChTdHJlYW0pO2Z1bmN0aW9uIGRhdGFVcmlUb0J1ZmZlcihjKXtpZighL15kYXRhOi9pLnRlc3QoYykpdGhyb3cgbmV3IFR5cGVFcnJvcignYHVyaWAgZG9lcyBub3QgYXBwZWFyIHRvIGJlIGEgRGF0YSBVUkkgKG11c3QgYmVnaW4gd2l0aCBcImRhdGE6XCIpJyk7Yz1jLnJlcGxhY2UoL1xccj9cXG4vZyxcIlwiKTtjb25zdCBsPWMuaW5kZXhPZihcIixcIik7aWYobD09PS0xfHxsPD00KXRocm93IG5ldyBUeXBlRXJyb3IoXCJtYWxmb3JtZWQgZGF0YTogVVJJXCIpO2NvbnN0IGQ9Yy5zdWJzdHJpbmcoNSxsKS5zcGxpdChcIjtcIik7bGV0IHk9XCJcIixiPSExO2NvbnN0IFI9ZFswXXx8XCJ0ZXh0L3BsYWluXCI7bGV0IHc9Ujtmb3IobGV0IHo9MTt6PGQubGVuZ3RoO3orKylkW3pdPT09XCJiYXNlNjRcIj9iPSEwOmRbel0mJih3Kz1gOyR7ZFt6XX1gLGRbel0uaW5kZXhPZihcImNoYXJzZXQ9XCIpPT09MCYmKHk9ZFt6XS5zdWJzdHJpbmcoOCkpKTshZFswXSYmIXkubGVuZ3RoJiYodys9XCI7Y2hhcnNldD1VUy1BU0NJSVwiLHk9XCJVUy1BU0NJSVwiKTtjb25zdCBBPWI/XCJiYXNlNjRcIjpcImFzY2lpXCIsRj11bmVzY2FwZShjLnN1YnN0cmluZyhsKzEpKSxCPUJ1ZmZlci5mcm9tKEYsQSk7cmV0dXJuIEIudHlwZT1SLEIudHlwZUZ1bGw9dyxCLmNoYXJzZXQ9eSxCfXUoZGF0YVVyaVRvQnVmZmVyLFwiZGF0YVVyaVRvQnVmZmVyXCIpO3ZhciBzdHJlYW1zPXt9LHBvbnlmaWxsX2VzMjAxOCQxPXtleHBvcnRzOnt9fTsvKipcbiAqIEBsaWNlbnNlXG4gKiB3ZWItc3RyZWFtcy1wb2x5ZmlsbCB2My4zLjNcbiAqIENvcHlyaWdodCAyMDI0IE1hdHRpYXMgQnVlbGVucywgRGl3YW5rIFNpbmdoIFRvbWVyIGFuZCBvdGhlciBjb250cmlidXRvcnMuXG4gKiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuICovdmFyIHBvbnlmaWxsX2VzMjAxOD1wb255ZmlsbF9lczIwMTgkMS5leHBvcnRzLGhhc1JlcXVpcmVkUG9ueWZpbGxfZXMyMDE4O2Z1bmN0aW9uIHJlcXVpcmVQb255ZmlsbF9lczIwMTgoKXtyZXR1cm4gaGFzUmVxdWlyZWRQb255ZmlsbF9lczIwMTh8fChoYXNSZXF1aXJlZFBvbnlmaWxsX2VzMjAxOD0xLGZ1bmN0aW9uKGMsbCl7KGZ1bmN0aW9uKGQseSl7eShsKX0pKHBvbnlmaWxsX2VzMjAxOCxmdW5jdGlvbihkKXtmdW5jdGlvbiB5KCl7fXUoeSxcIm5vb3BcIik7ZnVuY3Rpb24gYihuKXtyZXR1cm4gdHlwZW9mIG49PVwib2JqZWN0XCImJm4hPT1udWxsfHx0eXBlb2Ygbj09XCJmdW5jdGlvblwifXUoYixcInR5cGVJc09iamVjdFwiKTtjb25zdCBSPXk7ZnVuY3Rpb24gdyhuLG8pe3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkobixcIm5hbWVcIix7dmFsdWU6byxjb25maWd1cmFibGU6ITB9KX1jYXRjaHt9fXUodyxcInNldEZ1bmN0aW9uTmFtZVwiKTtjb25zdCBBPVByb21pc2UsRj1Qcm9taXNlLnByb3RvdHlwZS50aGVuLEI9UHJvbWlzZS5yZWplY3QuYmluZChBKTtmdW5jdGlvbiB6KG4pe3JldHVybiBuZXcgQShuKX11KHosXCJuZXdQcm9taXNlXCIpO2Z1bmN0aW9uIFcobil7cmV0dXJuIHoobz0+byhuKSl9dShXLFwicHJvbWlzZVJlc29sdmVkV2l0aFwiKTtmdW5jdGlvbiBUKG4pe3JldHVybiBCKG4pfXUoVCxcInByb21pc2VSZWplY3RlZFdpdGhcIik7ZnVuY3Rpb24gRChuLG8sYSl7cmV0dXJuIEYuY2FsbChuLG8sYSl9dShELFwiUGVyZm9ybVByb21pc2VUaGVuXCIpO2Z1bmN0aW9uIEUobixvLGEpe0QoRChuLG8sYSksdm9pZCAwLFIpfXUoRSxcInVwb25Qcm9taXNlXCIpO2Z1bmN0aW9uIFoobixvKXtFKG4sbyl9dShaLFwidXBvbkZ1bGZpbGxtZW50XCIpO2Z1bmN0aW9uIE0obixvKXtFKG4sdm9pZCAwLG8pfXUoTSxcInVwb25SZWplY3Rpb25cIik7ZnVuY3Rpb24gVShuLG8sYSl7cmV0dXJuIEQobixvLGEpfXUoVSxcInRyYW5zZm9ybVByb21pc2VXaXRoXCIpO2Z1bmN0aW9uIEsobil7RChuLHZvaWQgMCxSKX11KEssXCJzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlXCIpO2xldCBzZT11KG49PntpZih0eXBlb2YgcXVldWVNaWNyb3Rhc2s9PVwiZnVuY3Rpb25cIilzZT1xdWV1ZU1pY3JvdGFzaztlbHNle2NvbnN0IG89Vyh2b2lkIDApO3NlPXUoYT0+RChvLGEpLFwiX3F1ZXVlTWljcm90YXNrXCIpfXJldHVybiBzZShuKX0sXCJfcXVldWVNaWNyb3Rhc2tcIik7ZnVuY3Rpb24gJChuLG8sYSl7aWYodHlwZW9mIG4hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgZnVuY3Rpb25cIik7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKG4sbyxhKX11KCQsXCJyZWZsZWN0Q2FsbFwiKTtmdW5jdGlvbiBOKG4sbyxhKXt0cnl7cmV0dXJuIFcoJChuLG8sYSkpfWNhdGNoKHApe3JldHVybiBUKHApfX11KE4sXCJwcm9taXNlQ2FsbFwiKTtjb25zdCBWPTE2Mzg0O2NsYXNzIFF7c3RhdGlje3UodGhpcyxcIlNpbXBsZVF1ZXVlXCIpfWNvbnN0cnVjdG9yKCl7dGhpcy5fY3Vyc29yPTAsdGhpcy5fc2l6ZT0wLHRoaXMuX2Zyb250PXtfZWxlbWVudHM6W10sX25leHQ6dm9pZCAwfSx0aGlzLl9iYWNrPXRoaXMuX2Zyb250LHRoaXMuX2N1cnNvcj0wLHRoaXMuX3NpemU9MH1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX3NpemV9cHVzaChvKXtjb25zdCBhPXRoaXMuX2JhY2s7bGV0IHA9YTthLl9lbGVtZW50cy5sZW5ndGg9PT1WLTEmJihwPXtfZWxlbWVudHM6W10sX25leHQ6dm9pZCAwfSksYS5fZWxlbWVudHMucHVzaChvKSxwIT09YSYmKHRoaXMuX2JhY2s9cCxhLl9uZXh0PXApLCsrdGhpcy5fc2l6ZX1zaGlmdCgpe2NvbnN0IG89dGhpcy5fZnJvbnQ7bGV0IGE9bztjb25zdCBwPXRoaXMuX2N1cnNvcjtsZXQgZz1wKzE7Y29uc3QgXz1vLl9lbGVtZW50cyxTPV9bcF07cmV0dXJuIGc9PT1WJiYoYT1vLl9uZXh0LGc9MCksLS10aGlzLl9zaXplLHRoaXMuX2N1cnNvcj1nLG8hPT1hJiYodGhpcy5fZnJvbnQ9YSksX1twXT12b2lkIDAsU31mb3JFYWNoKG8pe2xldCBhPXRoaXMuX2N1cnNvcixwPXRoaXMuX2Zyb250LGc9cC5fZWxlbWVudHM7Zm9yKDsoYSE9PWcubGVuZ3RofHxwLl9uZXh0IT09dm9pZCAwKSYmIShhPT09Zy5sZW5ndGgmJihwPXAuX25leHQsZz1wLl9lbGVtZW50cyxhPTAsZy5sZW5ndGg9PT0wKSk7KW8oZ1thXSksKythfXBlZWsoKXtjb25zdCBvPXRoaXMuX2Zyb250LGE9dGhpcy5fY3Vyc29yO3JldHVybiBvLl9lbGVtZW50c1thXX19Y29uc3QgcnQ9U3ltYm9sKFwiW1tBYm9ydFN0ZXBzXV1cIiksd3I9U3ltYm9sKFwiW1tFcnJvclN0ZXBzXV1cIiksT3Q9U3ltYm9sKFwiW1tDYW5jZWxTdGVwc11dXCIpLEZ0PVN5bWJvbChcIltbUHVsbFN0ZXBzXV1cIiksSXQ9U3ltYm9sKFwiW1tSZWxlYXNlU3RlcHNdXVwiKTtmdW5jdGlvbiBScihuLG8pe24uX293bmVyUmVhZGFibGVTdHJlYW09byxvLl9yZWFkZXI9bixvLl9zdGF0ZT09PVwicmVhZGFibGVcIj9qdChuKTpvLl9zdGF0ZT09PVwiY2xvc2VkXCI/RG4obik6VHIobixvLl9zdG9yZWRFcnJvcil9dShScixcIlJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0luaXRpYWxpemVcIik7ZnVuY3Rpb24genQobixvKXtjb25zdCBhPW4uX293bmVyUmVhZGFibGVTdHJlYW07cmV0dXJuIG5lKGEsbyl9dSh6dCxcIlJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbFwiKTtmdW5jdGlvbiB1ZShuKXtjb25zdCBvPW4uX293bmVyUmVhZGFibGVTdHJlYW07by5fc3RhdGU9PT1cInJlYWRhYmxlXCI/THQobixuZXcgVHlwZUVycm9yKFwiUmVhZGVyIHdhcyByZWxlYXNlZCBhbmQgY2FuIG5vIGxvbmdlciBiZSB1c2VkIHRvIG1vbml0b3IgdGhlIHN0cmVhbSdzIGNsb3NlZG5lc3NcIikpOiRuKG4sbmV3IFR5cGVFcnJvcihcIlJlYWRlciB3YXMgcmVsZWFzZWQgYW5kIGNhbiBubyBsb25nZXIgYmUgdXNlZCB0byBtb25pdG9yIHRoZSBzdHJlYW0ncyBjbG9zZWRuZXNzXCIpKSxvLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXJbSXRdKCksby5fcmVhZGVyPXZvaWQgMCxuLl9vd25lclJlYWRhYmxlU3RyZWFtPXZvaWQgMH11KHVlLFwiUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZVwiKTtmdW5jdGlvbiBudChuKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBcIituK1wiIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgcmVhZGVyXCIpfXUobnQsXCJyZWFkZXJMb2NrRXhjZXB0aW9uXCIpO2Z1bmN0aW9uIGp0KG4pe24uX2Nsb3NlZFByb21pc2U9eigobyxhKT0+e24uX2Nsb3NlZFByb21pc2VfcmVzb2x2ZT1vLG4uX2Nsb3NlZFByb21pc2VfcmVqZWN0PWF9KX11KGp0LFwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplXCIpO2Z1bmN0aW9uIFRyKG4sbyl7anQobiksTHQobixvKX11KFRyLFwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZFwiKTtmdW5jdGlvbiBEbihuKXtqdChuKSxDcihuKX11KERuLFwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZFwiKTtmdW5jdGlvbiBMdChuLG8pe24uX2Nsb3NlZFByb21pc2VfcmVqZWN0IT09dm9pZCAwJiYoSyhuLl9jbG9zZWRQcm9taXNlKSxuLl9jbG9zZWRQcm9taXNlX3JlamVjdChvKSxuLl9jbG9zZWRQcm9taXNlX3Jlc29sdmU9dm9pZCAwLG4uX2Nsb3NlZFByb21pc2VfcmVqZWN0PXZvaWQgMCl9dShMdCxcImRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVqZWN0XCIpO2Z1bmN0aW9uICRuKG4sbyl7VHIobixvKX11KCRuLFwiZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWRcIik7ZnVuY3Rpb24gQ3Iobil7bi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlIT09dm9pZCAwJiYobi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlKHZvaWQgMCksbi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxuLl9jbG9zZWRQcm9taXNlX3JlamVjdD12b2lkIDApfXUoQ3IsXCJkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc29sdmVcIik7Y29uc3QgUHI9TnVtYmVyLmlzRmluaXRlfHxmdW5jdGlvbihuKXtyZXR1cm4gdHlwZW9mIG49PVwibnVtYmVyXCImJmlzRmluaXRlKG4pfSxNbj1NYXRoLnRydW5jfHxmdW5jdGlvbihuKXtyZXR1cm4gbjwwP01hdGguY2VpbChuKTpNYXRoLmZsb29yKG4pfTtmdW5jdGlvbiB4bihuKXtyZXR1cm4gdHlwZW9mIG49PVwib2JqZWN0XCJ8fHR5cGVvZiBuPT1cImZ1bmN0aW9uXCJ9dSh4bixcImlzRGljdGlvbmFyeVwiKTtmdW5jdGlvbiBpZShuLG8pe2lmKG4hPT12b2lkIDAmJiF4bihuKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke299IGlzIG5vdCBhbiBvYmplY3QuYCl9dShpZSxcImFzc2VydERpY3Rpb25hcnlcIik7ZnVuY3Rpb24gWChuLG8pe2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtvfSBpcyBub3QgYSBmdW5jdGlvbi5gKX11KFgsXCJhc3NlcnRGdW5jdGlvblwiKTtmdW5jdGlvbiBVbihuKXtyZXR1cm4gdHlwZW9mIG49PVwib2JqZWN0XCImJm4hPT1udWxsfHx0eXBlb2Ygbj09XCJmdW5jdGlvblwifXUoVW4sXCJpc09iamVjdFwiKTtmdW5jdGlvbiBFcihuLG8pe2lmKCFVbihuKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke299IGlzIG5vdCBhbiBvYmplY3QuYCl9dShFcixcImFzc2VydE9iamVjdFwiKTtmdW5jdGlvbiBsZShuLG8sYSl7aWYobj09PXZvaWQgMCl0aHJvdyBuZXcgVHlwZUVycm9yKGBQYXJhbWV0ZXIgJHtvfSBpcyByZXF1aXJlZCBpbiAnJHthfScuYCl9dShsZSxcImFzc2VydFJlcXVpcmVkQXJndW1lbnRcIik7ZnVuY3Rpb24gRHQobixvLGEpe2lmKG49PT12b2lkIDApdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtvfSBpcyByZXF1aXJlZCBpbiAnJHthfScuYCl9dShEdCxcImFzc2VydFJlcXVpcmVkRmllbGRcIik7ZnVuY3Rpb24gJHQobil7cmV0dXJuIE51bWJlcihuKX11KCR0LFwiY29udmVydFVucmVzdHJpY3RlZERvdWJsZVwiKTtmdW5jdGlvbiB2cihuKXtyZXR1cm4gbj09PTA/MDpufXUodnIsXCJjZW5zb3JOZWdhdGl2ZVplcm9cIik7ZnVuY3Rpb24gTm4obil7cmV0dXJuIHZyKE1uKG4pKX11KE5uLFwiaW50ZWdlclBhcnRcIik7ZnVuY3Rpb24gTXQobixvKXtjb25zdCBwPU51bWJlci5NQVhfU0FGRV9JTlRFR0VSO2xldCBnPU51bWJlcihuKTtpZihnPXZyKGcpLCFQcihnKSl0aHJvdyBuZXcgVHlwZUVycm9yKGAke299IGlzIG5vdCBhIGZpbml0ZSBudW1iZXJgKTtpZihnPU5uKGcpLGc8MHx8Zz5wKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7b30gaXMgb3V0c2lkZSB0aGUgYWNjZXB0ZWQgcmFuZ2Ugb2YgMCB0byAke3B9LCBpbmNsdXNpdmVgKTtyZXR1cm4hUHIoZyl8fGc9PT0wPzA6Z311KE10LFwiY29udmVydFVuc2lnbmVkTG9uZ0xvbmdXaXRoRW5mb3JjZVJhbmdlXCIpO2Z1bmN0aW9uIHh0KG4sbyl7aWYoIVJlKG4pKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7b30gaXMgbm90IGEgUmVhZGFibGVTdHJlYW0uYCl9dSh4dCxcImFzc2VydFJlYWRhYmxlU3RyZWFtXCIpO2Z1bmN0aW9uIEZlKG4pe3JldHVybiBuZXcgbWUobil9dShGZSxcIkFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJcIik7ZnVuY3Rpb24gQXIobixvKXtuLl9yZWFkZXIuX3JlYWRSZXF1ZXN0cy5wdXNoKG8pfXUoQXIsXCJSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0XCIpO2Z1bmN0aW9uIFV0KG4sbyxhKXtjb25zdCBnPW4uX3JlYWRlci5fcmVhZFJlcXVlc3RzLnNoaWZ0KCk7YT9nLl9jbG9zZVN0ZXBzKCk6Zy5fY2h1bmtTdGVwcyhvKX11KFV0LFwiUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3RcIik7ZnVuY3Rpb24gb3Qobil7cmV0dXJuIG4uX3JlYWRlci5fcmVhZFJlcXVlc3RzLmxlbmd0aH11KG90LFwiUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkUmVxdWVzdHNcIik7ZnVuY3Rpb24gQnIobil7Y29uc3Qgbz1uLl9yZWFkZXI7cmV0dXJuIShvPT09dm9pZCAwfHwheWUobykpfXUoQnIsXCJSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXJcIik7Y2xhc3MgbWV7c3RhdGlje3UodGhpcyxcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclwiKX1jb25zdHJ1Y3RvcihvKXtpZihsZShvLDEsXCJSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJcIikseHQobyxcIkZpcnN0IHBhcmFtZXRlclwiKSxUZShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSByZWFkaW5nIGJ5IGFub3RoZXIgcmVhZGVyXCIpO1JyKHRoaXMsbyksdGhpcy5fcmVhZFJlcXVlc3RzPW5ldyBRfWdldCBjbG9zZWQoKXtyZXR1cm4geWUodGhpcyk/dGhpcy5fY2xvc2VkUHJvbWlzZTpUKGl0KFwiY2xvc2VkXCIpKX1jYW5jZWwobz12b2lkIDApe3JldHVybiB5ZSh0aGlzKT90aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtPT09dm9pZCAwP1QobnQoXCJjYW5jZWxcIikpOnp0KHRoaXMsbyk6VChpdChcImNhbmNlbFwiKSl9cmVhZCgpe2lmKCF5ZSh0aGlzKSlyZXR1cm4gVChpdChcInJlYWRcIikpO2lmKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW09PT12b2lkIDApcmV0dXJuIFQobnQoXCJyZWFkIGZyb21cIikpO2xldCBvLGE7Y29uc3QgcD16KChfLFMpPT57bz1fLGE9U30pO3JldHVybiBWZSh0aGlzLHtfY2h1bmtTdGVwczp1KF89Pm8oe3ZhbHVlOl8sZG9uZTohMX0pLFwiX2NodW5rU3RlcHNcIiksX2Nsb3NlU3RlcHM6dSgoKT0+byh7dmFsdWU6dm9pZCAwLGRvbmU6ITB9KSxcIl9jbG9zZVN0ZXBzXCIpLF9lcnJvclN0ZXBzOnUoXz0+YShfKSxcIl9lcnJvclN0ZXBzXCIpfSkscH1yZWxlYXNlTG9jaygpe2lmKCF5ZSh0aGlzKSl0aHJvdyBpdChcInJlbGVhc2VMb2NrXCIpO3RoaXMuX293bmVyUmVhZGFibGVTdHJlYW0hPT12b2lkIDAmJkhuKHRoaXMpfX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhtZS5wcm90b3R5cGUse2NhbmNlbDp7ZW51bWVyYWJsZTohMH0scmVhZDp7ZW51bWVyYWJsZTohMH0scmVsZWFzZUxvY2s6e2VudW1lcmFibGU6ITB9LGNsb3NlZDp7ZW51bWVyYWJsZTohMH19KSx3KG1lLnByb3RvdHlwZS5jYW5jZWwsXCJjYW5jZWxcIiksdyhtZS5wcm90b3R5cGUucmVhZCxcInJlYWRcIiksdyhtZS5wcm90b3R5cGUucmVsZWFzZUxvY2ssXCJyZWxlYXNlTG9ja1wiKSx0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnPT1cInN5bWJvbFwiJiZPYmplY3QuZGVmaW5lUHJvcGVydHkobWUucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJcIixjb25maWd1cmFibGU6ITB9KTtmdW5jdGlvbiB5ZShuKXtyZXR1cm4hYihuKXx8IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiX3JlYWRSZXF1ZXN0c1wiKT8hMTpuIGluc3RhbmNlb2YgbWV9dSh5ZSxcIklzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyXCIpO2Z1bmN0aW9uIFZlKG4sbyl7Y29uc3QgYT1uLl9vd25lclJlYWRhYmxlU3RyZWFtO2EuX2Rpc3R1cmJlZD0hMCxhLl9zdGF0ZT09PVwiY2xvc2VkXCI/by5fY2xvc2VTdGVwcygpOmEuX3N0YXRlPT09XCJlcnJvcmVkXCI/by5fZXJyb3JTdGVwcyhhLl9zdG9yZWRFcnJvcik6YS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyW0Z0XShvKX11KFZlLFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZFwiKTtmdW5jdGlvbiBIbihuKXt1ZShuKTtjb25zdCBvPW5ldyBUeXBlRXJyb3IoXCJSZWFkZXIgd2FzIHJlbGVhc2VkXCIpO3FyKG4sbyl9dShIbixcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlbGVhc2VcIik7ZnVuY3Rpb24gcXIobixvKXtjb25zdCBhPW4uX3JlYWRSZXF1ZXN0cztuLl9yZWFkUmVxdWVzdHM9bmV3IFEsYS5mb3JFYWNoKHA9PntwLl9lcnJvclN0ZXBzKG8pfSl9dShxcixcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlckVycm9yUmVhZFJlcXVlc3RzXCIpO2Z1bmN0aW9uIGl0KG4pe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLiR7bn0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcmApfXUoaXQsXCJkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvblwiKTtjb25zdCBWbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFzeW5jIGZ1bmN0aW9uKigpe30pLnByb3RvdHlwZSk7Y2xhc3MgV3J7c3RhdGlje3UodGhpcyxcIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvckltcGxcIil9Y29uc3RydWN0b3IobyxhKXt0aGlzLl9vbmdvaW5nUHJvbWlzZT12b2lkIDAsdGhpcy5faXNGaW5pc2hlZD0hMSx0aGlzLl9yZWFkZXI9byx0aGlzLl9wcmV2ZW50Q2FuY2VsPWF9bmV4dCgpe2NvbnN0IG89dSgoKT0+dGhpcy5fbmV4dFN0ZXBzKCksXCJuZXh0U3RlcHNcIik7cmV0dXJuIHRoaXMuX29uZ29pbmdQcm9taXNlPXRoaXMuX29uZ29pbmdQcm9taXNlP1UodGhpcy5fb25nb2luZ1Byb21pc2UsbyxvKTpvKCksdGhpcy5fb25nb2luZ1Byb21pc2V9cmV0dXJuKG8pe2NvbnN0IGE9dSgoKT0+dGhpcy5fcmV0dXJuU3RlcHMobyksXCJyZXR1cm5TdGVwc1wiKTtyZXR1cm4gdGhpcy5fb25nb2luZ1Byb21pc2U/VSh0aGlzLl9vbmdvaW5nUHJvbWlzZSxhLGEpOmEoKX1fbmV4dFN0ZXBzKCl7aWYodGhpcy5faXNGaW5pc2hlZClyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt2YWx1ZTp2b2lkIDAsZG9uZTohMH0pO2NvbnN0IG89dGhpcy5fcmVhZGVyO2xldCBhLHA7Y29uc3QgZz16KChTLEMpPT57YT1TLHA9Q30pO3JldHVybiBWZShvLHtfY2h1bmtTdGVwczp1KFM9Pnt0aGlzLl9vbmdvaW5nUHJvbWlzZT12b2lkIDAsc2UoKCk9PmEoe3ZhbHVlOlMsZG9uZTohMX0pKX0sXCJfY2h1bmtTdGVwc1wiKSxfY2xvc2VTdGVwczp1KCgpPT57dGhpcy5fb25nb2luZ1Byb21pc2U9dm9pZCAwLHRoaXMuX2lzRmluaXNoZWQ9ITAsdWUobyksYSh7dmFsdWU6dm9pZCAwLGRvbmU6ITB9KX0sXCJfY2xvc2VTdGVwc1wiKSxfZXJyb3JTdGVwczp1KFM9Pnt0aGlzLl9vbmdvaW5nUHJvbWlzZT12b2lkIDAsdGhpcy5faXNGaW5pc2hlZD0hMCx1ZShvKSxwKFMpfSxcIl9lcnJvclN0ZXBzXCIpfSksZ31fcmV0dXJuU3RlcHMobyl7aWYodGhpcy5faXNGaW5pc2hlZClyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHt2YWx1ZTpvLGRvbmU6ITB9KTt0aGlzLl9pc0ZpbmlzaGVkPSEwO2NvbnN0IGE9dGhpcy5fcmVhZGVyO2lmKCF0aGlzLl9wcmV2ZW50Q2FuY2VsKXtjb25zdCBwPXp0KGEsbyk7cmV0dXJuIHVlKGEpLFUocCwoKT0+KHt2YWx1ZTpvLGRvbmU6ITB9KSl9cmV0dXJuIHVlKGEpLFcoe3ZhbHVlOm8sZG9uZTohMH0pfX1jb25zdCBrcj17bmV4dCgpe3JldHVybiBPcih0aGlzKT90aGlzLl9hc3luY0l0ZXJhdG9ySW1wbC5uZXh0KCk6VChGcihcIm5leHRcIikpfSxyZXR1cm4obil7cmV0dXJuIE9yKHRoaXMpP3RoaXMuX2FzeW5jSXRlcmF0b3JJbXBsLnJldHVybihuKTpUKEZyKFwicmV0dXJuXCIpKX19O09iamVjdC5zZXRQcm90b3R5cGVPZihrcixWbik7ZnVuY3Rpb24gUW4obixvKXtjb25zdCBhPUZlKG4pLHA9bmV3IFdyKGEsbyksZz1PYmplY3QuY3JlYXRlKGtyKTtyZXR1cm4gZy5fYXN5bmNJdGVyYXRvckltcGw9cCxnfXUoUW4sXCJBY3F1aXJlUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yXCIpO2Z1bmN0aW9uIE9yKG4pe2lmKCFiKG4pfHwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJfYXN5bmNJdGVyYXRvckltcGxcIikpcmV0dXJuITE7dHJ5e3JldHVybiBuLl9hc3luY0l0ZXJhdG9ySW1wbCBpbnN0YW5jZW9mIFdyfWNhdGNoe3JldHVybiExfX11KE9yLFwiSXNSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JcIik7ZnVuY3Rpb24gRnIobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvci4ke259IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0ZWFtQXN5bmNJdGVyYXRvcmApfXUoRnIsXCJzdHJlYW1Bc3luY0l0ZXJhdG9yQnJhbmRDaGVja0V4Y2VwdGlvblwiKTtjb25zdCBJcj1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKG4pe3JldHVybiBuIT09bn07dmFyIE50LEh0LFZ0O2Z1bmN0aW9uIFFlKG4pe3JldHVybiBuLnNsaWNlKCl9dShRZSxcIkNyZWF0ZUFycmF5RnJvbUxpc3RcIik7ZnVuY3Rpb24genIobixvLGEscCxnKXtuZXcgVWludDhBcnJheShuKS5zZXQobmV3IFVpbnQ4QXJyYXkoYSxwLGcpLG8pfXUoenIsXCJDb3B5RGF0YUJsb2NrQnl0ZXNcIik7bGV0IGZlPXUobj0+KHR5cGVvZiBuLnRyYW5zZmVyPT1cImZ1bmN0aW9uXCI/ZmU9dShvPT5vLnRyYW5zZmVyKCksXCJUcmFuc2ZlckFycmF5QnVmZmVyXCIpOnR5cGVvZiBzdHJ1Y3R1cmVkQ2xvbmU9PVwiZnVuY3Rpb25cIj9mZT11KG89PnN0cnVjdHVyZWRDbG9uZShvLHt0cmFuc2Zlcjpbb119KSxcIlRyYW5zZmVyQXJyYXlCdWZmZXJcIik6ZmU9dShvPT5vLFwiVHJhbnNmZXJBcnJheUJ1ZmZlclwiKSxmZShuKSksXCJUcmFuc2ZlckFycmF5QnVmZmVyXCIpLGdlPXUobj0+KHR5cGVvZiBuLmRldGFjaGVkPT1cImJvb2xlYW5cIj9nZT11KG89Pm8uZGV0YWNoZWQsXCJJc0RldGFjaGVkQnVmZmVyXCIpOmdlPXUobz0+by5ieXRlTGVuZ3RoPT09MCxcIklzRGV0YWNoZWRCdWZmZXJcIiksZ2UobikpLFwiSXNEZXRhY2hlZEJ1ZmZlclwiKTtmdW5jdGlvbiBqcihuLG8sYSl7aWYobi5zbGljZSlyZXR1cm4gbi5zbGljZShvLGEpO2NvbnN0IHA9YS1vLGc9bmV3IEFycmF5QnVmZmVyKHApO3JldHVybiB6cihnLDAsbixvLHApLGd9dShqcixcIkFycmF5QnVmZmVyU2xpY2VcIik7ZnVuY3Rpb24gYXQobixvKXtjb25zdCBhPW5bb107aWYoYSE9bnVsbCl7aWYodHlwZW9mIGEhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKGAke1N0cmluZyhvKX0gaXMgbm90IGEgZnVuY3Rpb25gKTtyZXR1cm4gYX19dShhdCxcIkdldE1ldGhvZFwiKTtmdW5jdGlvbiBZbihuKXtjb25zdCBvPXtbU3ltYm9sLml0ZXJhdG9yXTooKT0+bi5pdGVyYXRvcn0sYT1hc3luYyBmdW5jdGlvbiooKXtyZXR1cm4geWllbGQqb30oKSxwPWEubmV4dDtyZXR1cm57aXRlcmF0b3I6YSxuZXh0TWV0aG9kOnAsZG9uZTohMX19dShZbixcIkNyZWF0ZUFzeW5jRnJvbVN5bmNJdGVyYXRvclwiKTtjb25zdCBRdD0oVnQ9KE50PVN5bWJvbC5hc3luY0l0ZXJhdG9yKSE9PW51bGwmJk50IT09dm9pZCAwP050OihIdD1TeW1ib2wuZm9yKT09PW51bGx8fEh0PT09dm9pZCAwP3ZvaWQgMDpIdC5jYWxsKFN5bWJvbCxcIlN5bWJvbC5hc3luY0l0ZXJhdG9yXCIpKSE9PW51bGwmJlZ0IT09dm9pZCAwP1Z0OlwiQEBhc3luY0l0ZXJhdG9yXCI7ZnVuY3Rpb24gTHIobixvPVwic3luY1wiLGEpe2lmKGE9PT12b2lkIDApaWYobz09PVwiYXN5bmNcIil7aWYoYT1hdChuLFF0KSxhPT09dm9pZCAwKXtjb25zdCBfPWF0KG4sU3ltYm9sLml0ZXJhdG9yKSxTPUxyKG4sXCJzeW5jXCIsXyk7cmV0dXJuIFluKFMpfX1lbHNlIGE9YXQobixTeW1ib2wuaXRlcmF0b3IpO2lmKGE9PT12b2lkIDApdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBvYmplY3QgaXMgbm90IGl0ZXJhYmxlXCIpO2NvbnN0IHA9JChhLG4sW10pO2lmKCFiKHApKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgaXRlcmF0b3IgbWV0aG9kIG11c3QgcmV0dXJuIGFuIG9iamVjdFwiKTtjb25zdCBnPXAubmV4dDtyZXR1cm57aXRlcmF0b3I6cCxuZXh0TWV0aG9kOmcsZG9uZTohMX19dShMcixcIkdldEl0ZXJhdG9yXCIpO2Z1bmN0aW9uIEduKG4pe2NvbnN0IG89JChuLm5leHRNZXRob2Qsbi5pdGVyYXRvcixbXSk7aWYoIWIobykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvci5uZXh0KCkgbWV0aG9kIG11c3QgcmV0dXJuIGFuIG9iamVjdFwiKTtyZXR1cm4gb311KEduLFwiSXRlcmF0b3JOZXh0XCIpO2Z1bmN0aW9uIFpuKG4pe3JldHVybiEhbi5kb25lfXUoWm4sXCJJdGVyYXRvckNvbXBsZXRlXCIpO2Z1bmN0aW9uIEtuKG4pe3JldHVybiBuLnZhbHVlfXUoS24sXCJJdGVyYXRvclZhbHVlXCIpO2Z1bmN0aW9uIEpuKG4pe3JldHVybiEodHlwZW9mIG4hPVwibnVtYmVyXCJ8fElyKG4pfHxuPDApfXUoSm4sXCJJc05vbk5lZ2F0aXZlTnVtYmVyXCIpO2Z1bmN0aW9uIERyKG4pe2NvbnN0IG89anIobi5idWZmZXIsbi5ieXRlT2Zmc2V0LG4uYnl0ZU9mZnNldCtuLmJ5dGVMZW5ndGgpO3JldHVybiBuZXcgVWludDhBcnJheShvKX11KERyLFwiQ2xvbmVBc1VpbnQ4QXJyYXlcIik7ZnVuY3Rpb24gWXQobil7Y29uc3Qgbz1uLl9xdWV1ZS5zaGlmdCgpO3JldHVybiBuLl9xdWV1ZVRvdGFsU2l6ZS09by5zaXplLG4uX3F1ZXVlVG90YWxTaXplPDAmJihuLl9xdWV1ZVRvdGFsU2l6ZT0wKSxvLnZhbHVlfXUoWXQsXCJEZXF1ZXVlVmFsdWVcIik7ZnVuY3Rpb24gR3QobixvLGEpe2lmKCFKbihhKXx8YT09PTEvMCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlNpemUgbXVzdCBiZSBhIGZpbml0ZSwgbm9uLU5hTiwgbm9uLW5lZ2F0aXZlIG51bWJlci5cIik7bi5fcXVldWUucHVzaCh7dmFsdWU6byxzaXplOmF9KSxuLl9xdWV1ZVRvdGFsU2l6ZSs9YX11KEd0LFwiRW5xdWV1ZVZhbHVlV2l0aFNpemVcIik7ZnVuY3Rpb24gWG4obil7cmV0dXJuIG4uX3F1ZXVlLnBlZWsoKS52YWx1ZX11KFhuLFwiUGVla1F1ZXVlVmFsdWVcIik7ZnVuY3Rpb24gX2Uobil7bi5fcXVldWU9bmV3IFEsbi5fcXVldWVUb3RhbFNpemU9MH11KF9lLFwiUmVzZXRRdWV1ZVwiKTtmdW5jdGlvbiAkcihuKXtyZXR1cm4gbj09PURhdGFWaWV3fXUoJHIsXCJpc0RhdGFWaWV3Q29uc3RydWN0b3JcIik7ZnVuY3Rpb24gZW8obil7cmV0dXJuICRyKG4uY29uc3RydWN0b3IpfXUoZW8sXCJpc0RhdGFWaWV3XCIpO2Z1bmN0aW9uIHRvKG4pe3JldHVybiAkcihuKT8xOm4uQllURVNfUEVSX0VMRU1FTlR9dSh0byxcImFycmF5QnVmZmVyVmlld0VsZW1lbnRTaXplXCIpO2NsYXNzIEVle3N0YXRpY3t1KHRoaXMsXCJSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0XCIpfWNvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3JcIil9Z2V0IHZpZXcoKXtpZighWnQodGhpcykpdGhyb3cgdHIoXCJ2aWV3XCIpO3JldHVybiB0aGlzLl92aWV3fXJlc3BvbmQobyl7aWYoIVp0KHRoaXMpKXRocm93IHRyKFwicmVzcG9uZFwiKTtpZihsZShvLDEsXCJyZXNwb25kXCIpLG89TXQobyxcIkZpcnN0IHBhcmFtZXRlclwiKSx0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcj09PXZvaWQgMCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBCWU9CIHJlcXVlc3QgaGFzIGJlZW4gaW52YWxpZGF0ZWRcIik7aWYoZ2UodGhpcy5fdmlldy5idWZmZXIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgQllPQiByZXF1ZXN0J3MgYnVmZmVyIGhhcyBiZWVuIGRldGFjaGVkIGFuZCBzbyBjYW5ub3QgYmUgdXNlZCBhcyBhIHJlc3BvbnNlXCIpO2Z0KHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLG8pfXJlc3BvbmRXaXRoTmV3VmlldyhvKXtpZighWnQodGhpcykpdGhyb3cgdHIoXCJyZXNwb25kV2l0aE5ld1ZpZXdcIik7aWYobGUobywxLFwicmVzcG9uZFdpdGhOZXdWaWV3XCIpLCFBcnJheUJ1ZmZlci5pc1ZpZXcobykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBjYW4gb25seSByZXNwb25kIHdpdGggYXJyYXkgYnVmZmVyIHZpZXdzXCIpO2lmKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyPT09dm9pZCAwKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZFwiKTtpZihnZShvLmJ1ZmZlcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBnaXZlbiB2aWV3J3MgYnVmZmVyIGhhcyBiZWVuIGRldGFjaGVkIGFuZCBzbyBjYW5ub3QgYmUgdXNlZCBhcyBhIHJlc3BvbnNlXCIpO2N0KHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLG8pfX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhFZS5wcm90b3R5cGUse3Jlc3BvbmQ6e2VudW1lcmFibGU6ITB9LHJlc3BvbmRXaXRoTmV3Vmlldzp7ZW51bWVyYWJsZTohMH0sdmlldzp7ZW51bWVyYWJsZTohMH19KSx3KEVlLnByb3RvdHlwZS5yZXNwb25kLFwicmVzcG9uZFwiKSx3KEVlLnByb3RvdHlwZS5yZXNwb25kV2l0aE5ld1ZpZXcsXCJyZXNwb25kV2l0aE5ld1ZpZXdcIiksdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZz09XCJzeW1ib2xcIiYmT2JqZWN0LmRlZmluZVByb3BlcnR5KEVlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdFwiLGNvbmZpZ3VyYWJsZTohMH0pO2NsYXNzIGNle3N0YXRpY3t1KHRoaXMsXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyXCIpfWNvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3JcIil9Z2V0IGJ5b2JSZXF1ZXN0KCl7aWYoIXZlKHRoaXMpKXRocm93IEdlKFwiYnlvYlJlcXVlc3RcIik7cmV0dXJuIGVyKHRoaXMpfWdldCBkZXNpcmVkU2l6ZSgpe2lmKCF2ZSh0aGlzKSl0aHJvdyBHZShcImRlc2lyZWRTaXplXCIpO3JldHVybiBacih0aGlzKX1jbG9zZSgpe2lmKCF2ZSh0aGlzKSl0aHJvdyBHZShcImNsb3NlXCIpO2lmKHRoaXMuX2Nsb3NlUmVxdWVzdGVkKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkOyBkbyBub3QgY2xvc2UgaXQgYWdhaW4hXCIpO2NvbnN0IG89dGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7aWYobyE9PVwicmVhZGFibGVcIil0aHJvdyBuZXcgVHlwZUVycm9yKGBUaGUgc3RyZWFtIChpbiAke299IHN0YXRlKSBpcyBub3QgaW4gdGhlIHJlYWRhYmxlIHN0YXRlIGFuZCBjYW5ub3QgYmUgY2xvc2VkYCk7WWUodGhpcyl9ZW5xdWV1ZShvKXtpZighdmUodGhpcykpdGhyb3cgR2UoXCJlbnF1ZXVlXCIpO2lmKGxlKG8sMSxcImVucXVldWVcIiksIUFycmF5QnVmZmVyLmlzVmlldyhvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2h1bmsgbXVzdCBiZSBhbiBhcnJheSBidWZmZXIgdmlld1wiKTtpZihvLmJ5dGVMZW5ndGg9PT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXCJjaHVuayBtdXN0IGhhdmUgbm9uLXplcm8gYnl0ZUxlbmd0aFwiKTtpZihvLmJ1ZmZlci5ieXRlTGVuZ3RoPT09MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2h1bmsncyBidWZmZXIgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGhcIik7aWYodGhpcy5fY2xvc2VSZXF1ZXN0ZWQpdGhyb3cgbmV3IFR5cGVFcnJvcihcInN0cmVhbSBpcyBjbG9zZWQgb3IgZHJhaW5pbmdcIik7Y29uc3QgYT10aGlzLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtpZihhIT09XCJyZWFkYWJsZVwiKXRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBzdHJlYW0gKGluICR7YX0gc3RhdGUpIGlzIG5vdCBpbiB0aGUgcmVhZGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBlbnF1ZXVlZCB0b2ApO2x0KHRoaXMsbyl9ZXJyb3Iobz12b2lkIDApe2lmKCF2ZSh0aGlzKSl0aHJvdyBHZShcImVycm9yXCIpO2VlKHRoaXMsbyl9W090XShvKXtNcih0aGlzKSxfZSh0aGlzKTtjb25zdCBhPXRoaXMuX2NhbmNlbEFsZ29yaXRobShvKTtyZXR1cm4gdXQodGhpcyksYX1bRnRdKG8pe2NvbnN0IGE9dGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtpZih0aGlzLl9xdWV1ZVRvdGFsU2l6ZT4wKXtHcih0aGlzLG8pO3JldHVybn1jb25zdCBwPXRoaXMuX2F1dG9BbGxvY2F0ZUNodW5rU2l6ZTtpZihwIT09dm9pZCAwKXtsZXQgZzt0cnl7Zz1uZXcgQXJyYXlCdWZmZXIocCl9Y2F0Y2goUyl7by5fZXJyb3JTdGVwcyhTKTtyZXR1cm59Y29uc3QgXz17YnVmZmVyOmcsYnVmZmVyQnl0ZUxlbmd0aDpwLGJ5dGVPZmZzZXQ6MCxieXRlTGVuZ3RoOnAsYnl0ZXNGaWxsZWQ6MCxtaW5pbXVtRmlsbDoxLGVsZW1lbnRTaXplOjEsdmlld0NvbnN0cnVjdG9yOlVpbnQ4QXJyYXkscmVhZGVyVHlwZTpcImRlZmF1bHRcIn07dGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5wdXNoKF8pfUFyKGEsbyksQWUodGhpcyl9W0l0XSgpe2lmKHRoaXMuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoPjApe2NvbnN0IG89dGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7by5yZWFkZXJUeXBlPVwibm9uZVwiLHRoaXMuX3BlbmRpbmdQdWxsSW50b3M9bmV3IFEsdGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5wdXNoKG8pfX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2UucHJvdG90eXBlLHtjbG9zZTp7ZW51bWVyYWJsZTohMH0sZW5xdWV1ZTp7ZW51bWVyYWJsZTohMH0sZXJyb3I6e2VudW1lcmFibGU6ITB9LGJ5b2JSZXF1ZXN0OntlbnVtZXJhYmxlOiEwfSxkZXNpcmVkU2l6ZTp7ZW51bWVyYWJsZTohMH19KSx3KGNlLnByb3RvdHlwZS5jbG9zZSxcImNsb3NlXCIpLHcoY2UucHJvdG90eXBlLmVucXVldWUsXCJlbnF1ZXVlXCIpLHcoY2UucHJvdG90eXBlLmVycm9yLFwiZXJyb3JcIiksdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZz09XCJzeW1ib2xcIiYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGNlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2Z1bmN0aW9uIHZlKG4pe3JldHVybiFiKG4pfHwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJfY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbVwiKT8hMTpuIGluc3RhbmNlb2YgY2V9dSh2ZSxcIklzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclwiKTtmdW5jdGlvbiBadChuKXtyZXR1cm4hYihuKXx8IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyXCIpPyExOm4gaW5zdGFuY2VvZiBFZX11KFp0LFwiSXNSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0XCIpO2Z1bmN0aW9uIEFlKG4pe2lmKCFhbyhuKSlyZXR1cm47aWYobi5fcHVsbGluZyl7bi5fcHVsbEFnYWluPSEwO3JldHVybn1uLl9wdWxsaW5nPSEwO2NvbnN0IGE9bi5fcHVsbEFsZ29yaXRobSgpO0UoYSwoKT0+KG4uX3B1bGxpbmc9ITEsbi5fcHVsbEFnYWluJiYobi5fcHVsbEFnYWluPSExLEFlKG4pKSxudWxsKSxwPT4oZWUobixwKSxudWxsKSl9dShBZSxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkXCIpO2Z1bmN0aW9uIE1yKG4pe0p0KG4pLG4uX3BlbmRpbmdQdWxsSW50b3M9bmV3IFF9dShNcixcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhclBlbmRpbmdQdWxsSW50b3NcIik7ZnVuY3Rpb24gS3QobixvKXtsZXQgYT0hMTtuLl9zdGF0ZT09PVwiY2xvc2VkXCImJihhPSEwKTtjb25zdCBwPXhyKG8pO28ucmVhZGVyVHlwZT09PVwiZGVmYXVsdFwiP1V0KG4scCxhKTpobyhuLHAsYSl9dShLdCxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb21taXRQdWxsSW50b0Rlc2NyaXB0b3JcIik7ZnVuY3Rpb24geHIobil7Y29uc3Qgbz1uLmJ5dGVzRmlsbGVkLGE9bi5lbGVtZW50U2l6ZTtyZXR1cm4gbmV3IG4udmlld0NvbnN0cnVjdG9yKG4uYnVmZmVyLG4uYnl0ZU9mZnNldCxvL2EpfXUoeHIsXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvclwiKTtmdW5jdGlvbiBzdChuLG8sYSxwKXtuLl9xdWV1ZS5wdXNoKHtidWZmZXI6byxieXRlT2Zmc2V0OmEsYnl0ZUxlbmd0aDpwfSksbi5fcXVldWVUb3RhbFNpemUrPXB9dShzdCxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlXCIpO2Z1bmN0aW9uIFVyKG4sbyxhLHApe2xldCBnO3RyeXtnPWpyKG8sYSxhK3ApfWNhdGNoKF8pe3Rocm93IGVlKG4sXyksX31zdChuLGcsMCxwKX11KFVyLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDbG9uZWRDaHVua1RvUXVldWVcIik7ZnVuY3Rpb24gTnIobixvKXtvLmJ5dGVzRmlsbGVkPjAmJlVyKG4sby5idWZmZXIsby5ieXRlT2Zmc2V0LG8uYnl0ZXNGaWxsZWQpLEllKG4pfXUoTnIsXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZURldGFjaGVkUHVsbEludG9Ub1F1ZXVlXCIpO2Z1bmN0aW9uIEhyKG4sbyl7Y29uc3QgYT1NYXRoLm1pbihuLl9xdWV1ZVRvdGFsU2l6ZSxvLmJ5dGVMZW5ndGgtby5ieXRlc0ZpbGxlZCkscD1vLmJ5dGVzRmlsbGVkK2E7bGV0IGc9YSxfPSExO2NvbnN0IFM9cCVvLmVsZW1lbnRTaXplLEM9cC1TO0M+PW8ubWluaW11bUZpbGwmJihnPUMtby5ieXRlc0ZpbGxlZCxfPSEwKTtjb25zdCBxPW4uX3F1ZXVlO2Zvcig7Zz4wOyl7Y29uc3QgUD1xLnBlZWsoKSxrPU1hdGgubWluKGcsUC5ieXRlTGVuZ3RoKSxPPW8uYnl0ZU9mZnNldCtvLmJ5dGVzRmlsbGVkO3pyKG8uYnVmZmVyLE8sUC5idWZmZXIsUC5ieXRlT2Zmc2V0LGspLFAuYnl0ZUxlbmd0aD09PWs/cS5zaGlmdCgpOihQLmJ5dGVPZmZzZXQrPWssUC5ieXRlTGVuZ3RoLT1rKSxuLl9xdWV1ZVRvdGFsU2l6ZS09ayxWcihuLGssbyksZy09a31yZXR1cm4gX311KEhyLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxQdWxsSW50b0Rlc2NyaXB0b3JGcm9tUXVldWVcIik7ZnVuY3Rpb24gVnIobixvLGEpe2EuYnl0ZXNGaWxsZWQrPW99dShWcixcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsSGVhZFB1bGxJbnRvRGVzY3JpcHRvclwiKTtmdW5jdGlvbiBRcihuKXtuLl9xdWV1ZVRvdGFsU2l6ZT09PTAmJm4uX2Nsb3NlUmVxdWVzdGVkPyh1dChuKSx0dChuLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtKSk6QWUobil9dShRcixcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJIYW5kbGVRdWV1ZURyYWluXCIpO2Z1bmN0aW9uIEp0KG4pe24uX2J5b2JSZXF1ZXN0IT09bnVsbCYmKG4uX2J5b2JSZXF1ZXN0Ll9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcj12b2lkIDAsbi5fYnlvYlJlcXVlc3QuX3ZpZXc9bnVsbCxuLl9ieW9iUmVxdWVzdD1udWxsKX11KEp0LFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckludmFsaWRhdGVCWU9CUmVxdWVzdFwiKTtmdW5jdGlvbiBYdChuKXtmb3IoO24uX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoPjA7KXtpZihuLl9xdWV1ZVRvdGFsU2l6ZT09PTApcmV0dXJuO2NvbnN0IG89bi5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7SHIobixvKSYmKEllKG4pLEt0KG4uX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0sbykpfX11KFh0LFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NQdWxsSW50b0Rlc2NyaXB0b3JzVXNpbmdRdWV1ZVwiKTtmdW5jdGlvbiBybyhuKXtjb25zdCBvPW4uX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3JlYWRlcjtmb3IoO28uX3JlYWRSZXF1ZXN0cy5sZW5ndGg+MDspe2lmKG4uX3F1ZXVlVG90YWxTaXplPT09MClyZXR1cm47Y29uc3QgYT1vLl9yZWFkUmVxdWVzdHMuc2hpZnQoKTtHcihuLGEpfX11KHJvLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NSZWFkUmVxdWVzdHNVc2luZ1F1ZXVlXCIpO2Z1bmN0aW9uIG5vKG4sbyxhLHApe2NvbnN0IGc9bi5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSxfPW8uY29uc3RydWN0b3IsUz10byhfKSx7Ynl0ZU9mZnNldDpDLGJ5dGVMZW5ndGg6cX09byxQPWEqUztsZXQgazt0cnl7az1mZShvLmJ1ZmZlcil9Y2F0Y2goail7cC5fZXJyb3JTdGVwcyhqKTtyZXR1cm59Y29uc3QgTz17YnVmZmVyOmssYnVmZmVyQnl0ZUxlbmd0aDprLmJ5dGVMZW5ndGgsYnl0ZU9mZnNldDpDLGJ5dGVMZW5ndGg6cSxieXRlc0ZpbGxlZDowLG1pbmltdW1GaWxsOlAsZWxlbWVudFNpemU6Uyx2aWV3Q29uc3RydWN0b3I6XyxyZWFkZXJUeXBlOlwiYnlvYlwifTtpZihuLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aD4wKXtuLl9wZW5kaW5nUHVsbEludG9zLnB1c2goTyksWHIoZyxwKTtyZXR1cm59aWYoZy5fc3RhdGU9PT1cImNsb3NlZFwiKXtjb25zdCBqPW5ldyBfKE8uYnVmZmVyLE8uYnl0ZU9mZnNldCwwKTtwLl9jbG9zZVN0ZXBzKGopO3JldHVybn1pZihuLl9xdWV1ZVRvdGFsU2l6ZT4wKXtpZihIcihuLE8pKXtjb25zdCBqPXhyKE8pO1FyKG4pLHAuX2NodW5rU3RlcHMoaik7cmV0dXJufWlmKG4uX2Nsb3NlUmVxdWVzdGVkKXtjb25zdCBqPW5ldyBUeXBlRXJyb3IoXCJJbnN1ZmZpY2llbnQgYnl0ZXMgdG8gZmlsbCBlbGVtZW50cyBpbiB0aGUgZ2l2ZW4gYnVmZmVyXCIpO2VlKG4saikscC5fZXJyb3JTdGVwcyhqKTtyZXR1cm59fW4uX3BlbmRpbmdQdWxsSW50b3MucHVzaChPKSxYcihnLHApLEFlKG4pfXUobm8sXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHVsbEludG9cIik7ZnVuY3Rpb24gb28obixvKXtvLnJlYWRlclR5cGU9PT1cIm5vbmVcIiYmSWUobik7Y29uc3QgYT1uLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO2lmKHJyKGEpKWZvcig7ZW4oYSk+MDspe2NvbnN0IHA9SWUobik7S3QoYSxwKX19dShvbyxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW5DbG9zZWRTdGF0ZVwiKTtmdW5jdGlvbiBpbyhuLG8sYSl7aWYoVnIobixvLGEpLGEucmVhZGVyVHlwZT09PVwibm9uZVwiKXtOcihuLGEpLFh0KG4pO3JldHVybn1pZihhLmJ5dGVzRmlsbGVkPGEubWluaW11bUZpbGwpcmV0dXJuO0llKG4pO2NvbnN0IHA9YS5ieXRlc0ZpbGxlZCVhLmVsZW1lbnRTaXplO2lmKHA+MCl7Y29uc3QgZz1hLmJ5dGVPZmZzZXQrYS5ieXRlc0ZpbGxlZDtVcihuLGEuYnVmZmVyLGctcCxwKX1hLmJ5dGVzRmlsbGVkLT1wLEt0KG4uX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0sYSksWHQobil9dShpbyxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW5SZWFkYWJsZVN0YXRlXCIpO2Z1bmN0aW9uIFlyKG4sbyl7Y29uc3QgYT1uLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtKdChuKSxuLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZT09PVwiY2xvc2VkXCI/b28obixhKTppbyhuLG8sYSksQWUobil9dShZcixcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW50ZXJuYWxcIik7ZnVuY3Rpb24gSWUobil7cmV0dXJuIG4uX3BlbmRpbmdQdWxsSW50b3Muc2hpZnQoKX11KEllLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNoaWZ0UGVuZGluZ1B1bGxJbnRvXCIpO2Z1bmN0aW9uIGFvKG4pe2NvbnN0IG89bi5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTtyZXR1cm4gby5fc3RhdGUhPT1cInJlYWRhYmxlXCJ8fG4uX2Nsb3NlUmVxdWVzdGVkfHwhbi5fc3RhcnRlZD8hMTohIShCcihvKSYmb3Qobyk+MHx8cnIobykmJmVuKG8pPjB8fFpyKG4pPjApfXUoYW8sXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hvdWxkQ2FsbFB1bGxcIik7ZnVuY3Rpb24gdXQobil7bi5fcHVsbEFsZ29yaXRobT12b2lkIDAsbi5fY2FuY2VsQWxnb3JpdGhtPXZvaWQgMH11KHV0LFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtc1wiKTtmdW5jdGlvbiBZZShuKXtjb25zdCBvPW4uX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07aWYoIShuLl9jbG9zZVJlcXVlc3RlZHx8by5fc3RhdGUhPT1cInJlYWRhYmxlXCIpKXtpZihuLl9xdWV1ZVRvdGFsU2l6ZT4wKXtuLl9jbG9zZVJlcXVlc3RlZD0hMDtyZXR1cm59aWYobi5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCl7Y29uc3QgYT1uLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtpZihhLmJ5dGVzRmlsbGVkJWEuZWxlbWVudFNpemUhPT0wKXtjb25zdCBwPW5ldyBUeXBlRXJyb3IoXCJJbnN1ZmZpY2llbnQgYnl0ZXMgdG8gZmlsbCBlbGVtZW50cyBpbiB0aGUgZ2l2ZW4gYnVmZmVyXCIpO3Rocm93IGVlKG4scCkscH19dXQobiksdHQobyl9fXUoWWUsXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xvc2VcIik7ZnVuY3Rpb24gbHQobixvKXtjb25zdCBhPW4uX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07aWYobi5fY2xvc2VSZXF1ZXN0ZWR8fGEuX3N0YXRlIT09XCJyZWFkYWJsZVwiKXJldHVybjtjb25zdHtidWZmZXI6cCxieXRlT2Zmc2V0OmcsYnl0ZUxlbmd0aDpffT1vO2lmKGdlKHApKXRocm93IG5ldyBUeXBlRXJyb3IoXCJjaHVuaydzIGJ1ZmZlciBpcyBkZXRhY2hlZCBhbmQgc28gY2Fubm90IGJlIGVucXVldWVkXCIpO2NvbnN0IFM9ZmUocCk7aWYobi5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCl7Y29uc3QgQz1uLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtpZihnZShDLmJ1ZmZlcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBCWU9CIHJlcXVlc3QncyBidWZmZXIgaGFzIGJlZW4gZGV0YWNoZWQgYW5kIHNvIGNhbm5vdCBiZSBmaWxsZWQgd2l0aCBhbiBlbnF1ZXVlZCBjaHVua1wiKTtKdChuKSxDLmJ1ZmZlcj1mZShDLmJ1ZmZlciksQy5yZWFkZXJUeXBlPT09XCJub25lXCImJk5yKG4sQyl9aWYoQnIoYSkpaWYocm8obiksb3QoYSk9PT0wKXN0KG4sUyxnLF8pO2Vsc2V7bi5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCYmSWUobik7Y29uc3QgQz1uZXcgVWludDhBcnJheShTLGcsXyk7VXQoYSxDLCExKX1lbHNlIHJyKGEpPyhzdChuLFMsZyxfKSxYdChuKSk6c3QobixTLGcsXyk7QWUobil9dShsdCxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlXCIpO2Z1bmN0aW9uIGVlKG4sbyl7Y29uc3QgYT1uLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtO2EuX3N0YXRlPT09XCJyZWFkYWJsZVwiJiYoTXIobiksX2UobiksdXQobiksUG4oYSxvKSl9dShlZSxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvclwiKTtmdW5jdGlvbiBHcihuLG8pe2NvbnN0IGE9bi5fcXVldWUuc2hpZnQoKTtuLl9xdWV1ZVRvdGFsU2l6ZS09YS5ieXRlTGVuZ3RoLFFyKG4pO2NvbnN0IHA9bmV3IFVpbnQ4QXJyYXkoYS5idWZmZXIsYS5ieXRlT2Zmc2V0LGEuYnl0ZUxlbmd0aCk7by5fY2h1bmtTdGVwcyhwKX11KEdyLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckZpbGxSZWFkUmVxdWVzdEZyb21RdWV1ZVwiKTtmdW5jdGlvbiBlcihuKXtpZihuLl9ieW9iUmVxdWVzdD09PW51bGwmJm4uX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoPjApe2NvbnN0IG89bi5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCksYT1uZXcgVWludDhBcnJheShvLmJ1ZmZlcixvLmJ5dGVPZmZzZXQrby5ieXRlc0ZpbGxlZCxvLmJ5dGVMZW5ndGgtby5ieXRlc0ZpbGxlZCkscD1PYmplY3QuY3JlYXRlKEVlLnByb3RvdHlwZSk7dW8ocCxuLGEpLG4uX2J5b2JSZXF1ZXN0PXB9cmV0dXJuIG4uX2J5b2JSZXF1ZXN0fXUoZXIsXCJSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyR2V0QllPQlJlcXVlc3RcIik7ZnVuY3Rpb24gWnIobil7Y29uc3Qgbz1uLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZTtyZXR1cm4gbz09PVwiZXJyb3JlZFwiP251bGw6bz09PVwiY2xvc2VkXCI/MDpuLl9zdHJhdGVneUhXTS1uLl9xdWV1ZVRvdGFsU2l6ZX11KFpyLFwiUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplXCIpO2Z1bmN0aW9uIGZ0KG4sbyl7Y29uc3QgYT1uLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtpZihuLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZT09PVwiY2xvc2VkXCIpe2lmKG8hPT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXCJieXRlc1dyaXR0ZW4gbXVzdCBiZSAwIHdoZW4gY2FsbGluZyByZXNwb25kKCkgb24gYSBjbG9zZWQgc3RyZWFtXCIpfWVsc2V7aWYobz09PTApdGhyb3cgbmV3IFR5cGVFcnJvcihcImJ5dGVzV3JpdHRlbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIHdoZW4gY2FsbGluZyByZXNwb25kKCkgb24gYSByZWFkYWJsZSBzdHJlYW1cIik7aWYoYS5ieXRlc0ZpbGxlZCtvPmEuYnl0ZUxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcImJ5dGVzV3JpdHRlbiBvdXQgb2YgcmFuZ2VcIil9YS5idWZmZXI9ZmUoYS5idWZmZXIpLFlyKG4sbyl9dShmdCxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kXCIpO2Z1bmN0aW9uIGN0KG4sbyl7Y29uc3QgYT1uLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTtpZihuLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtLl9zdGF0ZT09PVwiY2xvc2VkXCIpe2lmKG8uYnl0ZUxlbmd0aCE9PTApdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSB2aWV3J3MgbGVuZ3RoIG11c3QgYmUgMCB3aGVuIGNhbGxpbmcgcmVzcG9uZFdpdGhOZXdWaWV3KCkgb24gYSBjbG9zZWQgc3RyZWFtXCIpfWVsc2UgaWYoby5ieXRlTGVuZ3RoPT09MCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIHZpZXcncyBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCB3aGVuIGNhbGxpbmcgcmVzcG9uZFdpdGhOZXdWaWV3KCkgb24gYSByZWFkYWJsZSBzdHJlYW1cIik7aWYoYS5ieXRlT2Zmc2V0K2EuYnl0ZXNGaWxsZWQhPT1vLmJ5dGVPZmZzZXQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgcmVnaW9uIHNwZWNpZmllZCBieSB2aWV3IGRvZXMgbm90IG1hdGNoIGJ5b2JSZXF1ZXN0XCIpO2lmKGEuYnVmZmVyQnl0ZUxlbmd0aCE9PW8uYnVmZmVyLmJ5dGVMZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGUgYnVmZmVyIG9mIHZpZXcgaGFzIGRpZmZlcmVudCBjYXBhY2l0eSB0aGFuIGJ5b2JSZXF1ZXN0XCIpO2lmKGEuYnl0ZXNGaWxsZWQrby5ieXRlTGVuZ3RoPmEuYnl0ZUxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSByZWdpb24gc3BlY2lmaWVkIGJ5IHZpZXcgaXMgbGFyZ2VyIHRoYW4gYnlvYlJlcXVlc3RcIik7Y29uc3QgZz1vLmJ5dGVMZW5ndGg7YS5idWZmZXI9ZmUoby5idWZmZXIpLFlyKG4sZyl9dShjdCxcIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kV2l0aE5ld1ZpZXdcIik7ZnVuY3Rpb24gS3IobixvLGEscCxnLF8sUyl7by5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbT1uLG8uX3B1bGxBZ2Fpbj0hMSxvLl9wdWxsaW5nPSExLG8uX2J5b2JSZXF1ZXN0PW51bGwsby5fcXVldWU9by5fcXVldWVUb3RhbFNpemU9dm9pZCAwLF9lKG8pLG8uX2Nsb3NlUmVxdWVzdGVkPSExLG8uX3N0YXJ0ZWQ9ITEsby5fc3RyYXRlZ3lIV009XyxvLl9wdWxsQWxnb3JpdGhtPXAsby5fY2FuY2VsQWxnb3JpdGhtPWcsby5fYXV0b0FsbG9jYXRlQ2h1bmtTaXplPVMsby5fcGVuZGluZ1B1bGxJbnRvcz1uZXcgUSxuLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI9bztjb25zdCBDPWEoKTtFKFcoQyksKCk9PihvLl9zdGFydGVkPSEwLEFlKG8pLG51bGwpLHE9PihlZShvLHEpLG51bGwpKX11KEtyLFwiU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyXCIpO2Z1bmN0aW9uIHNvKG4sbyxhKXtjb25zdCBwPU9iamVjdC5jcmVhdGUoY2UucHJvdG90eXBlKTtsZXQgZyxfLFM7by5zdGFydCE9PXZvaWQgMD9nPXUoKCk9Pm8uc3RhcnQocCksXCJzdGFydEFsZ29yaXRobVwiKTpnPXUoKCk9Pnt9LFwic3RhcnRBbGdvcml0aG1cIiksby5wdWxsIT09dm9pZCAwP189dSgoKT0+by5wdWxsKHApLFwicHVsbEFsZ29yaXRobVwiKTpfPXUoKCk9Plcodm9pZCAwKSxcInB1bGxBbGdvcml0aG1cIiksby5jYW5jZWwhPT12b2lkIDA/Uz11KHE9Pm8uY2FuY2VsKHEpLFwiY2FuY2VsQWxnb3JpdGhtXCIpOlM9dSgoKT0+Vyh2b2lkIDApLFwiY2FuY2VsQWxnb3JpdGhtXCIpO2NvbnN0IEM9by5hdXRvQWxsb2NhdGVDaHVua1NpemU7aWYoQz09PTApdGhyb3cgbmV3IFR5cGVFcnJvcihcImF1dG9BbGxvY2F0ZUNodW5rU2l6ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwXCIpO0tyKG4scCxnLF8sUyxhLEMpfXUoc28sXCJTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZVwiKTtmdW5jdGlvbiB1byhuLG8sYSl7bi5fYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXI9byxuLl92aWV3PWF9dSh1byxcIlNldFVwUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdFwiKTtmdW5jdGlvbiB0cihuKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUuJHtufSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdGApfXUodHIsXCJieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb25cIik7ZnVuY3Rpb24gR2Uobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLiR7bn0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJgKX11KEdlLFwiYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uXCIpO2Z1bmN0aW9uIGxvKG4sbyl7aWUobixvKTtjb25zdCBhPW4/Lm1vZGU7cmV0dXJue21vZGU6YT09PXZvaWQgMD92b2lkIDA6Zm8oYSxgJHtvfSBoYXMgbWVtYmVyICdtb2RlJyB0aGF0YCl9fXUobG8sXCJjb252ZXJ0UmVhZGVyT3B0aW9uc1wiKTtmdW5jdGlvbiBmbyhuLG8pe2lmKG49YCR7bn1gLG4hPT1cImJ5b2JcIil0aHJvdyBuZXcgVHlwZUVycm9yKGAke299ICcke259JyBpcyBub3QgYSB2YWxpZCBlbnVtZXJhdGlvbiB2YWx1ZSBmb3IgUmVhZGFibGVTdHJlYW1SZWFkZXJNb2RlYCk7cmV0dXJuIG59dShmbyxcImNvbnZlcnRSZWFkYWJsZVN0cmVhbVJlYWRlck1vZGVcIik7ZnVuY3Rpb24gY28obixvKXt2YXIgYTtpZShuLG8pO2NvbnN0IHA9KGE9bj8ubWluKSE9PW51bGwmJmEhPT12b2lkIDA/YToxO3JldHVybnttaW46TXQocCxgJHtvfSBoYXMgbWVtYmVyICdtaW4nIHRoYXRgKX19dShjbyxcImNvbnZlcnRCeW9iUmVhZE9wdGlvbnNcIik7ZnVuY3Rpb24gSnIobil7cmV0dXJuIG5ldyBTZShuKX11KEpyLFwiQWNxdWlyZVJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclwiKTtmdW5jdGlvbiBYcihuLG8pe24uX3JlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5wdXNoKG8pfXUoWHIsXCJSZWFkYWJsZVN0cmVhbUFkZFJlYWRJbnRvUmVxdWVzdFwiKTtmdW5jdGlvbiBobyhuLG8sYSl7Y29uc3QgZz1uLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMuc2hpZnQoKTthP2cuX2Nsb3NlU3RlcHMobyk6Zy5fY2h1bmtTdGVwcyhvKX11KGhvLFwiUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZEludG9SZXF1ZXN0XCIpO2Z1bmN0aW9uIGVuKG4pe3JldHVybiBuLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMubGVuZ3RofXUoZW4sXCJSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRJbnRvUmVxdWVzdHNcIik7ZnVuY3Rpb24gcnIobil7Y29uc3Qgbz1uLl9yZWFkZXI7cmV0dXJuIShvPT09dm9pZCAwfHwhQmUobykpfXUocnIsXCJSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXJcIik7Y2xhc3MgU2V7c3RhdGlje3UodGhpcyxcIlJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclwiKX1jb25zdHJ1Y3RvcihvKXtpZihsZShvLDEsXCJSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJcIikseHQobyxcIkZpcnN0IHBhcmFtZXRlclwiKSxUZShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSByZWFkaW5nIGJ5IGFub3RoZXIgcmVhZGVyXCIpO2lmKCF2ZShvLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29uc3RydWN0IGEgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyIGZvciBhIHN0cmVhbSBub3QgY29uc3RydWN0ZWQgd2l0aCBhIGJ5dGUgc291cmNlXCIpO1JyKHRoaXMsbyksdGhpcy5fcmVhZEludG9SZXF1ZXN0cz1uZXcgUX1nZXQgY2xvc2VkKCl7cmV0dXJuIEJlKHRoaXMpP3RoaXMuX2Nsb3NlZFByb21pc2U6VChkdChcImNsb3NlZFwiKSl9Y2FuY2VsKG89dm9pZCAwKXtyZXR1cm4gQmUodGhpcyk/dGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbT09PXZvaWQgMD9UKG50KFwiY2FuY2VsXCIpKTp6dCh0aGlzLG8pOlQoZHQoXCJjYW5jZWxcIikpfXJlYWQobyxhPXt9KXtpZighQmUodGhpcykpcmV0dXJuIFQoZHQoXCJyZWFkXCIpKTtpZighQXJyYXlCdWZmZXIuaXNWaWV3KG8pKXJldHVybiBUKG5ldyBUeXBlRXJyb3IoXCJ2aWV3IG11c3QgYmUgYW4gYXJyYXkgYnVmZmVyIHZpZXdcIikpO2lmKG8uYnl0ZUxlbmd0aD09PTApcmV0dXJuIFQobmV3IFR5cGVFcnJvcihcInZpZXcgbXVzdCBoYXZlIG5vbi16ZXJvIGJ5dGVMZW5ndGhcIikpO2lmKG8uYnVmZmVyLmJ5dGVMZW5ndGg9PT0wKXJldHVybiBUKG5ldyBUeXBlRXJyb3IoXCJ2aWV3J3MgYnVmZmVyIG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoXCIpKTtpZihnZShvLmJ1ZmZlcikpcmV0dXJuIFQobmV3IFR5cGVFcnJvcihcInZpZXcncyBidWZmZXIgaGFzIGJlZW4gZGV0YWNoZWRcIikpO2xldCBwO3RyeXtwPWNvKGEsXCJvcHRpb25zXCIpfWNhdGNoKFApe3JldHVybiBUKFApfWNvbnN0IGc9cC5taW47aWYoZz09PTApcmV0dXJuIFQobmV3IFR5cGVFcnJvcihcIm9wdGlvbnMubWluIG11c3QgYmUgZ3JlYXRlciB0aGFuIDBcIikpO2lmKGVvKG8pKXtpZihnPm8uYnl0ZUxlbmd0aClyZXR1cm4gVChuZXcgUmFuZ2VFcnJvcihcIm9wdGlvbnMubWluIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHZpZXcncyBieXRlTGVuZ3RoXCIpKX1lbHNlIGlmKGc+by5sZW5ndGgpcmV0dXJuIFQobmV3IFJhbmdlRXJyb3IoXCJvcHRpb25zLm1pbiBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB2aWV3J3MgbGVuZ3RoXCIpKTtpZih0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtPT09dm9pZCAwKXJldHVybiBUKG50KFwicmVhZCBmcm9tXCIpKTtsZXQgXyxTO2NvbnN0IEM9eigoUCxrKT0+e189UCxTPWt9KTtyZXR1cm4gdG4odGhpcyxvLGcse19jaHVua1N0ZXBzOnUoUD0+Xyh7dmFsdWU6UCxkb25lOiExfSksXCJfY2h1bmtTdGVwc1wiKSxfY2xvc2VTdGVwczp1KFA9Pl8oe3ZhbHVlOlAsZG9uZTohMH0pLFwiX2Nsb3NlU3RlcHNcIiksX2Vycm9yU3RlcHM6dShQPT5TKFApLFwiX2Vycm9yU3RlcHNcIil9KSxDfXJlbGVhc2VMb2NrKCl7aWYoIUJlKHRoaXMpKXRocm93IGR0KFwicmVsZWFzZUxvY2tcIik7dGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbSE9PXZvaWQgMCYmcG8odGhpcyl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFNlLnByb3RvdHlwZSx7Y2FuY2VsOntlbnVtZXJhYmxlOiEwfSxyZWFkOntlbnVtZXJhYmxlOiEwfSxyZWxlYXNlTG9jazp7ZW51bWVyYWJsZTohMH0sY2xvc2VkOntlbnVtZXJhYmxlOiEwfX0pLHcoU2UucHJvdG90eXBlLmNhbmNlbCxcImNhbmNlbFwiKSx3KFNlLnByb3RvdHlwZS5yZWFkLFwicmVhZFwiKSx3KFNlLnByb3RvdHlwZS5yZWxlYXNlTG9jayxcInJlbGVhc2VMb2NrXCIpLHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc9PVwic3ltYm9sXCImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZS5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlJlYWRhYmxlU3RyZWFtQllPQlJlYWRlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2Z1bmN0aW9uIEJlKG4pe3JldHVybiFiKG4pfHwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJfcmVhZEludG9SZXF1ZXN0c1wiKT8hMTpuIGluc3RhbmNlb2YgU2V9dShCZSxcIklzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyXCIpO2Z1bmN0aW9uIHRuKG4sbyxhLHApe2NvbnN0IGc9bi5fb3duZXJSZWFkYWJsZVN0cmVhbTtnLl9kaXN0dXJiZWQ9ITAsZy5fc3RhdGU9PT1cImVycm9yZWRcIj9wLl9lcnJvclN0ZXBzKGcuX3N0b3JlZEVycm9yKTpubyhnLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsbyxhLHApfXUodG4sXCJSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJSZWFkXCIpO2Z1bmN0aW9uIHBvKG4pe3VlKG4pO2NvbnN0IG89bmV3IFR5cGVFcnJvcihcIlJlYWRlciB3YXMgcmVsZWFzZWRcIik7cm4obixvKX11KHBvLFwiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyUmVsZWFzZVwiKTtmdW5jdGlvbiBybihuLG8pe2NvbnN0IGE9bi5fcmVhZEludG9SZXF1ZXN0cztuLl9yZWFkSW50b1JlcXVlc3RzPW5ldyBRLGEuZm9yRWFjaChwPT57cC5fZXJyb3JTdGVwcyhvKX0pfXUocm4sXCJSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJFcnJvclJlYWRJbnRvUmVxdWVzdHNcIik7ZnVuY3Rpb24gZHQobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlci5wcm90b3R5cGUuJHtufSBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyYCl9dShkdCxcImJ5b2JSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uXCIpO2Z1bmN0aW9uIFplKG4sbyl7Y29uc3R7aGlnaFdhdGVyTWFyazphfT1uO2lmKGE9PT12b2lkIDApcmV0dXJuIG87aWYoSXIoYSl8fGE8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaGlnaFdhdGVyTWFya1wiKTtyZXR1cm4gYX11KFplLFwiRXh0cmFjdEhpZ2hXYXRlck1hcmtcIik7ZnVuY3Rpb24gaHQobil7Y29uc3R7c2l6ZTpvfT1uO3JldHVybiBvfHwoKCk9PjEpfXUoaHQsXCJFeHRyYWN0U2l6ZUFsZ29yaXRobVwiKTtmdW5jdGlvbiBwdChuLG8pe2llKG4sbyk7Y29uc3QgYT1uPy5oaWdoV2F0ZXJNYXJrLHA9bj8uc2l6ZTtyZXR1cm57aGlnaFdhdGVyTWFyazphPT09dm9pZCAwP3ZvaWQgMDokdChhKSxzaXplOnA9PT12b2lkIDA/dm9pZCAwOmJvKHAsYCR7b30gaGFzIG1lbWJlciAnc2l6ZScgdGhhdGApfX11KHB0LFwiY29udmVydFF1ZXVpbmdTdHJhdGVneVwiKTtmdW5jdGlvbiBibyhuLG8pe3JldHVybiBYKG4sbyksYT0+JHQobihhKSl9dShibyxcImNvbnZlcnRRdWV1aW5nU3RyYXRlZ3lTaXplXCIpO2Z1bmN0aW9uIG1vKG4sbyl7aWUobixvKTtjb25zdCBhPW4/LmFib3J0LHA9bj8uY2xvc2UsZz1uPy5zdGFydCxfPW4/LnR5cGUsUz1uPy53cml0ZTtyZXR1cm57YWJvcnQ6YT09PXZvaWQgMD92b2lkIDA6eW8oYSxuLGAke299IGhhcyBtZW1iZXIgJ2Fib3J0JyB0aGF0YCksY2xvc2U6cD09PXZvaWQgMD92b2lkIDA6Z28ocCxuLGAke299IGhhcyBtZW1iZXIgJ2Nsb3NlJyB0aGF0YCksc3RhcnQ6Zz09PXZvaWQgMD92b2lkIDA6X28oZyxuLGAke299IGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0YCksd3JpdGU6Uz09PXZvaWQgMD92b2lkIDA6U28oUyxuLGAke299IGhhcyBtZW1iZXIgJ3dyaXRlJyB0aGF0YCksdHlwZTpffX11KG1vLFwiY29udmVydFVuZGVybHlpbmdTaW5rXCIpO2Z1bmN0aW9uIHlvKG4sbyxhKXtyZXR1cm4gWChuLGEpLHA9Pk4obixvLFtwXSl9dSh5byxcImNvbnZlcnRVbmRlcmx5aW5nU2lua0Fib3J0Q2FsbGJhY2tcIik7ZnVuY3Rpb24gZ28obixvLGEpe3JldHVybiBYKG4sYSksKCk9Pk4obixvLFtdKX11KGdvLFwiY29udmVydFVuZGVybHlpbmdTaW5rQ2xvc2VDYWxsYmFja1wiKTtmdW5jdGlvbiBfbyhuLG8sYSl7cmV0dXJuIFgobixhKSxwPT4kKG4sbyxbcF0pfXUoX28sXCJjb252ZXJ0VW5kZXJseWluZ1NpbmtTdGFydENhbGxiYWNrXCIpO2Z1bmN0aW9uIFNvKG4sbyxhKXtyZXR1cm4gWChuLGEpLChwLGcpPT5OKG4sbyxbcCxnXSl9dShTbyxcImNvbnZlcnRVbmRlcmx5aW5nU2lua1dyaXRlQ2FsbGJhY2tcIik7ZnVuY3Rpb24gbm4obixvKXtpZighemUobikpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtvfSBpcyBub3QgYSBXcml0YWJsZVN0cmVhbS5gKX11KG5uLFwiYXNzZXJ0V3JpdGFibGVTdHJlYW1cIik7ZnVuY3Rpb24gd28obil7aWYodHlwZW9mIG4hPVwib2JqZWN0XCJ8fG49PT1udWxsKXJldHVybiExO3RyeXtyZXR1cm4gdHlwZW9mIG4uYWJvcnRlZD09XCJib29sZWFuXCJ9Y2F0Y2h7cmV0dXJuITF9fXUod28sXCJpc0Fib3J0U2lnbmFsXCIpO2NvbnN0IFJvPXR5cGVvZiBBYm9ydENvbnRyb2xsZXI9PVwiZnVuY3Rpb25cIjtmdW5jdGlvbiBUbygpe2lmKFJvKXJldHVybiBuZXcgQWJvcnRDb250cm9sbGVyfXUoVG8sXCJjcmVhdGVBYm9ydENvbnRyb2xsZXJcIik7Y2xhc3Mgd2V7c3RhdGlje3UodGhpcyxcIldyaXRhYmxlU3RyZWFtXCIpfWNvbnN0cnVjdG9yKG89e30sYT17fSl7bz09PXZvaWQgMD9vPW51bGw6RXIobyxcIkZpcnN0IHBhcmFtZXRlclwiKTtjb25zdCBwPXB0KGEsXCJTZWNvbmQgcGFyYW1ldGVyXCIpLGc9bW8obyxcIkZpcnN0IHBhcmFtZXRlclwiKTtpZihhbih0aGlzKSxnLnR5cGUhPT12b2lkIDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHR5cGUgaXMgc3BlY2lmaWVkXCIpO2NvbnN0IFM9aHQocCksQz1aZShwLDEpO2pvKHRoaXMsZyxDLFMpfWdldCBsb2NrZWQoKXtpZighemUodGhpcykpdGhyb3cgX3QoXCJsb2NrZWRcIik7cmV0dXJuIGplKHRoaXMpfWFib3J0KG89dm9pZCAwKXtyZXR1cm4gemUodGhpcyk/amUodGhpcyk/VChuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFib3J0IGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXJcIikpOmJ0KHRoaXMsbyk6VChfdChcImFib3J0XCIpKX1jbG9zZSgpe3JldHVybiB6ZSh0aGlzKT9qZSh0aGlzKT9UKG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2xvc2UgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHdyaXRlclwiKSk6YWUodGhpcyk/VChuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNsb3NlIGFuIGFscmVhZHktY2xvc2luZyBzdHJlYW1cIikpOnNuKHRoaXMpOlQoX3QoXCJjbG9zZVwiKSl9Z2V0V3JpdGVyKCl7aWYoIXplKHRoaXMpKXRocm93IF90KFwiZ2V0V3JpdGVyXCIpO3JldHVybiBvbih0aGlzKX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMod2UucHJvdG90eXBlLHthYm9ydDp7ZW51bWVyYWJsZTohMH0sY2xvc2U6e2VudW1lcmFibGU6ITB9LGdldFdyaXRlcjp7ZW51bWVyYWJsZTohMH0sbG9ja2VkOntlbnVtZXJhYmxlOiEwfX0pLHcod2UucHJvdG90eXBlLmFib3J0LFwiYWJvcnRcIiksdyh3ZS5wcm90b3R5cGUuY2xvc2UsXCJjbG9zZVwiKSx3KHdlLnByb3RvdHlwZS5nZXRXcml0ZXIsXCJnZXRXcml0ZXJcIiksdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZz09XCJzeW1ib2xcIiYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHdlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiV3JpdGFibGVTdHJlYW1cIixjb25maWd1cmFibGU6ITB9KTtmdW5jdGlvbiBvbihuKXtyZXR1cm4gbmV3IGRlKG4pfXUob24sXCJBY3F1aXJlV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyXCIpO2Z1bmN0aW9uIENvKG4sbyxhLHAsZz0xLF89KCk9PjEpe2NvbnN0IFM9T2JqZWN0LmNyZWF0ZSh3ZS5wcm90b3R5cGUpO2FuKFMpO2NvbnN0IEM9T2JqZWN0LmNyZWF0ZShMZS5wcm90b3R5cGUpO3JldHVybiBobihTLEMsbixvLGEscCxnLF8pLFN9dShDbyxcIkNyZWF0ZVdyaXRhYmxlU3RyZWFtXCIpO2Z1bmN0aW9uIGFuKG4pe24uX3N0YXRlPVwid3JpdGFibGVcIixuLl9zdG9yZWRFcnJvcj12b2lkIDAsbi5fd3JpdGVyPXZvaWQgMCxuLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXI9dm9pZCAwLG4uX3dyaXRlUmVxdWVzdHM9bmV3IFEsbi5faW5GbGlnaHRXcml0ZVJlcXVlc3Q9dm9pZCAwLG4uX2Nsb3NlUmVxdWVzdD12b2lkIDAsbi5faW5GbGlnaHRDbG9zZVJlcXVlc3Q9dm9pZCAwLG4uX3BlbmRpbmdBYm9ydFJlcXVlc3Q9dm9pZCAwLG4uX2JhY2twcmVzc3VyZT0hMX11KGFuLFwiSW5pdGlhbGl6ZVdyaXRhYmxlU3RyZWFtXCIpO2Z1bmN0aW9uIHplKG4pe3JldHVybiFiKG4pfHwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJfd3JpdGFibGVTdHJlYW1Db250cm9sbGVyXCIpPyExOm4gaW5zdGFuY2VvZiB3ZX11KHplLFwiSXNXcml0YWJsZVN0cmVhbVwiKTtmdW5jdGlvbiBqZShuKXtyZXR1cm4gbi5fd3JpdGVyIT09dm9pZCAwfXUoamUsXCJJc1dyaXRhYmxlU3RyZWFtTG9ja2VkXCIpO2Z1bmN0aW9uIGJ0KG4sbyl7dmFyIGE7aWYobi5fc3RhdGU9PT1cImNsb3NlZFwifHxuLl9zdGF0ZT09PVwiZXJyb3JlZFwiKXJldHVybiBXKHZvaWQgMCk7bi5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLl9hYm9ydFJlYXNvbj1vLChhPW4uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlci5fYWJvcnRDb250cm9sbGVyKT09PW51bGx8fGE9PT12b2lkIDB8fGEuYWJvcnQobyk7Y29uc3QgcD1uLl9zdGF0ZTtpZihwPT09XCJjbG9zZWRcInx8cD09PVwiZXJyb3JlZFwiKXJldHVybiBXKHZvaWQgMCk7aWYobi5fcGVuZGluZ0Fib3J0UmVxdWVzdCE9PXZvaWQgMClyZXR1cm4gbi5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZTtsZXQgZz0hMTtwPT09XCJlcnJvcmluZ1wiJiYoZz0hMCxvPXZvaWQgMCk7Y29uc3QgXz16KChTLEMpPT57bi5fcGVuZGluZ0Fib3J0UmVxdWVzdD17X3Byb21pc2U6dm9pZCAwLF9yZXNvbHZlOlMsX3JlamVjdDpDLF9yZWFzb246byxfd2FzQWxyZWFkeUVycm9yaW5nOmd9fSk7cmV0dXJuIG4uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3Byb21pc2U9XyxnfHxvcihuLG8pLF99dShidCxcIldyaXRhYmxlU3RyZWFtQWJvcnRcIik7ZnVuY3Rpb24gc24obil7Y29uc3Qgbz1uLl9zdGF0ZTtpZihvPT09XCJjbG9zZWRcInx8bz09PVwiZXJyb3JlZFwiKXJldHVybiBUKG5ldyBUeXBlRXJyb3IoYFRoZSBzdHJlYW0gKGluICR7b30gc3RhdGUpIGlzIG5vdCBpbiB0aGUgd3JpdGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBjbG9zZWRgKSk7Y29uc3QgYT16KChnLF8pPT57Y29uc3QgUz17X3Jlc29sdmU6ZyxfcmVqZWN0Ol99O24uX2Nsb3NlUmVxdWVzdD1TfSkscD1uLl93cml0ZXI7cmV0dXJuIHAhPT12b2lkIDAmJm4uX2JhY2twcmVzc3VyZSYmbz09PVwid3JpdGFibGVcIiYmZHIocCksTG8obi5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyKSxhfXUoc24sXCJXcml0YWJsZVN0cmVhbUNsb3NlXCIpO2Z1bmN0aW9uIFBvKG4pe3JldHVybiB6KChhLHApPT57Y29uc3QgZz17X3Jlc29sdmU6YSxfcmVqZWN0OnB9O24uX3dyaXRlUmVxdWVzdHMucHVzaChnKX0pfXUoUG8sXCJXcml0YWJsZVN0cmVhbUFkZFdyaXRlUmVxdWVzdFwiKTtmdW5jdGlvbiBucihuLG8pe2lmKG4uX3N0YXRlPT09XCJ3cml0YWJsZVwiKXtvcihuLG8pO3JldHVybn1pcihuKX11KG5yLFwiV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvblwiKTtmdW5jdGlvbiBvcihuLG8pe2NvbnN0IGE9bi5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyO24uX3N0YXRlPVwiZXJyb3JpbmdcIixuLl9zdG9yZWRFcnJvcj1vO2NvbnN0IHA9bi5fd3JpdGVyO3AhPT12b2lkIDAmJmxuKHAsbyksIXFvKG4pJiZhLl9zdGFydGVkJiZpcihuKX11KG9yLFwiV3JpdGFibGVTdHJlYW1TdGFydEVycm9yaW5nXCIpO2Z1bmN0aW9uIGlyKG4pe24uX3N0YXRlPVwiZXJyb3JlZFwiLG4uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlclt3cl0oKTtjb25zdCBvPW4uX3N0b3JlZEVycm9yO2lmKG4uX3dyaXRlUmVxdWVzdHMuZm9yRWFjaChnPT57Zy5fcmVqZWN0KG8pfSksbi5fd3JpdGVSZXF1ZXN0cz1uZXcgUSxuLl9wZW5kaW5nQWJvcnRSZXF1ZXN0PT09dm9pZCAwKXttdChuKTtyZXR1cm59Y29uc3QgYT1uLl9wZW5kaW5nQWJvcnRSZXF1ZXN0O2lmKG4uX3BlbmRpbmdBYm9ydFJlcXVlc3Q9dm9pZCAwLGEuX3dhc0FscmVhZHlFcnJvcmluZyl7YS5fcmVqZWN0KG8pLG10KG4pO3JldHVybn1jb25zdCBwPW4uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcltydF0oYS5fcmVhc29uKTtFKHAsKCk9PihhLl9yZXNvbHZlKCksbXQobiksbnVsbCksZz0+KGEuX3JlamVjdChnKSxtdChuKSxudWxsKSl9dShpcixcIldyaXRhYmxlU3RyZWFtRmluaXNoRXJyb3JpbmdcIik7ZnVuY3Rpb24gRW8obil7bi5faW5GbGlnaHRXcml0ZVJlcXVlc3QuX3Jlc29sdmUodm9pZCAwKSxuLl9pbkZsaWdodFdyaXRlUmVxdWVzdD12b2lkIDB9dShFbyxcIldyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRXcml0ZVwiKTtmdW5jdGlvbiB2byhuLG8pe24uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0Ll9yZWplY3Qobyksbi5faW5GbGlnaHRXcml0ZVJlcXVlc3Q9dm9pZCAwLG5yKG4sbyl9dSh2byxcIldyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRXcml0ZVdpdGhFcnJvclwiKTtmdW5jdGlvbiBBbyhuKXtuLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVzb2x2ZSh2b2lkIDApLG4uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PXZvaWQgMCxuLl9zdGF0ZT09PVwiZXJyb3JpbmdcIiYmKG4uX3N0b3JlZEVycm9yPXZvaWQgMCxuLl9wZW5kaW5nQWJvcnRSZXF1ZXN0IT09dm9pZCAwJiYobi5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcmVzb2x2ZSgpLG4uX3BlbmRpbmdBYm9ydFJlcXVlc3Q9dm9pZCAwKSksbi5fc3RhdGU9XCJjbG9zZWRcIjtjb25zdCBhPW4uX3dyaXRlcjthIT09dm9pZCAwJiZ5bihhKX11KEFvLFwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlXCIpO2Z1bmN0aW9uIEJvKG4sbyl7bi5faW5GbGlnaHRDbG9zZVJlcXVlc3QuX3JlamVjdChvKSxuLl9pbkZsaWdodENsb3NlUmVxdWVzdD12b2lkIDAsbi5fcGVuZGluZ0Fib3J0UmVxdWVzdCE9PXZvaWQgMCYmKG4uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3JlamVjdChvKSxuLl9wZW5kaW5nQWJvcnRSZXF1ZXN0PXZvaWQgMCksbnIobixvKX11KEJvLFwiV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlV2l0aEVycm9yXCIpO2Z1bmN0aW9uIGFlKG4pe3JldHVybiEobi5fY2xvc2VSZXF1ZXN0PT09dm9pZCAwJiZuLl9pbkZsaWdodENsb3NlUmVxdWVzdD09PXZvaWQgMCl9dShhZSxcIldyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0XCIpO2Z1bmN0aW9uIHFvKG4pe3JldHVybiEobi5faW5GbGlnaHRXcml0ZVJlcXVlc3Q9PT12b2lkIDAmJm4uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0PT09dm9pZCAwKX11KHFvLFwiV3JpdGFibGVTdHJlYW1IYXNPcGVyYXRpb25NYXJrZWRJbkZsaWdodFwiKTtmdW5jdGlvbiBXbyhuKXtuLl9pbkZsaWdodENsb3NlUmVxdWVzdD1uLl9jbG9zZVJlcXVlc3Qsbi5fY2xvc2VSZXF1ZXN0PXZvaWQgMH11KFdvLFwiV3JpdGFibGVTdHJlYW1NYXJrQ2xvc2VSZXF1ZXN0SW5GbGlnaHRcIik7ZnVuY3Rpb24ga28obil7bi5faW5GbGlnaHRXcml0ZVJlcXVlc3Q9bi5fd3JpdGVSZXF1ZXN0cy5zaGlmdCgpfXUoa28sXCJXcml0YWJsZVN0cmVhbU1hcmtGaXJzdFdyaXRlUmVxdWVzdEluRmxpZ2h0XCIpO2Z1bmN0aW9uIG10KG4pe24uX2Nsb3NlUmVxdWVzdCE9PXZvaWQgMCYmKG4uX2Nsb3NlUmVxdWVzdC5fcmVqZWN0KG4uX3N0b3JlZEVycm9yKSxuLl9jbG9zZVJlcXVlc3Q9dm9pZCAwKTtjb25zdCBvPW4uX3dyaXRlcjtvIT09dm9pZCAwJiZmcihvLG4uX3N0b3JlZEVycm9yKX11KG10LFwiV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZFwiKTtmdW5jdGlvbiBhcihuLG8pe2NvbnN0IGE9bi5fd3JpdGVyO2EhPT12b2lkIDAmJm8hPT1uLl9iYWNrcHJlc3N1cmUmJihvP0hvKGEpOmRyKGEpKSxuLl9iYWNrcHJlc3N1cmU9b311KGFyLFwiV3JpdGFibGVTdHJlYW1VcGRhdGVCYWNrcHJlc3N1cmVcIik7Y2xhc3MgZGV7c3RhdGlje3UodGhpcyxcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlclwiKX1jb25zdHJ1Y3RvcihvKXtpZihsZShvLDEsXCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJcIiksbm4obyxcIkZpcnN0IHBhcmFtZXRlclwiKSxqZShvKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSB3cml0aW5nIGJ5IGFub3RoZXIgd3JpdGVyXCIpO3RoaXMuX293bmVyV3JpdGFibGVTdHJlYW09byxvLl93cml0ZXI9dGhpcztjb25zdCBhPW8uX3N0YXRlO2lmKGE9PT1cIndyaXRhYmxlXCIpIWFlKG8pJiZvLl9iYWNrcHJlc3N1cmU/d3QodGhpcyk6Z24odGhpcyksU3QodGhpcyk7ZWxzZSBpZihhPT09XCJlcnJvcmluZ1wiKWNyKHRoaXMsby5fc3RvcmVkRXJyb3IpLFN0KHRoaXMpO2Vsc2UgaWYoYT09PVwiY2xvc2VkXCIpZ24odGhpcyksVW8odGhpcyk7ZWxzZXtjb25zdCBwPW8uX3N0b3JlZEVycm9yO2NyKHRoaXMscCksbW4odGhpcyxwKX19Z2V0IGNsb3NlZCgpe3JldHVybiBxZSh0aGlzKT90aGlzLl9jbG9zZWRQcm9taXNlOlQoV2UoXCJjbG9zZWRcIikpfWdldCBkZXNpcmVkU2l6ZSgpe2lmKCFxZSh0aGlzKSl0aHJvdyBXZShcImRlc2lyZWRTaXplXCIpO2lmKHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW09PT12b2lkIDApdGhyb3cgSmUoXCJkZXNpcmVkU2l6ZVwiKTtyZXR1cm4gem8odGhpcyl9Z2V0IHJlYWR5KCl7cmV0dXJuIHFlKHRoaXMpP3RoaXMuX3JlYWR5UHJvbWlzZTpUKFdlKFwicmVhZHlcIikpfWFib3J0KG89dm9pZCAwKXtyZXR1cm4gcWUodGhpcyk/dGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbT09PXZvaWQgMD9UKEplKFwiYWJvcnRcIikpOk9vKHRoaXMsbyk6VChXZShcImFib3J0XCIpKX1jbG9zZSgpe2lmKCFxZSh0aGlzKSlyZXR1cm4gVChXZShcImNsb3NlXCIpKTtjb25zdCBvPXRoaXMuX293bmVyV3JpdGFibGVTdHJlYW07cmV0dXJuIG89PT12b2lkIDA/VChKZShcImNsb3NlXCIpKTphZShvKT9UKG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2xvc2UgYW4gYWxyZWFkeS1jbG9zaW5nIHN0cmVhbVwiKSk6dW4odGhpcyl9cmVsZWFzZUxvY2soKXtpZighcWUodGhpcykpdGhyb3cgV2UoXCJyZWxlYXNlTG9ja1wiKTt0aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtIT09dm9pZCAwJiZmbih0aGlzKX13cml0ZShvPXZvaWQgMCl7cmV0dXJuIHFlKHRoaXMpP3RoaXMuX293bmVyV3JpdGFibGVTdHJlYW09PT12b2lkIDA/VChKZShcIndyaXRlIHRvXCIpKTpjbih0aGlzLG8pOlQoV2UoXCJ3cml0ZVwiKSl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGRlLnByb3RvdHlwZSx7YWJvcnQ6e2VudW1lcmFibGU6ITB9LGNsb3NlOntlbnVtZXJhYmxlOiEwfSxyZWxlYXNlTG9jazp7ZW51bWVyYWJsZTohMH0sd3JpdGU6e2VudW1lcmFibGU6ITB9LGNsb3NlZDp7ZW51bWVyYWJsZTohMH0sZGVzaXJlZFNpemU6e2VudW1lcmFibGU6ITB9LHJlYWR5OntlbnVtZXJhYmxlOiEwfX0pLHcoZGUucHJvdG90eXBlLmFib3J0LFwiYWJvcnRcIiksdyhkZS5wcm90b3R5cGUuY2xvc2UsXCJjbG9zZVwiKSx3KGRlLnByb3RvdHlwZS5yZWxlYXNlTG9jayxcInJlbGVhc2VMb2NrXCIpLHcoZGUucHJvdG90eXBlLndyaXRlLFwid3JpdGVcIiksdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZz09XCJzeW1ib2xcIiYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGRlLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse3ZhbHVlOlwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyXCIsY29uZmlndXJhYmxlOiEwfSk7ZnVuY3Rpb24gcWUobil7cmV0dXJuIWIobil8fCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcIl9vd25lcldyaXRhYmxlU3RyZWFtXCIpPyExOm4gaW5zdGFuY2VvZiBkZX11KHFlLFwiSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJcIik7ZnVuY3Rpb24gT28obixvKXtjb25zdCBhPW4uX293bmVyV3JpdGFibGVTdHJlYW07cmV0dXJuIGJ0KGEsbyl9dShPbyxcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckFib3J0XCIpO2Z1bmN0aW9uIHVuKG4pe2NvbnN0IG89bi5fb3duZXJXcml0YWJsZVN0cmVhbTtyZXR1cm4gc24obyl9dSh1bixcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlXCIpO2Z1bmN0aW9uIEZvKG4pe2NvbnN0IG89bi5fb3duZXJXcml0YWJsZVN0cmVhbSxhPW8uX3N0YXRlO3JldHVybiBhZShvKXx8YT09PVwiY2xvc2VkXCI/Vyh2b2lkIDApOmE9PT1cImVycm9yZWRcIj9UKG8uX3N0b3JlZEVycm9yKTp1bihuKX11KEZvLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQ2xvc2VXaXRoRXJyb3JQcm9wYWdhdGlvblwiKTtmdW5jdGlvbiBJbyhuLG8pe24uX2Nsb3NlZFByb21pc2VTdGF0ZT09PVwicGVuZGluZ1wiP2ZyKG4sbyk6Tm8obixvKX11KElvLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlQ2xvc2VkUHJvbWlzZVJlamVjdGVkXCIpO2Z1bmN0aW9uIGxuKG4sbyl7bi5fcmVhZHlQcm9taXNlU3RhdGU9PT1cInBlbmRpbmdcIj9fbihuLG8pOlZvKG4sbyl9dShsbixcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZVJlYWR5UHJvbWlzZVJlamVjdGVkXCIpO2Z1bmN0aW9uIHpvKG4pe2NvbnN0IG89bi5fb3duZXJXcml0YWJsZVN0cmVhbSxhPW8uX3N0YXRlO3JldHVybiBhPT09XCJlcnJvcmVkXCJ8fGE9PT1cImVycm9yaW5nXCI/bnVsbDphPT09XCJjbG9zZWRcIj8wOnBuKG8uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcil9dSh6byxcIldyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckdldERlc2lyZWRTaXplXCIpO2Z1bmN0aW9uIGZuKG4pe2NvbnN0IG89bi5fb3duZXJXcml0YWJsZVN0cmVhbSxhPW5ldyBUeXBlRXJyb3IoXCJXcml0ZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtJ3MgY2xvc2VkbmVzc1wiKTtsbihuLGEpLElvKG4sYSksby5fd3JpdGVyPXZvaWQgMCxuLl9vd25lcldyaXRhYmxlU3RyZWFtPXZvaWQgMH11KGZuLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZVwiKTtmdW5jdGlvbiBjbihuLG8pe2NvbnN0IGE9bi5fb3duZXJXcml0YWJsZVN0cmVhbSxwPWEuX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcixnPURvKHAsbyk7aWYoYSE9PW4uX293bmVyV3JpdGFibGVTdHJlYW0pcmV0dXJuIFQoSmUoXCJ3cml0ZSB0b1wiKSk7Y29uc3QgXz1hLl9zdGF0ZTtpZihfPT09XCJlcnJvcmVkXCIpcmV0dXJuIFQoYS5fc3RvcmVkRXJyb3IpO2lmKGFlKGEpfHxfPT09XCJjbG9zZWRcIilyZXR1cm4gVChuZXcgVHlwZUVycm9yKFwiVGhlIHN0cmVhbSBpcyBjbG9zaW5nIG9yIGNsb3NlZCBhbmQgY2Fubm90IGJlIHdyaXR0ZW4gdG9cIikpO2lmKF89PT1cImVycm9yaW5nXCIpcmV0dXJuIFQoYS5fc3RvcmVkRXJyb3IpO2NvbnN0IFM9UG8oYSk7cmV0dXJuICRvKHAsbyxnKSxTfXUoY24sXCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJXcml0ZVwiKTtjb25zdCBkbj17fTtjbGFzcyBMZXtzdGF0aWN7dSh0aGlzLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiKX1jb25zdHJ1Y3Rvcigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yXCIpfWdldCBhYm9ydFJlYXNvbigpe2lmKCFzcih0aGlzKSl0aHJvdyBscihcImFib3J0UmVhc29uXCIpO3JldHVybiB0aGlzLl9hYm9ydFJlYXNvbn1nZXQgc2lnbmFsKCl7aWYoIXNyKHRoaXMpKXRocm93IGxyKFwic2lnbmFsXCIpO2lmKHRoaXMuX2Fib3J0Q29udHJvbGxlcj09PXZvaWQgMCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuc2lnbmFsIGlzIG5vdCBzdXBwb3J0ZWRcIik7cmV0dXJuIHRoaXMuX2Fib3J0Q29udHJvbGxlci5zaWduYWx9ZXJyb3Iobz12b2lkIDApe2lmKCFzcih0aGlzKSl0aHJvdyBscihcImVycm9yXCIpO3RoaXMuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbS5fc3RhdGU9PT1cIndyaXRhYmxlXCImJmJuKHRoaXMsbyl9W3J0XShvKXtjb25zdCBhPXRoaXMuX2Fib3J0QWxnb3JpdGhtKG8pO3JldHVybiB5dCh0aGlzKSxhfVt3cl0oKXtfZSh0aGlzKX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTGUucHJvdG90eXBlLHthYm9ydFJlYXNvbjp7ZW51bWVyYWJsZTohMH0sc2lnbmFsOntlbnVtZXJhYmxlOiEwfSxlcnJvcjp7ZW51bWVyYWJsZTohMH19KSx0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnPT1cInN5bWJvbFwiJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoTGUucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyXCIsY29uZmlndXJhYmxlOiEwfSk7ZnVuY3Rpb24gc3Iobil7cmV0dXJuIWIobil8fCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcIl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW1cIik/ITE6biBpbnN0YW5jZW9mIExlfXUoc3IsXCJJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIik7ZnVuY3Rpb24gaG4obixvLGEscCxnLF8sUyxDKXtvLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW09bixuLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXI9byxvLl9xdWV1ZT12b2lkIDAsby5fcXVldWVUb3RhbFNpemU9dm9pZCAwLF9lKG8pLG8uX2Fib3J0UmVhc29uPXZvaWQgMCxvLl9hYm9ydENvbnRyb2xsZXI9VG8oKSxvLl9zdGFydGVkPSExLG8uX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobT1DLG8uX3N0cmF0ZWd5SFdNPVMsby5fd3JpdGVBbGdvcml0aG09cCxvLl9jbG9zZUFsZ29yaXRobT1nLG8uX2Fib3J0QWxnb3JpdGhtPV87Y29uc3QgcT11cihvKTthcihuLHEpO2NvbnN0IFA9YSgpLGs9VyhQKTtFKGssKCk9PihvLl9zdGFydGVkPSEwLGd0KG8pLG51bGwpLE89PihvLl9zdGFydGVkPSEwLG5yKG4sTyksbnVsbCkpfXUoaG4sXCJTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIik7ZnVuY3Rpb24gam8obixvLGEscCl7Y29uc3QgZz1PYmplY3QuY3JlYXRlKExlLnByb3RvdHlwZSk7bGV0IF8sUyxDLHE7by5zdGFydCE9PXZvaWQgMD9fPXUoKCk9Pm8uc3RhcnQoZyksXCJzdGFydEFsZ29yaXRobVwiKTpfPXUoKCk9Pnt9LFwic3RhcnRBbGdvcml0aG1cIiksby53cml0ZSE9PXZvaWQgMD9TPXUoUD0+by53cml0ZShQLGcpLFwid3JpdGVBbGdvcml0aG1cIik6Uz11KCgpPT5XKHZvaWQgMCksXCJ3cml0ZUFsZ29yaXRobVwiKSxvLmNsb3NlIT09dm9pZCAwP0M9dSgoKT0+by5jbG9zZSgpLFwiY2xvc2VBbGdvcml0aG1cIik6Qz11KCgpPT5XKHZvaWQgMCksXCJjbG9zZUFsZ29yaXRobVwiKSxvLmFib3J0IT09dm9pZCAwP3E9dShQPT5vLmFib3J0KFApLFwiYWJvcnRBbGdvcml0aG1cIik6cT11KCgpPT5XKHZvaWQgMCksXCJhYm9ydEFsZ29yaXRobVwiKSxobihuLGcsXyxTLEMscSxhLHApfXUoam8sXCJTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NpbmtcIik7ZnVuY3Rpb24geXQobil7bi5fd3JpdGVBbGdvcml0aG09dm9pZCAwLG4uX2Nsb3NlQWxnb3JpdGhtPXZvaWQgMCxuLl9hYm9ydEFsZ29yaXRobT12b2lkIDAsbi5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtPXZvaWQgMH11KHl0LFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtc1wiKTtmdW5jdGlvbiBMbyhuKXtHdChuLGRuLDApLGd0KG4pfXUoTG8sXCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2VcIik7ZnVuY3Rpb24gRG8obixvKXt0cnl7cmV0dXJuIG4uX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobShvKX1jYXRjaChhKXtyZXR1cm4gS2UobixhKSwxfX11KERvLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldENodW5rU2l6ZVwiKTtmdW5jdGlvbiBwbihuKXtyZXR1cm4gbi5fc3RyYXRlZ3lIV00tbi5fcXVldWVUb3RhbFNpemV9dShwbixcIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZVwiKTtmdW5jdGlvbiAkbyhuLG8sYSl7dHJ5e0d0KG4sbyxhKX1jYXRjaChnKXtLZShuLGcpO3JldHVybn1jb25zdCBwPW4uX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtpZighYWUocCkmJnAuX3N0YXRlPT09XCJ3cml0YWJsZVwiKXtjb25zdCBnPXVyKG4pO2FyKHAsZyl9Z3Qobil9dSgkbyxcIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJXcml0ZVwiKTtmdW5jdGlvbiBndChuKXtjb25zdCBvPW4uX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTtpZighbi5fc3RhcnRlZHx8by5faW5GbGlnaHRXcml0ZVJlcXVlc3QhPT12b2lkIDApcmV0dXJuO2lmKG8uX3N0YXRlPT09XCJlcnJvcmluZ1wiKXtpcihvKTtyZXR1cm59aWYobi5fcXVldWUubGVuZ3RoPT09MClyZXR1cm47Y29uc3QgcD1YbihuKTtwPT09ZG4/TW8obik6eG8obixwKX11KGd0LFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkXCIpO2Z1bmN0aW9uIEtlKG4sbyl7bi5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtLl9zdGF0ZT09PVwid3JpdGFibGVcIiYmYm4obixvKX11KEtlLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWRcIik7ZnVuY3Rpb24gTW8obil7Y29uc3Qgbz1uLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07V28obyksWXQobik7Y29uc3QgYT1uLl9jbG9zZUFsZ29yaXRobSgpO3l0KG4pLEUoYSwoKT0+KEFvKG8pLG51bGwpLHA9PihCbyhvLHApLG51bGwpKX11KE1vLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NDbG9zZVwiKTtmdW5jdGlvbiB4byhuLG8pe2NvbnN0IGE9bi5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtO2tvKGEpO2NvbnN0IHA9bi5fd3JpdGVBbGdvcml0aG0obyk7RShwLCgpPT57RW8oYSk7Y29uc3QgZz1hLl9zdGF0ZTtpZihZdChuKSwhYWUoYSkmJmc9PT1cIndyaXRhYmxlXCIpe2NvbnN0IF89dXIobik7YXIoYSxfKX1yZXR1cm4gZ3QobiksbnVsbH0sZz0+KGEuX3N0YXRlPT09XCJ3cml0YWJsZVwiJiZ5dChuKSx2byhhLGcpLG51bGwpKX11KHhvLFwiV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NXcml0ZVwiKTtmdW5jdGlvbiB1cihuKXtyZXR1cm4gcG4obik8PTB9dSh1cixcIldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXRCYWNrcHJlc3N1cmVcIik7ZnVuY3Rpb24gYm4obixvKXtjb25zdCBhPW4uX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTt5dChuKSxvcihhLG8pfXUoYm4sXCJXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3JcIik7ZnVuY3Rpb24gX3Qobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS4ke259IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBXcml0YWJsZVN0cmVhbWApfXUoX3QsXCJzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDJcIik7ZnVuY3Rpb24gbHIobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLiR7bn0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJgKX11KGxyLFwiZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDJcIik7ZnVuY3Rpb24gV2Uobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlci5wcm90b3R5cGUuJHtufSBjYW4gb25seSBiZSB1c2VkIG9uIGEgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyYCl9dShXZSxcImRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uXCIpO2Z1bmN0aW9uIEplKG4pe3JldHVybiBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IFwiK24rXCIgYSBzdHJlYW0gdXNpbmcgYSByZWxlYXNlZCB3cml0ZXJcIil9dShKZSxcImRlZmF1bHRXcml0ZXJMb2NrRXhjZXB0aW9uXCIpO2Z1bmN0aW9uIFN0KG4pe24uX2Nsb3NlZFByb21pc2U9eigobyxhKT0+e24uX2Nsb3NlZFByb21pc2VfcmVzb2x2ZT1vLG4uX2Nsb3NlZFByb21pc2VfcmVqZWN0PWEsbi5fY2xvc2VkUHJvbWlzZVN0YXRlPVwicGVuZGluZ1wifSl9dShTdCxcImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZVwiKTtmdW5jdGlvbiBtbihuLG8pe1N0KG4pLGZyKG4sbyl9dShtbixcImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWRcIik7ZnVuY3Rpb24gVW8obil7U3QobikseW4obil9dShVbyxcImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWRcIik7ZnVuY3Rpb24gZnIobixvKXtuLl9jbG9zZWRQcm9taXNlX3JlamVjdCE9PXZvaWQgMCYmKEsobi5fY2xvc2VkUHJvbWlzZSksbi5fY2xvc2VkUHJvbWlzZV9yZWplY3Qobyksbi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxuLl9jbG9zZWRQcm9taXNlX3JlamVjdD12b2lkIDAsbi5fY2xvc2VkUHJvbWlzZVN0YXRlPVwicmVqZWN0ZWRcIil9dShmcixcImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVqZWN0XCIpO2Z1bmN0aW9uIE5vKG4sbyl7bW4obixvKX11KE5vLFwiZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWRcIik7ZnVuY3Rpb24geW4obil7bi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlIT09dm9pZCAwJiYobi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlKHZvaWQgMCksbi5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxuLl9jbG9zZWRQcm9taXNlX3JlamVjdD12b2lkIDAsbi5fY2xvc2VkUHJvbWlzZVN0YXRlPVwicmVzb2x2ZWRcIil9dSh5bixcImRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzb2x2ZVwiKTtmdW5jdGlvbiB3dChuKXtuLl9yZWFkeVByb21pc2U9eigobyxhKT0+e24uX3JlYWR5UHJvbWlzZV9yZXNvbHZlPW8sbi5fcmVhZHlQcm9taXNlX3JlamVjdD1hfSksbi5fcmVhZHlQcm9taXNlU3RhdGU9XCJwZW5kaW5nXCJ9dSh3dCxcImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplXCIpO2Z1bmN0aW9uIGNyKG4sbyl7d3QobiksX24obixvKX11KGNyLFwiZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkXCIpO2Z1bmN0aW9uIGduKG4pe3d0KG4pLGRyKG4pfXUoZ24sXCJkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWRcIik7ZnVuY3Rpb24gX24obixvKXtuLl9yZWFkeVByb21pc2VfcmVqZWN0IT09dm9pZCAwJiYoSyhuLl9yZWFkeVByb21pc2UpLG4uX3JlYWR5UHJvbWlzZV9yZWplY3Qobyksbi5fcmVhZHlQcm9taXNlX3Jlc29sdmU9dm9pZCAwLG4uX3JlYWR5UHJvbWlzZV9yZWplY3Q9dm9pZCAwLG4uX3JlYWR5UHJvbWlzZVN0YXRlPVwicmVqZWN0ZWRcIil9dShfbixcImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZWplY3RcIik7ZnVuY3Rpb24gSG8obil7d3Qobil9dShIbyxcImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFwiKTtmdW5jdGlvbiBWbyhuLG8pe2NyKG4sbyl9dShWbyxcImRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWRcIik7ZnVuY3Rpb24gZHIobil7bi5fcmVhZHlQcm9taXNlX3Jlc29sdmUhPT12b2lkIDAmJihuLl9yZWFkeVByb21pc2VfcmVzb2x2ZSh2b2lkIDApLG4uX3JlYWR5UHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxuLl9yZWFkeVByb21pc2VfcmVqZWN0PXZvaWQgMCxuLl9yZWFkeVByb21pc2VTdGF0ZT1cImZ1bGZpbGxlZFwiKX11KGRyLFwiZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmVcIik7ZnVuY3Rpb24gUW8oKXtpZih0eXBlb2YgZ2xvYmFsVGhpczxcInVcIilyZXR1cm4gZ2xvYmFsVGhpcztpZih0eXBlb2Ygc2VsZjxcInVcIilyZXR1cm4gc2VsZjtpZih0eXBlb2YgX2NvbW1vbmpzSGVscGVycy5jb21tb25qc0dsb2JhbDxcInVcIilyZXR1cm4gX2NvbW1vbmpzSGVscGVycy5jb21tb25qc0dsb2JhbH11KFFvLFwiZ2V0R2xvYmFsc1wiKTtjb25zdCBocj1RbygpO2Z1bmN0aW9uIFlvKG4pe2lmKCEodHlwZW9mIG49PVwiZnVuY3Rpb25cInx8dHlwZW9mIG49PVwib2JqZWN0XCIpfHxuLm5hbWUhPT1cIkRPTUV4Y2VwdGlvblwiKXJldHVybiExO3RyeXtyZXR1cm4gbmV3IG4sITB9Y2F0Y2h7cmV0dXJuITF9fXUoWW8sXCJpc0RPTUV4Y2VwdGlvbkNvbnN0cnVjdG9yXCIpO2Z1bmN0aW9uIEdvKCl7Y29uc3Qgbj1ocj8uRE9NRXhjZXB0aW9uO3JldHVybiBZbyhuKT9uOnZvaWQgMH11KEdvLFwiZ2V0RnJvbUdsb2JhbFwiKTtmdW5jdGlvbiBabygpe2NvbnN0IG49dShmdW5jdGlvbihhLHApe3RoaXMubWVzc2FnZT1hfHxcIlwiLHRoaXMubmFtZT1wfHxcIkVycm9yXCIsRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UmJkVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsdGhpcy5jb25zdHJ1Y3Rvcil9LFwiRE9NRXhjZXB0aW9uXCIpO3JldHVybiB3KG4sXCJET01FeGNlcHRpb25cIiksbi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIse3ZhbHVlOm4sd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksbn11KFpvLFwiY3JlYXRlUG9seWZpbGxcIik7Y29uc3QgS289R28oKXx8Wm8oKTtmdW5jdGlvbiBTbihuLG8sYSxwLGcsXyl7Y29uc3QgUz1GZShuKSxDPW9uKG8pO24uX2Rpc3R1cmJlZD0hMDtsZXQgcT0hMSxQPVcodm9pZCAwKTtyZXR1cm4geigoayxPKT0+e2xldCBqO2lmKF8hPT12b2lkIDApe2lmKGo9dSgoKT0+e2NvbnN0IHY9Xy5yZWFzb24hPT12b2lkIDA/Xy5yZWFzb246bmV3IEtvKFwiQWJvcnRlZFwiLFwiQWJvcnRFcnJvclwiKSxJPVtdO3B8fEkucHVzaCgoKT0+by5fc3RhdGU9PT1cIndyaXRhYmxlXCI/YnQobyx2KTpXKHZvaWQgMCkpLGd8fEkucHVzaCgoKT0+bi5fc3RhdGU9PT1cInJlYWRhYmxlXCI/bmUobix2KTpXKHZvaWQgMCkpLEcoKCk9PlByb21pc2UuYWxsKEkubWFwKEw9PkwoKSkpLCEwLHYpfSxcImFib3J0QWxnb3JpdGhtXCIpLF8uYWJvcnRlZCl7aigpO3JldHVybn1fLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLGopfWZ1bmN0aW9uIG9lKCl7cmV0dXJuIHooKHYsSSk9PntmdW5jdGlvbiBMKEope0o/digpOkQoeGUoKSxMLEkpfXUoTCxcIm5leHRcIiksTCghMSl9KX11KG9lLFwicGlwZUxvb3BcIik7ZnVuY3Rpb24geGUoKXtyZXR1cm4gcT9XKCEwKTpEKEMuX3JlYWR5UHJvbWlzZSwoKT0+eigodixJKT0+e1ZlKFMse19jaHVua1N0ZXBzOnUoTD0+e1A9RChjbihDLEwpLHZvaWQgMCx5KSx2KCExKX0sXCJfY2h1bmtTdGVwc1wiKSxfY2xvc2VTdGVwczp1KCgpPT52KCEwKSxcIl9jbG9zZVN0ZXBzXCIpLF9lcnJvclN0ZXBzOkl9KX0pKX1pZih1KHhlLFwicGlwZVN0ZXBcIikscGUobixTLl9jbG9zZWRQcm9taXNlLHY9PihwP3RlKCEwLHYpOkcoKCk9PmJ0KG8sdiksITAsdiksbnVsbCkpLHBlKG8sQy5fY2xvc2VkUHJvbWlzZSx2PT4oZz90ZSghMCx2KTpHKCgpPT5uZShuLHYpLCEwLHYpLG51bGwpKSxZKG4sUy5fY2xvc2VkUHJvbWlzZSwoKT0+KGE/dGUoKTpHKCgpPT5GbyhDKSksbnVsbCkpLGFlKG8pfHxvLl9zdGF0ZT09PVwiY2xvc2VkXCIpe2NvbnN0IHY9bmV3IFR5cGVFcnJvcihcInRoZSBkZXN0aW5hdGlvbiB3cml0YWJsZSBzdHJlYW0gY2xvc2VkIGJlZm9yZSBhbGwgZGF0YSBjb3VsZCBiZSBwaXBlZCB0byBpdFwiKTtnP3RlKCEwLHYpOkcoKCk9Pm5lKG4sdiksITAsdil9SyhvZSgpKTtmdW5jdGlvbiBQZSgpe2NvbnN0IHY9UDtyZXR1cm4gRChQLCgpPT52IT09UD9QZSgpOnZvaWQgMCl9dShQZSxcIndhaXRGb3JXcml0ZXNUb0ZpbmlzaFwiKTtmdW5jdGlvbiBwZSh2LEksTCl7di5fc3RhdGU9PT1cImVycm9yZWRcIj9MKHYuX3N0b3JlZEVycm9yKTpNKEksTCl9dShwZSxcImlzT3JCZWNvbWVzRXJyb3JlZFwiKTtmdW5jdGlvbiBZKHYsSSxMKXt2Ll9zdGF0ZT09PVwiY2xvc2VkXCI/TCgpOlooSSxMKX11KFksXCJpc09yQmVjb21lc0Nsb3NlZFwiKTtmdW5jdGlvbiBHKHYsSSxMKXtpZihxKXJldHVybjtxPSEwLG8uX3N0YXRlPT09XCJ3cml0YWJsZVwiJiYhYWUobyk/WihQZSgpLEopOkooKTtmdW5jdGlvbiBKKCl7cmV0dXJuIEUodigpLCgpPT5iZShJLEwpLFVlPT5iZSghMCxVZSkpLG51bGx9dShKLFwiZG9UaGVSZXN0XCIpfXUoRyxcInNodXRkb3duV2l0aEFjdGlvblwiKTtmdW5jdGlvbiB0ZSh2LEkpe3F8fChxPSEwLG8uX3N0YXRlPT09XCJ3cml0YWJsZVwiJiYhYWUobyk/WihQZSgpLCgpPT5iZSh2LEkpKTpiZSh2LEkpKX11KHRlLFwic2h1dGRvd25cIik7ZnVuY3Rpb24gYmUodixJKXtyZXR1cm4gZm4oQyksdWUoUyksXyE9PXZvaWQgMCYmXy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIixqKSx2P08oSSk6ayh2b2lkIDApLG51bGx9dShiZSxcImZpbmFsaXplXCIpfSl9dShTbixcIlJlYWRhYmxlU3RyZWFtUGlwZVRvXCIpO2NsYXNzIGhle3N0YXRpY3t1KHRoaXMsXCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyXCIpfWNvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgY29uc3RydWN0b3JcIil9Z2V0IGRlc2lyZWRTaXplKCl7aWYoIVJ0KHRoaXMpKXRocm93IEN0KFwiZGVzaXJlZFNpemVcIik7cmV0dXJuIHByKHRoaXMpfWNsb3NlKCl7aWYoIVJ0KHRoaXMpKXRocm93IEN0KFwiY2xvc2VcIik7aWYoISRlKHRoaXMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBjbG9zZVwiKTtrZSh0aGlzKX1lbnF1ZXVlKG89dm9pZCAwKXtpZighUnQodGhpcykpdGhyb3cgQ3QoXCJlbnF1ZXVlXCIpO2lmKCEkZSh0aGlzKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIHN0cmVhbSBpcyBub3QgaW4gYSBzdGF0ZSB0aGF0IHBlcm1pdHMgZW5xdWV1ZVwiKTtyZXR1cm4gRGUodGhpcyxvKX1lcnJvcihvPXZvaWQgMCl7aWYoIVJ0KHRoaXMpKXRocm93IEN0KFwiZXJyb3JcIik7cmUodGhpcyxvKX1bT3RdKG8pe19lKHRoaXMpO2NvbnN0IGE9dGhpcy5fY2FuY2VsQWxnb3JpdGhtKG8pO3JldHVybiBUdCh0aGlzKSxhfVtGdF0obyl7Y29uc3QgYT10aGlzLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07aWYodGhpcy5fcXVldWUubGVuZ3RoPjApe2NvbnN0IHA9WXQodGhpcyk7dGhpcy5fY2xvc2VSZXF1ZXN0ZWQmJnRoaXMuX3F1ZXVlLmxlbmd0aD09PTA/KFR0KHRoaXMpLHR0KGEpKTpYZSh0aGlzKSxvLl9jaHVua1N0ZXBzKHApfWVsc2UgQXIoYSxvKSxYZSh0aGlzKX1bSXRdKCl7fX1PYmplY3QuZGVmaW5lUHJvcGVydGllcyhoZS5wcm90b3R5cGUse2Nsb3NlOntlbnVtZXJhYmxlOiEwfSxlbnF1ZXVlOntlbnVtZXJhYmxlOiEwfSxlcnJvcjp7ZW51bWVyYWJsZTohMH0sZGVzaXJlZFNpemU6e2VudW1lcmFibGU6ITB9fSksdyhoZS5wcm90b3R5cGUuY2xvc2UsXCJjbG9zZVwiKSx3KGhlLnByb3RvdHlwZS5lbnF1ZXVlLFwiZW5xdWV1ZVwiKSx3KGhlLnByb3RvdHlwZS5lcnJvcixcImVycm9yXCIpLHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc9PVwic3ltYm9sXCImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShoZS5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIixjb25maWd1cmFibGU6ITB9KTtmdW5jdGlvbiBSdChuKXtyZXR1cm4hYihuKXx8IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbVwiKT8hMTpuIGluc3RhbmNlb2YgaGV9dShSdCxcIklzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiKTtmdW5jdGlvbiBYZShuKXtpZighd24obikpcmV0dXJuO2lmKG4uX3B1bGxpbmcpe24uX3B1bGxBZ2Fpbj0hMDtyZXR1cm59bi5fcHVsbGluZz0hMDtjb25zdCBhPW4uX3B1bGxBbGdvcml0aG0oKTtFKGEsKCk9PihuLl9wdWxsaW5nPSExLG4uX3B1bGxBZ2FpbiYmKG4uX3B1bGxBZ2Fpbj0hMSxYZShuKSksbnVsbCkscD0+KHJlKG4scCksbnVsbCkpfXUoWGUsXCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZFwiKTtmdW5jdGlvbiB3bihuKXtjb25zdCBvPW4uX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTtyZXR1cm4hJGUobil8fCFuLl9zdGFydGVkPyExOiEhKFRlKG8pJiZvdChvKT4wfHxwcihuKT4wKX11KHduLFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclNob3VsZENhbGxQdWxsXCIpO2Z1bmN0aW9uIFR0KG4pe24uX3B1bGxBbGdvcml0aG09dm9pZCAwLG4uX2NhbmNlbEFsZ29yaXRobT12b2lkIDAsbi5fc3RyYXRlZ3lTaXplQWxnb3JpdGhtPXZvaWQgMH11KFR0LFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtc1wiKTtmdW5jdGlvbiBrZShuKXtpZighJGUobikpcmV0dXJuO2NvbnN0IG89bi5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO24uX2Nsb3NlUmVxdWVzdGVkPSEwLG4uX3F1ZXVlLmxlbmd0aD09PTAmJihUdChuKSx0dChvKSl9dShrZSxcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZVwiKTtmdW5jdGlvbiBEZShuLG8pe2lmKCEkZShuKSlyZXR1cm47Y29uc3QgYT1uLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07aWYoVGUoYSkmJm90KGEpPjApVXQoYSxvLCExKTtlbHNle2xldCBwO3RyeXtwPW4uX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobShvKX1jYXRjaChnKXt0aHJvdyByZShuLGcpLGd9dHJ5e0d0KG4sbyxwKX1jYXRjaChnKXt0aHJvdyByZShuLGcpLGd9fVhlKG4pfXUoRGUsXCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZVwiKTtmdW5jdGlvbiByZShuLG8pe2NvbnN0IGE9bi5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtO2EuX3N0YXRlPT09XCJyZWFkYWJsZVwiJiYoX2UobiksVHQobiksUG4oYSxvKSl9dShyZSxcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvclwiKTtmdW5jdGlvbiBwcihuKXtjb25zdCBvPW4uX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbS5fc3RhdGU7cmV0dXJuIG89PT1cImVycm9yZWRcIj9udWxsOm89PT1cImNsb3NlZFwiPzA6bi5fc3RyYXRlZ3lIV00tbi5fcXVldWVUb3RhbFNpemV9dShwcixcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZVwiKTtmdW5jdGlvbiBKbyhuKXtyZXR1cm4hd24obil9dShKbyxcIlJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJIYXNCYWNrcHJlc3N1cmVcIik7ZnVuY3Rpb24gJGUobil7Y29uc3Qgbz1uLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW0uX3N0YXRlO3JldHVybiFuLl9jbG9zZVJlcXVlc3RlZCYmbz09PVwicmVhZGFibGVcIn11KCRlLFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNhbkNsb3NlT3JFbnF1ZXVlXCIpO2Z1bmN0aW9uIFJuKG4sbyxhLHAsZyxfLFMpe28uX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbT1uLG8uX3F1ZXVlPXZvaWQgMCxvLl9xdWV1ZVRvdGFsU2l6ZT12b2lkIDAsX2Uobyksby5fc3RhcnRlZD0hMSxvLl9jbG9zZVJlcXVlc3RlZD0hMSxvLl9wdWxsQWdhaW49ITEsby5fcHVsbGluZz0hMSxvLl9zdHJhdGVneVNpemVBbGdvcml0aG09UyxvLl9zdHJhdGVneUhXTT1fLG8uX3B1bGxBbGdvcml0aG09cCxvLl9jYW5jZWxBbGdvcml0aG09ZyxuLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI9bztjb25zdCBDPWEoKTtFKFcoQyksKCk9PihvLl9zdGFydGVkPSEwLFhlKG8pLG51bGwpLHE9PihyZShvLHEpLG51bGwpKX11KFJuLFwiU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyXCIpO2Z1bmN0aW9uIFhvKG4sbyxhLHApe2NvbnN0IGc9T2JqZWN0LmNyZWF0ZShoZS5wcm90b3R5cGUpO2xldCBfLFMsQztvLnN0YXJ0IT09dm9pZCAwP189dSgoKT0+by5zdGFydChnKSxcInN0YXJ0QWxnb3JpdGhtXCIpOl89dSgoKT0+e30sXCJzdGFydEFsZ29yaXRobVwiKSxvLnB1bGwhPT12b2lkIDA/Uz11KCgpPT5vLnB1bGwoZyksXCJwdWxsQWxnb3JpdGhtXCIpOlM9dSgoKT0+Vyh2b2lkIDApLFwicHVsbEFsZ29yaXRobVwiKSxvLmNhbmNlbCE9PXZvaWQgMD9DPXUocT0+by5jYW5jZWwocSksXCJjYW5jZWxBbGdvcml0aG1cIik6Qz11KCgpPT5XKHZvaWQgMCksXCJjYW5jZWxBbGdvcml0aG1cIiksUm4obixnLF8sUyxDLGEscCl9dShYbyxcIlNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlXCIpO2Z1bmN0aW9uIEN0KG4pe3JldHVybiBuZXcgVHlwZUVycm9yKGBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS4ke259IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyYCl9dShDdCxcImRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxXCIpO2Z1bmN0aW9uIGVpKG4sbyl7cmV0dXJuIHZlKG4uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik/cmkobik6dGkobil9dShlaSxcIlJlYWRhYmxlU3RyZWFtVGVlXCIpO2Z1bmN0aW9uIHRpKG4sbyl7Y29uc3QgYT1GZShuKTtsZXQgcD0hMSxnPSExLF89ITEsUz0hMSxDLHEsUCxrLE87Y29uc3Qgaj16KFk9PntPPVl9KTtmdW5jdGlvbiBvZSgpe3JldHVybiBwPyhnPSEwLFcodm9pZCAwKSk6KHA9ITAsVmUoYSx7X2NodW5rU3RlcHM6dShHPT57c2UoKCk9PntnPSExO2NvbnN0IHRlPUcsYmU9RztffHxEZShQLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsdGUpLFN8fERlKGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixiZSkscD0hMSxnJiZvZSgpfSl9LFwiX2NodW5rU3RlcHNcIiksX2Nsb3NlU3RlcHM6dSgoKT0+e3A9ITEsX3x8a2UoUC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKSxTfHxrZShrLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpLCghX3x8IVMpJiZPKHZvaWQgMCl9LFwiX2Nsb3NlU3RlcHNcIiksX2Vycm9yU3RlcHM6dSgoKT0+e3A9ITF9LFwiX2Vycm9yU3RlcHNcIil9KSxXKHZvaWQgMCkpfXUob2UsXCJwdWxsQWxnb3JpdGhtXCIpO2Z1bmN0aW9uIHhlKFkpe2lmKF89ITAsQz1ZLFMpe2NvbnN0IEc9UWUoW0MscV0pLHRlPW5lKG4sRyk7Tyh0ZSl9cmV0dXJuIGp9dSh4ZSxcImNhbmNlbDFBbGdvcml0aG1cIik7ZnVuY3Rpb24gUGUoWSl7aWYoUz0hMCxxPVksXyl7Y29uc3QgRz1RZShbQyxxXSksdGU9bmUobixHKTtPKHRlKX1yZXR1cm4gan11KFBlLFwiY2FuY2VsMkFsZ29yaXRobVwiKTtmdW5jdGlvbiBwZSgpe31yZXR1cm4gdShwZSxcInN0YXJ0QWxnb3JpdGhtXCIpLFA9ZXQocGUsb2UseGUpLGs9ZXQocGUsb2UsUGUpLE0oYS5fY2xvc2VkUHJvbWlzZSxZPT4ocmUoUC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLFkpLHJlKGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixZKSwoIV98fCFTKSYmTyh2b2lkIDApLG51bGwpKSxbUCxrXX11KHRpLFwiUmVhZGFibGVTdHJlYW1EZWZhdWx0VGVlXCIpO2Z1bmN0aW9uIHJpKG4pe2xldCBvPUZlKG4pLGE9ITEscD0hMSxnPSExLF89ITEsUz0hMSxDLHEsUCxrLE87Y29uc3Qgaj16KHY9PntPPXZ9KTtmdW5jdGlvbiBvZSh2KXtNKHYuX2Nsb3NlZFByb21pc2UsST0+KHYhPT1vfHwoZWUoUC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLEkpLGVlKGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixJKSwoIV98fCFTKSYmTyh2b2lkIDApKSxudWxsKSl9dShvZSxcImZvcndhcmRSZWFkZXJFcnJvclwiKTtmdW5jdGlvbiB4ZSgpe0JlKG8pJiYodWUobyksbz1GZShuKSxvZShvKSksVmUobyx7X2NodW5rU3RlcHM6dShJPT57c2UoKCk9PntwPSExLGc9ITE7Y29uc3QgTD1JO2xldCBKPUk7aWYoIV8mJiFTKXRyeXtKPURyKEkpfWNhdGNoKFVlKXtlZShQLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsVWUpLGVlKGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixVZSksTyhuZShuLFVlKSk7cmV0dXJufV98fGx0KFAuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixMKSxTfHxsdChrLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsSiksYT0hMSxwP3BlKCk6ZyYmWSgpfSl9LFwiX2NodW5rU3RlcHNcIiksX2Nsb3NlU3RlcHM6dSgoKT0+e2E9ITEsX3x8WWUoUC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKSxTfHxZZShrLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpLFAuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCYmZnQoUC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLDApLGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCYmZnQoay5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLDApLCghX3x8IVMpJiZPKHZvaWQgMCl9LFwiX2Nsb3NlU3RlcHNcIiksX2Vycm9yU3RlcHM6dSgoKT0+e2E9ITF9LFwiX2Vycm9yU3RlcHNcIil9KX11KHhlLFwicHVsbFdpdGhEZWZhdWx0UmVhZGVyXCIpO2Z1bmN0aW9uIFBlKHYsSSl7eWUobykmJih1ZShvKSxvPUpyKG4pLG9lKG8pKTtjb25zdCBMPUk/azpQLEo9ST9QOms7dG4obyx2LDEse19jaHVua1N0ZXBzOnUoTmU9PntzZSgoKT0+e3A9ITEsZz0hMTtjb25zdCBIZT1JP1M6XztpZihJP186UylIZXx8Y3QoTC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLE5lKTtlbHNle2xldCBMbjt0cnl7TG49RHIoTmUpfWNhdGNoKF9yKXtlZShMLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsX3IpLGVlKEouX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixfciksTyhuZShuLF9yKSk7cmV0dXJufUhlfHxjdChMLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsTmUpLGx0KEouX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixMbil9YT0hMSxwP3BlKCk6ZyYmWSgpfSl9LFwiX2NodW5rU3RlcHNcIiksX2Nsb3NlU3RlcHM6dShOZT0+e2E9ITE7Y29uc3QgSGU9ST9TOl8sa3Q9ST9fOlM7SGV8fFllKEwuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciksa3R8fFllKEouX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciksTmUhPT12b2lkIDAmJihIZXx8Y3QoTC5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLE5lKSwha3QmJkouX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGg+MCYmZnQoSi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLDApKSwoIUhlfHwha3QpJiZPKHZvaWQgMCl9LFwiX2Nsb3NlU3RlcHNcIiksX2Vycm9yU3RlcHM6dSgoKT0+e2E9ITF9LFwiX2Vycm9yU3RlcHNcIil9KX11KFBlLFwicHVsbFdpdGhCWU9CUmVhZGVyXCIpO2Z1bmN0aW9uIHBlKCl7aWYoYSlyZXR1cm4gcD0hMCxXKHZvaWQgMCk7YT0hMDtjb25zdCB2PWVyKFAuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7cmV0dXJuIHY9PT1udWxsP3hlKCk6UGUodi5fdmlldywhMSksVyh2b2lkIDApfXUocGUsXCJwdWxsMUFsZ29yaXRobVwiKTtmdW5jdGlvbiBZKCl7aWYoYSlyZXR1cm4gZz0hMCxXKHZvaWQgMCk7YT0hMDtjb25zdCB2PWVyKGsuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7cmV0dXJuIHY9PT1udWxsP3hlKCk6UGUodi5fdmlldywhMCksVyh2b2lkIDApfXUoWSxcInB1bGwyQWxnb3JpdGhtXCIpO2Z1bmN0aW9uIEcodil7aWYoXz0hMCxDPXYsUyl7Y29uc3QgST1RZShbQyxxXSksTD1uZShuLEkpO08oTCl9cmV0dXJuIGp9dShHLFwiY2FuY2VsMUFsZ29yaXRobVwiKTtmdW5jdGlvbiB0ZSh2KXtpZihTPSEwLHE9dixfKXtjb25zdCBJPVFlKFtDLHFdKSxMPW5lKG4sSSk7TyhMKX1yZXR1cm4gan11KHRlLFwiY2FuY2VsMkFsZ29yaXRobVwiKTtmdW5jdGlvbiBiZSgpe31yZXR1cm4gdShiZSxcInN0YXJ0QWxnb3JpdGhtXCIpLFA9Q24oYmUscGUsRyksaz1DbihiZSxZLHRlKSxvZShvKSxbUCxrXX11KHJpLFwiUmVhZGFibGVCeXRlU3RyZWFtVGVlXCIpO2Z1bmN0aW9uIG5pKG4pe3JldHVybiBiKG4pJiZ0eXBlb2Ygbi5nZXRSZWFkZXI8XCJ1XCJ9dShuaSxcImlzUmVhZGFibGVTdHJlYW1MaWtlXCIpO2Z1bmN0aW9uIG9pKG4pe3JldHVybiBuaShuKT9haShuLmdldFJlYWRlcigpKTppaShuKX11KG9pLFwiUmVhZGFibGVTdHJlYW1Gcm9tXCIpO2Z1bmN0aW9uIGlpKG4pe2xldCBvO2NvbnN0IGE9THIobixcImFzeW5jXCIpLHA9eTtmdW5jdGlvbiBnKCl7bGV0IFM7dHJ5e1M9R24oYSl9Y2F0Y2gocSl7cmV0dXJuIFQocSl9Y29uc3QgQz1XKFMpO3JldHVybiBVKEMscT0+e2lmKCFiKHEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgaXRlcmF0b3IubmV4dCgpIG1ldGhvZCBtdXN0IGZ1bGZpbGwgd2l0aCBhbiBvYmplY3RcIik7aWYoWm4ocSkpa2Uoby5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKTtlbHNle2NvbnN0IGs9S24ocSk7RGUoby5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLGspfX0pfXUoZyxcInB1bGxBbGdvcml0aG1cIik7ZnVuY3Rpb24gXyhTKXtjb25zdCBDPWEuaXRlcmF0b3I7bGV0IHE7dHJ5e3E9YXQoQyxcInJldHVyblwiKX1jYXRjaChPKXtyZXR1cm4gVChPKX1pZihxPT09dm9pZCAwKXJldHVybiBXKHZvaWQgMCk7bGV0IFA7dHJ5e1A9JChxLEMsW1NdKX1jYXRjaChPKXtyZXR1cm4gVChPKX1jb25zdCBrPVcoUCk7cmV0dXJuIFUoayxPPT57aWYoIWIoTykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSBpdGVyYXRvci5yZXR1cm4oKSBtZXRob2QgbXVzdCBmdWxmaWxsIHdpdGggYW4gb2JqZWN0XCIpfSl9cmV0dXJuIHUoXyxcImNhbmNlbEFsZ29yaXRobVwiKSxvPWV0KHAsZyxfLDApLG99dShpaSxcIlJlYWRhYmxlU3RyZWFtRnJvbUl0ZXJhYmxlXCIpO2Z1bmN0aW9uIGFpKG4pe2xldCBvO2NvbnN0IGE9eTtmdW5jdGlvbiBwKCl7bGV0IF87dHJ5e189bi5yZWFkKCl9Y2F0Y2goUyl7cmV0dXJuIFQoUyl9cmV0dXJuIFUoXyxTPT57aWYoIWIoUykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBwcm9taXNlIHJldHVybmVkIGJ5IHRoZSByZWFkZXIucmVhZCgpIG1ldGhvZCBtdXN0IGZ1bGZpbGwgd2l0aCBhbiBvYmplY3RcIik7aWYoUy5kb25lKWtlKG8uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7ZWxzZXtjb25zdCBDPVMudmFsdWU7RGUoby5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLEMpfX0pfXUocCxcInB1bGxBbGdvcml0aG1cIik7ZnVuY3Rpb24gZyhfKXt0cnl7cmV0dXJuIFcobi5jYW5jZWwoXykpfWNhdGNoKFMpe3JldHVybiBUKFMpfX1yZXR1cm4gdShnLFwiY2FuY2VsQWxnb3JpdGhtXCIpLG89ZXQoYSxwLGcsMCksb311KGFpLFwiUmVhZGFibGVTdHJlYW1Gcm9tRGVmYXVsdFJlYWRlclwiKTtmdW5jdGlvbiBzaShuLG8pe2llKG4sbyk7Y29uc3QgYT1uLHA9YT8uYXV0b0FsbG9jYXRlQ2h1bmtTaXplLGc9YT8uY2FuY2VsLF89YT8ucHVsbCxTPWE/LnN0YXJ0LEM9YT8udHlwZTtyZXR1cm57YXV0b0FsbG9jYXRlQ2h1bmtTaXplOnA9PT12b2lkIDA/dm9pZCAwOk10KHAsYCR7b30gaGFzIG1lbWJlciAnYXV0b0FsbG9jYXRlQ2h1bmtTaXplJyB0aGF0YCksY2FuY2VsOmc9PT12b2lkIDA/dm9pZCAwOnVpKGcsYSxgJHtvfSBoYXMgbWVtYmVyICdjYW5jZWwnIHRoYXRgKSxwdWxsOl89PT12b2lkIDA/dm9pZCAwOmxpKF8sYSxgJHtvfSBoYXMgbWVtYmVyICdwdWxsJyB0aGF0YCksc3RhcnQ6Uz09PXZvaWQgMD92b2lkIDA6ZmkoUyxhLGAke299IGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0YCksdHlwZTpDPT09dm9pZCAwP3ZvaWQgMDpjaShDLGAke299IGhhcyBtZW1iZXIgJ3R5cGUnIHRoYXRgKX19dShzaSxcImNvbnZlcnRVbmRlcmx5aW5nRGVmYXVsdE9yQnl0ZVNvdXJjZVwiKTtmdW5jdGlvbiB1aShuLG8sYSl7cmV0dXJuIFgobixhKSxwPT5OKG4sbyxbcF0pfXUodWksXCJjb252ZXJ0VW5kZXJseWluZ1NvdXJjZUNhbmNlbENhbGxiYWNrXCIpO2Z1bmN0aW9uIGxpKG4sbyxhKXtyZXR1cm4gWChuLGEpLHA9Pk4obixvLFtwXSl9dShsaSxcImNvbnZlcnRVbmRlcmx5aW5nU291cmNlUHVsbENhbGxiYWNrXCIpO2Z1bmN0aW9uIGZpKG4sbyxhKXtyZXR1cm4gWChuLGEpLHA9PiQobixvLFtwXSl9dShmaSxcImNvbnZlcnRVbmRlcmx5aW5nU291cmNlU3RhcnRDYWxsYmFja1wiKTtmdW5jdGlvbiBjaShuLG8pe2lmKG49YCR7bn1gLG4hPT1cImJ5dGVzXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtvfSAnJHtufScgaXMgbm90IGEgdmFsaWQgZW51bWVyYXRpb24gdmFsdWUgZm9yIFJlYWRhYmxlU3RyZWFtVHlwZWApO3JldHVybiBufXUoY2ksXCJjb252ZXJ0UmVhZGFibGVTdHJlYW1UeXBlXCIpO2Z1bmN0aW9uIGRpKG4sbyl7cmV0dXJuIGllKG4sbykse3ByZXZlbnRDYW5jZWw6ISFuPy5wcmV2ZW50Q2FuY2VsfX11KGRpLFwiY29udmVydEl0ZXJhdG9yT3B0aW9uc1wiKTtmdW5jdGlvbiBUbihuLG8pe2llKG4sbyk7Y29uc3QgYT1uPy5wcmV2ZW50QWJvcnQscD1uPy5wcmV2ZW50Q2FuY2VsLGc9bj8ucHJldmVudENsb3NlLF89bj8uc2lnbmFsO3JldHVybiBfIT09dm9pZCAwJiZoaShfLGAke299IGhhcyBtZW1iZXIgJ3NpZ25hbCcgdGhhdGApLHtwcmV2ZW50QWJvcnQ6ISFhLHByZXZlbnRDYW5jZWw6ISFwLHByZXZlbnRDbG9zZTohIWcsc2lnbmFsOl99fXUoVG4sXCJjb252ZXJ0UGlwZU9wdGlvbnNcIik7ZnVuY3Rpb24gaGkobixvKXtpZighd28obikpdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtvfSBpcyBub3QgYW4gQWJvcnRTaWduYWwuYCl9dShoaSxcImFzc2VydEFib3J0U2lnbmFsXCIpO2Z1bmN0aW9uIHBpKG4sbyl7aWUobixvKTtjb25zdCBhPW4/LnJlYWRhYmxlO0R0KGEsXCJyZWFkYWJsZVwiLFwiUmVhZGFibGVXcml0YWJsZVBhaXJcIikseHQoYSxgJHtvfSBoYXMgbWVtYmVyICdyZWFkYWJsZScgdGhhdGApO2NvbnN0IHA9bj8ud3JpdGFibGU7cmV0dXJuIER0KHAsXCJ3cml0YWJsZVwiLFwiUmVhZGFibGVXcml0YWJsZVBhaXJcIiksbm4ocCxgJHtvfSBoYXMgbWVtYmVyICd3cml0YWJsZScgdGhhdGApLHtyZWFkYWJsZTphLHdyaXRhYmxlOnB9fXUocGksXCJjb252ZXJ0UmVhZGFibGVXcml0YWJsZVBhaXJcIik7Y2xhc3MgSHtzdGF0aWN7dSh0aGlzLFwiUmVhZGFibGVTdHJlYW1cIil9Y29uc3RydWN0b3Iobz17fSxhPXt9KXtvPT09dm9pZCAwP289bnVsbDpFcihvLFwiRmlyc3QgcGFyYW1ldGVyXCIpO2NvbnN0IHA9cHQoYSxcIlNlY29uZCBwYXJhbWV0ZXJcIiksZz1zaShvLFwiRmlyc3QgcGFyYW1ldGVyXCIpO2lmKGJyKHRoaXMpLGcudHlwZT09PVwiYnl0ZXNcIil7aWYocC5zaXplIT09dm9pZCAwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHN0cmF0ZWd5IGZvciBhIGJ5dGUgc3RyZWFtIGNhbm5vdCBoYXZlIGEgc2l6ZSBmdW5jdGlvblwiKTtjb25zdCBfPVplKHAsMCk7c28odGhpcyxnLF8pfWVsc2V7Y29uc3QgXz1odChwKSxTPVplKHAsMSk7WG8odGhpcyxnLFMsXyl9fWdldCBsb2NrZWQoKXtpZighUmUodGhpcykpdGhyb3cgT2UoXCJsb2NrZWRcIik7cmV0dXJuIFRlKHRoaXMpfWNhbmNlbChvPXZvaWQgMCl7cmV0dXJuIFJlKHRoaXMpP1RlKHRoaXMpP1QobmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYW5jZWwgYSBzdHJlYW0gdGhhdCBhbHJlYWR5IGhhcyBhIHJlYWRlclwiKSk6bmUodGhpcyxvKTpUKE9lKFwiY2FuY2VsXCIpKX1nZXRSZWFkZXIobz12b2lkIDApe2lmKCFSZSh0aGlzKSl0aHJvdyBPZShcImdldFJlYWRlclwiKTtyZXR1cm4gbG8obyxcIkZpcnN0IHBhcmFtZXRlclwiKS5tb2RlPT09dm9pZCAwP0ZlKHRoaXMpOkpyKHRoaXMpfXBpcGVUaHJvdWdoKG8sYT17fSl7aWYoIVJlKHRoaXMpKXRocm93IE9lKFwicGlwZVRocm91Z2hcIik7bGUobywxLFwicGlwZVRocm91Z2hcIik7Y29uc3QgcD1waShvLFwiRmlyc3QgcGFyYW1ldGVyXCIpLGc9VG4oYSxcIlNlY29uZCBwYXJhbWV0ZXJcIik7aWYoVGUodGhpcykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVGhyb3VnaCBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbVwiKTtpZihqZShwLndyaXRhYmxlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUaHJvdWdoIGNhbm5vdCBiZSB1c2VkIG9uIGEgbG9ja2VkIFdyaXRhYmxlU3RyZWFtXCIpO2NvbnN0IF89U24odGhpcyxwLndyaXRhYmxlLGcucHJldmVudENsb3NlLGcucHJldmVudEFib3J0LGcucHJldmVudENhbmNlbCxnLnNpZ25hbCk7cmV0dXJuIEsoXykscC5yZWFkYWJsZX1waXBlVG8obyxhPXt9KXtpZighUmUodGhpcykpcmV0dXJuIFQoT2UoXCJwaXBlVG9cIikpO2lmKG89PT12b2lkIDApcmV0dXJuIFQoXCJQYXJhbWV0ZXIgMSBpcyByZXF1aXJlZCBpbiAncGlwZVRvJy5cIik7aWYoIXplKG8pKXJldHVybiBUKG5ldyBUeXBlRXJyb3IoXCJSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRvJ3MgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIFdyaXRhYmxlU3RyZWFtXCIpKTtsZXQgcDt0cnl7cD1UbihhLFwiU2Vjb25kIHBhcmFtZXRlclwiKX1jYXRjaChnKXtyZXR1cm4gVChnKX1yZXR1cm4gVGUodGhpcyk/VChuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbVwiKSk6amUobyk/VChuZXcgVHlwZUVycm9yKFwiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBXcml0YWJsZVN0cmVhbVwiKSk6U24odGhpcyxvLHAucHJldmVudENsb3NlLHAucHJldmVudEFib3J0LHAucHJldmVudENhbmNlbCxwLnNpZ25hbCl9dGVlKCl7aWYoIVJlKHRoaXMpKXRocm93IE9lKFwidGVlXCIpO2NvbnN0IG89ZWkodGhpcyk7cmV0dXJuIFFlKG8pfXZhbHVlcyhvPXZvaWQgMCl7aWYoIVJlKHRoaXMpKXRocm93IE9lKFwidmFsdWVzXCIpO2NvbnN0IGE9ZGkobyxcIkZpcnN0IHBhcmFtZXRlclwiKTtyZXR1cm4gUW4odGhpcyxhLnByZXZlbnRDYW5jZWwpfVtRdF0obyl7cmV0dXJuIHRoaXMudmFsdWVzKG8pfXN0YXRpYyBmcm9tKG8pe3JldHVybiBvaShvKX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoSCx7ZnJvbTp7ZW51bWVyYWJsZTohMH19KSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhILnByb3RvdHlwZSx7Y2FuY2VsOntlbnVtZXJhYmxlOiEwfSxnZXRSZWFkZXI6e2VudW1lcmFibGU6ITB9LHBpcGVUaHJvdWdoOntlbnVtZXJhYmxlOiEwfSxwaXBlVG86e2VudW1lcmFibGU6ITB9LHRlZTp7ZW51bWVyYWJsZTohMH0sdmFsdWVzOntlbnVtZXJhYmxlOiEwfSxsb2NrZWQ6e2VudW1lcmFibGU6ITB9fSksdyhILmZyb20sXCJmcm9tXCIpLHcoSC5wcm90b3R5cGUuY2FuY2VsLFwiY2FuY2VsXCIpLHcoSC5wcm90b3R5cGUuZ2V0UmVhZGVyLFwiZ2V0UmVhZGVyXCIpLHcoSC5wcm90b3R5cGUucGlwZVRocm91Z2gsXCJwaXBlVGhyb3VnaFwiKSx3KEgucHJvdG90eXBlLnBpcGVUbyxcInBpcGVUb1wiKSx3KEgucHJvdG90eXBlLnRlZSxcInRlZVwiKSx3KEgucHJvdG90eXBlLnZhbHVlcyxcInZhbHVlc1wiKSx0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnPT1cInN5bWJvbFwiJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoSC5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlJlYWRhYmxlU3RyZWFtXCIsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KEgucHJvdG90eXBlLFF0LHt2YWx1ZTpILnByb3RvdHlwZS52YWx1ZXMsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfSk7ZnVuY3Rpb24gZXQobixvLGEscD0xLGc9KCk9PjEpe2NvbnN0IF89T2JqZWN0LmNyZWF0ZShILnByb3RvdHlwZSk7YnIoXyk7Y29uc3QgUz1PYmplY3QuY3JlYXRlKGhlLnByb3RvdHlwZSk7cmV0dXJuIFJuKF8sUyxuLG8sYSxwLGcpLF99dShldCxcIkNyZWF0ZVJlYWRhYmxlU3RyZWFtXCIpO2Z1bmN0aW9uIENuKG4sbyxhKXtjb25zdCBwPU9iamVjdC5jcmVhdGUoSC5wcm90b3R5cGUpO2JyKHApO2NvbnN0IGc9T2JqZWN0LmNyZWF0ZShjZS5wcm90b3R5cGUpO3JldHVybiBLcihwLGcsbixvLGEsMCx2b2lkIDApLHB9dShDbixcIkNyZWF0ZVJlYWRhYmxlQnl0ZVN0cmVhbVwiKTtmdW5jdGlvbiBicihuKXtuLl9zdGF0ZT1cInJlYWRhYmxlXCIsbi5fcmVhZGVyPXZvaWQgMCxuLl9zdG9yZWRFcnJvcj12b2lkIDAsbi5fZGlzdHVyYmVkPSExfXUoYnIsXCJJbml0aWFsaXplUmVhZGFibGVTdHJlYW1cIik7ZnVuY3Rpb24gUmUobil7cmV0dXJuIWIobil8fCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcIl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXJcIik/ITE6biBpbnN0YW5jZW9mIEh9dShSZSxcIklzUmVhZGFibGVTdHJlYW1cIik7ZnVuY3Rpb24gVGUobil7cmV0dXJuIG4uX3JlYWRlciE9PXZvaWQgMH11KFRlLFwiSXNSZWFkYWJsZVN0cmVhbUxvY2tlZFwiKTtmdW5jdGlvbiBuZShuLG8pe2lmKG4uX2Rpc3R1cmJlZD0hMCxuLl9zdGF0ZT09PVwiY2xvc2VkXCIpcmV0dXJuIFcodm9pZCAwKTtpZihuLl9zdGF0ZT09PVwiZXJyb3JlZFwiKXJldHVybiBUKG4uX3N0b3JlZEVycm9yKTt0dChuKTtjb25zdCBhPW4uX3JlYWRlcjtpZihhIT09dm9pZCAwJiZCZShhKSl7Y29uc3QgZz1hLl9yZWFkSW50b1JlcXVlc3RzO2EuX3JlYWRJbnRvUmVxdWVzdHM9bmV3IFEsZy5mb3JFYWNoKF89PntfLl9jbG9zZVN0ZXBzKHZvaWQgMCl9KX1jb25zdCBwPW4uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltPdF0obyk7cmV0dXJuIFUocCx5KX11KG5lLFwiUmVhZGFibGVTdHJlYW1DYW5jZWxcIik7ZnVuY3Rpb24gdHQobil7bi5fc3RhdGU9XCJjbG9zZWRcIjtjb25zdCBvPW4uX3JlYWRlcjtpZihvIT09dm9pZCAwJiYoQ3IobykseWUobykpKXtjb25zdCBhPW8uX3JlYWRSZXF1ZXN0cztvLl9yZWFkUmVxdWVzdHM9bmV3IFEsYS5mb3JFYWNoKHA9PntwLl9jbG9zZVN0ZXBzKCl9KX19dSh0dCxcIlJlYWRhYmxlU3RyZWFtQ2xvc2VcIik7ZnVuY3Rpb24gUG4obixvKXtuLl9zdGF0ZT1cImVycm9yZWRcIixuLl9zdG9yZWRFcnJvcj1vO2NvbnN0IGE9bi5fcmVhZGVyO2EhPT12b2lkIDAmJihMdChhLG8pLHllKGEpP3FyKGEsbyk6cm4oYSxvKSl9dShQbixcIlJlYWRhYmxlU3RyZWFtRXJyb3JcIik7ZnVuY3Rpb24gT2Uobil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS4ke259IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbWApfXUoT2UsXCJzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDFcIik7ZnVuY3Rpb24gRW4obixvKXtpZShuLG8pO2NvbnN0IGE9bj8uaGlnaFdhdGVyTWFyaztyZXR1cm4gRHQoYSxcImhpZ2hXYXRlck1hcmtcIixcIlF1ZXVpbmdTdHJhdGVneUluaXRcIikse2hpZ2hXYXRlck1hcms6JHQoYSl9fXUoRW4sXCJjb252ZXJ0UXVldWluZ1N0cmF0ZWd5SW5pdFwiKTtjb25zdCB2bj11KG49Pm4uYnl0ZUxlbmd0aCxcImJ5dGVMZW5ndGhTaXplRnVuY3Rpb25cIik7dyh2bixcInNpemVcIik7Y2xhc3MgUHR7c3RhdGlje3UodGhpcyxcIkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lcIil9Y29uc3RydWN0b3Iobyl7bGUobywxLFwiQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneVwiKSxvPUVuKG8sXCJGaXJzdCBwYXJhbWV0ZXJcIiksdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcms9by5oaWdoV2F0ZXJNYXJrfWdldCBoaWdoV2F0ZXJNYXJrKCl7aWYoIUJuKHRoaXMpKXRocm93IEFuKFwiaGlnaFdhdGVyTWFya1wiKTtyZXR1cm4gdGhpcy5fYnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmt9Z2V0IHNpemUoKXtpZighQm4odGhpcykpdGhyb3cgQW4oXCJzaXplXCIpO3JldHVybiB2bn19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUHQucHJvdG90eXBlLHtoaWdoV2F0ZXJNYXJrOntlbnVtZXJhYmxlOiEwfSxzaXplOntlbnVtZXJhYmxlOiEwfX0pLHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc9PVwic3ltYm9sXCImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQdC5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIkJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lcIixjb25maWd1cmFibGU6ITB9KTtmdW5jdGlvbiBBbihuKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUuJHtufSBjYW4gb25seSBiZSB1c2VkIG9uIGEgQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneWApfXUoQW4sXCJieXRlTGVuZ3RoQnJhbmRDaGVja0V4Y2VwdGlvblwiKTtmdW5jdGlvbiBCbihuKXtyZXR1cm4hYihuKXx8IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiX2J5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3lIaWdoV2F0ZXJNYXJrXCIpPyExOm4gaW5zdGFuY2VvZiBQdH11KEJuLFwiSXNCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5XCIpO2NvbnN0IHFuPXUoKCk9PjEsXCJjb3VudFNpemVGdW5jdGlvblwiKTt3KHFuLFwic2l6ZVwiKTtjbGFzcyBFdHtzdGF0aWN7dSh0aGlzLFwiQ291bnRRdWV1aW5nU3RyYXRlZ3lcIil9Y29uc3RydWN0b3Iobyl7bGUobywxLFwiQ291bnRRdWV1aW5nU3RyYXRlZ3lcIiksbz1FbihvLFwiRmlyc3QgcGFyYW1ldGVyXCIpLHRoaXMuX2NvdW50UXVldWluZ1N0cmF0ZWd5SGlnaFdhdGVyTWFyaz1vLmhpZ2hXYXRlck1hcmt9Z2V0IGhpZ2hXYXRlck1hcmsoKXtpZigha24odGhpcykpdGhyb3cgV24oXCJoaWdoV2F0ZXJNYXJrXCIpO3JldHVybiB0aGlzLl9jb3VudFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmt9Z2V0IHNpemUoKXtpZigha24odGhpcykpdGhyb3cgV24oXCJzaXplXCIpO3JldHVybiBxbn19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRXQucHJvdG90eXBlLHtoaWdoV2F0ZXJNYXJrOntlbnVtZXJhYmxlOiEwfSxzaXplOntlbnVtZXJhYmxlOiEwfX0pLHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc9PVwic3ltYm9sXCImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdC5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIkNvdW50UXVldWluZ1N0cmF0ZWd5XCIsY29uZmlndXJhYmxlOiEwfSk7ZnVuY3Rpb24gV24obil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYENvdW50UXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZS4ke259IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBDb3VudFF1ZXVpbmdTdHJhdGVneWApfXUoV24sXCJjb3VudEJyYW5kQ2hlY2tFeGNlcHRpb25cIik7ZnVuY3Rpb24ga24obil7cmV0dXJuIWIobil8fCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixcIl9jb3VudFF1ZXVpbmdTdHJhdGVneUhpZ2hXYXRlck1hcmtcIik/ITE6biBpbnN0YW5jZW9mIEV0fXUoa24sXCJJc0NvdW50UXVldWluZ1N0cmF0ZWd5XCIpO2Z1bmN0aW9uIGJpKG4sbyl7aWUobixvKTtjb25zdCBhPW4/LmNhbmNlbCxwPW4/LmZsdXNoLGc9bj8ucmVhZGFibGVUeXBlLF89bj8uc3RhcnQsUz1uPy50cmFuc2Zvcm0sQz1uPy53cml0YWJsZVR5cGU7cmV0dXJue2NhbmNlbDphPT09dm9pZCAwP3ZvaWQgMDpfaShhLG4sYCR7b30gaGFzIG1lbWJlciAnY2FuY2VsJyB0aGF0YCksZmx1c2g6cD09PXZvaWQgMD92b2lkIDA6bWkocCxuLGAke299IGhhcyBtZW1iZXIgJ2ZsdXNoJyB0aGF0YCkscmVhZGFibGVUeXBlOmcsc3RhcnQ6Xz09PXZvaWQgMD92b2lkIDA6eWkoXyxuLGAke299IGhhcyBtZW1iZXIgJ3N0YXJ0JyB0aGF0YCksdHJhbnNmb3JtOlM9PT12b2lkIDA/dm9pZCAwOmdpKFMsbixgJHtvfSBoYXMgbWVtYmVyICd0cmFuc2Zvcm0nIHRoYXRgKSx3cml0YWJsZVR5cGU6Q319dShiaSxcImNvbnZlcnRUcmFuc2Zvcm1lclwiKTtmdW5jdGlvbiBtaShuLG8sYSl7cmV0dXJuIFgobixhKSxwPT5OKG4sbyxbcF0pfXUobWksXCJjb252ZXJ0VHJhbnNmb3JtZXJGbHVzaENhbGxiYWNrXCIpO2Z1bmN0aW9uIHlpKG4sbyxhKXtyZXR1cm4gWChuLGEpLHA9PiQobixvLFtwXSl9dSh5aSxcImNvbnZlcnRUcmFuc2Zvcm1lclN0YXJ0Q2FsbGJhY2tcIik7ZnVuY3Rpb24gZ2kobixvLGEpe3JldHVybiBYKG4sYSksKHAsZyk9Pk4obixvLFtwLGddKX11KGdpLFwiY29udmVydFRyYW5zZm9ybWVyVHJhbnNmb3JtQ2FsbGJhY2tcIik7ZnVuY3Rpb24gX2kobixvLGEpe3JldHVybiBYKG4sYSkscD0+TihuLG8sW3BdKX11KF9pLFwiY29udmVydFRyYW5zZm9ybWVyQ2FuY2VsQ2FsbGJhY2tcIik7Y2xhc3MgdnR7c3RhdGlje3UodGhpcyxcIlRyYW5zZm9ybVN0cmVhbVwiKX1jb25zdHJ1Y3RvcihvPXt9LGE9e30scD17fSl7bz09PXZvaWQgMCYmKG89bnVsbCk7Y29uc3QgZz1wdChhLFwiU2Vjb25kIHBhcmFtZXRlclwiKSxfPXB0KHAsXCJUaGlyZCBwYXJhbWV0ZXJcIiksUz1iaShvLFwiRmlyc3QgcGFyYW1ldGVyXCIpO2lmKFMucmVhZGFibGVUeXBlIT09dm9pZCAwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCByZWFkYWJsZVR5cGUgc3BlY2lmaWVkXCIpO2lmKFMud3JpdGFibGVUeXBlIT09dm9pZCAwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB3cml0YWJsZVR5cGUgc3BlY2lmaWVkXCIpO2NvbnN0IEM9WmUoXywwKSxxPWh0KF8pLFA9WmUoZywxKSxrPWh0KGcpO2xldCBPO2NvbnN0IGo9eihvZT0+e089b2V9KTtTaSh0aGlzLGosUCxrLEMscSksUmkodGhpcyxTKSxTLnN0YXJ0IT09dm9pZCAwP08oUy5zdGFydCh0aGlzLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKSk6Tyh2b2lkIDApfWdldCByZWFkYWJsZSgpe2lmKCFPbih0aGlzKSl0aHJvdyBqbihcInJlYWRhYmxlXCIpO3JldHVybiB0aGlzLl9yZWFkYWJsZX1nZXQgd3JpdGFibGUoKXtpZighT24odGhpcykpdGhyb3cgam4oXCJ3cml0YWJsZVwiKTtyZXR1cm4gdGhpcy5fd3JpdGFibGV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHZ0LnByb3RvdHlwZSx7cmVhZGFibGU6e2VudW1lcmFibGU6ITB9LHdyaXRhYmxlOntlbnVtZXJhYmxlOiEwfX0pLHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWc9PVwic3ltYm9sXCImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2dC5wcm90b3R5cGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIlRyYW5zZm9ybVN0cmVhbVwiLGNvbmZpZ3VyYWJsZTohMH0pO2Z1bmN0aW9uIFNpKG4sbyxhLHAsZyxfKXtmdW5jdGlvbiBTKCl7cmV0dXJuIG99dShTLFwic3RhcnRBbGdvcml0aG1cIik7ZnVuY3Rpb24gQyhqKXtyZXR1cm4gUGkobixqKX11KEMsXCJ3cml0ZUFsZ29yaXRobVwiKTtmdW5jdGlvbiBxKGope3JldHVybiBFaShuLGopfXUocSxcImFib3J0QWxnb3JpdGhtXCIpO2Z1bmN0aW9uIFAoKXtyZXR1cm4gdmkobil9dShQLFwiY2xvc2VBbGdvcml0aG1cIiksbi5fd3JpdGFibGU9Q28oUyxDLFAscSxhLHApO2Z1bmN0aW9uIGsoKXtyZXR1cm4gQWkobil9dShrLFwicHVsbEFsZ29yaXRobVwiKTtmdW5jdGlvbiBPKGope3JldHVybiBCaShuLGopfXUoTyxcImNhbmNlbEFsZ29yaXRobVwiKSxuLl9yZWFkYWJsZT1ldChTLGssTyxnLF8pLG4uX2JhY2twcmVzc3VyZT12b2lkIDAsbi5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZT12b2lkIDAsbi5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxBdChuLCEwKSxuLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyPXZvaWQgMH11KFNpLFwiSW5pdGlhbGl6ZVRyYW5zZm9ybVN0cmVhbVwiKTtmdW5jdGlvbiBPbihuKXtyZXR1cm4hYihuKXx8IU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLFwiX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXJcIik/ITE6biBpbnN0YW5jZW9mIHZ0fXUoT24sXCJJc1RyYW5zZm9ybVN0cmVhbVwiKTtmdW5jdGlvbiBGbihuLG8pe3JlKG4uX3JlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsbyksbXIobixvKX11KEZuLFwiVHJhbnNmb3JtU3RyZWFtRXJyb3JcIik7ZnVuY3Rpb24gbXIobixvKXtxdChuLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyKSxLZShuLl93cml0YWJsZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLG8pLHlyKG4pfXUobXIsXCJUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlXCIpO2Z1bmN0aW9uIHlyKG4pe24uX2JhY2twcmVzc3VyZSYmQXQobiwhMSl9dSh5cixcIlRyYW5zZm9ybVN0cmVhbVVuYmxvY2tXcml0ZVwiKTtmdW5jdGlvbiBBdChuLG8pe24uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UhPT12b2lkIDAmJm4uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2VfcmVzb2x2ZSgpLG4uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2U9eihhPT57bi5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlPWF9KSxuLl9iYWNrcHJlc3N1cmU9b311KEF0LFwiVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlXCIpO2NsYXNzIENle3N0YXRpY3t1KHRoaXMsXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiKX1jb25zdHJ1Y3Rvcigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbGxlZ2FsIGNvbnN0cnVjdG9yXCIpfWdldCBkZXNpcmVkU2l6ZSgpe2lmKCFCdCh0aGlzKSl0aHJvdyBXdChcImRlc2lyZWRTaXplXCIpO2NvbnN0IG89dGhpcy5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbS5fcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjtyZXR1cm4gcHIobyl9ZW5xdWV1ZShvPXZvaWQgMCl7aWYoIUJ0KHRoaXMpKXRocm93IFd0KFwiZW5xdWV1ZVwiKTtJbih0aGlzLG8pfWVycm9yKG89dm9pZCAwKXtpZighQnQodGhpcykpdGhyb3cgV3QoXCJlcnJvclwiKTtUaSh0aGlzLG8pfXRlcm1pbmF0ZSgpe2lmKCFCdCh0aGlzKSl0aHJvdyBXdChcInRlcm1pbmF0ZVwiKTtDaSh0aGlzKX19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ2UucHJvdG90eXBlLHtlbnF1ZXVlOntlbnVtZXJhYmxlOiEwfSxlcnJvcjp7ZW51bWVyYWJsZTohMH0sdGVybWluYXRlOntlbnVtZXJhYmxlOiEwfSxkZXNpcmVkU2l6ZTp7ZW51bWVyYWJsZTohMH19KSx3KENlLnByb3RvdHlwZS5lbnF1ZXVlLFwiZW5xdWV1ZVwiKSx3KENlLnByb3RvdHlwZS5lcnJvcixcImVycm9yXCIpLHcoQ2UucHJvdG90eXBlLnRlcm1pbmF0ZSxcInRlcm1pbmF0ZVwiKSx0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnPT1cInN5bWJvbFwiJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2UucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclwiLGNvbmZpZ3VyYWJsZTohMH0pO2Z1bmN0aW9uIEJ0KG4pe3JldHVybiFiKG4pfHwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sXCJfY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbVwiKT8hMTpuIGluc3RhbmNlb2YgQ2V9dShCdCxcIklzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIik7ZnVuY3Rpb24gd2kobixvLGEscCxnKXtvLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtPW4sbi5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcj1vLG8uX3RyYW5zZm9ybUFsZ29yaXRobT1hLG8uX2ZsdXNoQWxnb3JpdGhtPXAsby5fY2FuY2VsQWxnb3JpdGhtPWcsby5fZmluaXNoUHJvbWlzZT12b2lkIDAsby5fZmluaXNoUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxvLl9maW5pc2hQcm9taXNlX3JlamVjdD12b2lkIDB9dSh3aSxcIlNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcIik7ZnVuY3Rpb24gUmkobixvKXtjb25zdCBhPU9iamVjdC5jcmVhdGUoQ2UucHJvdG90eXBlKTtsZXQgcCxnLF87by50cmFuc2Zvcm0hPT12b2lkIDA/cD11KFM9Pm8udHJhbnNmb3JtKFMsYSksXCJ0cmFuc2Zvcm1BbGdvcml0aG1cIik6cD11KFM9Pnt0cnl7cmV0dXJuIEluKGEsUyksVyh2b2lkIDApfWNhdGNoKEMpe3JldHVybiBUKEMpfX0sXCJ0cmFuc2Zvcm1BbGdvcml0aG1cIiksby5mbHVzaCE9PXZvaWQgMD9nPXUoKCk9Pm8uZmx1c2goYSksXCJmbHVzaEFsZ29yaXRobVwiKTpnPXUoKCk9Plcodm9pZCAwKSxcImZsdXNoQWxnb3JpdGhtXCIpLG8uY2FuY2VsIT09dm9pZCAwP189dShTPT5vLmNhbmNlbChTKSxcImNhbmNlbEFsZ29yaXRobVwiKTpfPXUoKCk9Plcodm9pZCAwKSxcImNhbmNlbEFsZ29yaXRobVwiKSx3aShuLGEscCxnLF8pfXUoUmksXCJTZXRVcFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVRyYW5zZm9ybWVyXCIpO2Z1bmN0aW9uIHF0KG4pe24uX3RyYW5zZm9ybUFsZ29yaXRobT12b2lkIDAsbi5fZmx1c2hBbGdvcml0aG09dm9pZCAwLG4uX2NhbmNlbEFsZ29yaXRobT12b2lkIDB9dShxdCxcIlRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zXCIpO2Z1bmN0aW9uIEluKG4sbyl7Y29uc3QgYT1uLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLHA9YS5fcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjtpZighJGUocCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlYWRhYmxlIHNpZGUgaXMgbm90IGluIGEgc3RhdGUgdGhhdCBwZXJtaXRzIGVucXVldWVcIik7dHJ5e0RlKHAsbyl9Y2F0Y2goXyl7dGhyb3cgbXIoYSxfKSxhLl9yZWFkYWJsZS5fc3RvcmVkRXJyb3J9Sm8ocCkhPT1hLl9iYWNrcHJlc3N1cmUmJkF0KGEsITApfXUoSW4sXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWVcIik7ZnVuY3Rpb24gVGkobixvKXtGbihuLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLG8pfXUoVGksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yXCIpO2Z1bmN0aW9uIHpuKG4sbyl7Y29uc3QgYT1uLl90cmFuc2Zvcm1BbGdvcml0aG0obyk7cmV0dXJuIFUoYSx2b2lkIDAscD0+e3Rocm93IEZuKG4uX2NvbnRyb2xsZWRUcmFuc2Zvcm1TdHJlYW0scCkscH0pfXUoem4sXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm1cIik7ZnVuY3Rpb24gQ2kobil7Y29uc3Qgbz1uLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLGE9by5fcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjtrZShhKTtjb25zdCBwPW5ldyBUeXBlRXJyb3IoXCJUcmFuc2Zvcm1TdHJlYW0gdGVybWluYXRlZFwiKTttcihvLHApfXUoQ2ksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclRlcm1pbmF0ZVwiKTtmdW5jdGlvbiBQaShuLG8pe2NvbnN0IGE9bi5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcjtpZihuLl9iYWNrcHJlc3N1cmUpe2NvbnN0IHA9bi5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZTtyZXR1cm4gVShwLCgpPT57Y29uc3QgZz1uLl93cml0YWJsZTtpZihnLl9zdGF0ZT09PVwiZXJyb3JpbmdcIil0aHJvdyBnLl9zdG9yZWRFcnJvcjtyZXR1cm4gem4oYSxvKX0pfXJldHVybiB6bihhLG8pfXUoUGksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua1dyaXRlQWxnb3JpdGhtXCIpO2Z1bmN0aW9uIEVpKG4sbyl7Y29uc3QgYT1uLl90cmFuc2Zvcm1TdHJlYW1Db250cm9sbGVyO2lmKGEuX2ZpbmlzaFByb21pc2UhPT12b2lkIDApcmV0dXJuIGEuX2ZpbmlzaFByb21pc2U7Y29uc3QgcD1uLl9yZWFkYWJsZTthLl9maW5pc2hQcm9taXNlPXooKF8sUyk9PnthLl9maW5pc2hQcm9taXNlX3Jlc29sdmU9XyxhLl9maW5pc2hQcm9taXNlX3JlamVjdD1TfSk7Y29uc3QgZz1hLl9jYW5jZWxBbGdvcml0aG0obyk7cmV0dXJuIHF0KGEpLEUoZywoKT0+KHAuX3N0YXRlPT09XCJlcnJvcmVkXCI/TWUoYSxwLl9zdG9yZWRFcnJvcik6KHJlKHAuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixvKSxncihhKSksbnVsbCksXz0+KHJlKHAuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixfKSxNZShhLF8pLG51bGwpKSxhLl9maW5pc2hQcm9taXNlfXUoRWksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Fib3J0QWxnb3JpdGhtXCIpO2Z1bmN0aW9uIHZpKG4pe2NvbnN0IG89bi5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcjtpZihvLl9maW5pc2hQcm9taXNlIT09dm9pZCAwKXJldHVybiBvLl9maW5pc2hQcm9taXNlO2NvbnN0IGE9bi5fcmVhZGFibGU7by5fZmluaXNoUHJvbWlzZT16KChnLF8pPT57by5fZmluaXNoUHJvbWlzZV9yZXNvbHZlPWcsby5fZmluaXNoUHJvbWlzZV9yZWplY3Q9X30pO2NvbnN0IHA9by5fZmx1c2hBbGdvcml0aG0oKTtyZXR1cm4gcXQobyksRShwLCgpPT4oYS5fc3RhdGU9PT1cImVycm9yZWRcIj9NZShvLGEuX3N0b3JlZEVycm9yKTooa2UoYS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyKSxncihvKSksbnVsbCksZz0+KHJlKGEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcixnKSxNZShvLGcpLG51bGwpKSxvLl9maW5pc2hQcm9taXNlfXUodmksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Nsb3NlQWxnb3JpdGhtXCIpO2Z1bmN0aW9uIEFpKG4pe3JldHVybiBBdChuLCExKSxuLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlfXUoQWksXCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U291cmNlUHVsbEFsZ29yaXRobVwiKTtmdW5jdGlvbiBCaShuLG8pe2NvbnN0IGE9bi5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcjtpZihhLl9maW5pc2hQcm9taXNlIT09dm9pZCAwKXJldHVybiBhLl9maW5pc2hQcm9taXNlO2NvbnN0IHA9bi5fd3JpdGFibGU7YS5fZmluaXNoUHJvbWlzZT16KChfLFMpPT57YS5fZmluaXNoUHJvbWlzZV9yZXNvbHZlPV8sYS5fZmluaXNoUHJvbWlzZV9yZWplY3Q9U30pO2NvbnN0IGc9YS5fY2FuY2VsQWxnb3JpdGhtKG8pO3JldHVybiBxdChhKSxFKGcsKCk9PihwLl9zdGF0ZT09PVwiZXJyb3JlZFwiP01lKGEscC5fc3RvcmVkRXJyb3IpOihLZShwLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIsbykseXIobiksZ3IoYSkpLG51bGwpLF89PihLZShwLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIsXykseXIobiksTWUoYSxfKSxudWxsKSksYS5fZmluaXNoUHJvbWlzZX11KEJpLFwiVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNvdXJjZUNhbmNlbEFsZ29yaXRobVwiKTtmdW5jdGlvbiBXdChuKXtyZXR1cm4gbmV3IFR5cGVFcnJvcihgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLiR7bn0gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyYCl9dShXdCxcImRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvblwiKTtmdW5jdGlvbiBncihuKXtuLl9maW5pc2hQcm9taXNlX3Jlc29sdmUhPT12b2lkIDAmJihuLl9maW5pc2hQcm9taXNlX3Jlc29sdmUoKSxuLl9maW5pc2hQcm9taXNlX3Jlc29sdmU9dm9pZCAwLG4uX2ZpbmlzaFByb21pc2VfcmVqZWN0PXZvaWQgMCl9dShncixcImRlZmF1bHRDb250cm9sbGVyRmluaXNoUHJvbWlzZVJlc29sdmVcIik7ZnVuY3Rpb24gTWUobixvKXtuLl9maW5pc2hQcm9taXNlX3JlamVjdCE9PXZvaWQgMCYmKEsobi5fZmluaXNoUHJvbWlzZSksbi5fZmluaXNoUHJvbWlzZV9yZWplY3Qobyksbi5fZmluaXNoUHJvbWlzZV9yZXNvbHZlPXZvaWQgMCxuLl9maW5pc2hQcm9taXNlX3JlamVjdD12b2lkIDApfXUoTWUsXCJkZWZhdWx0Q29udHJvbGxlckZpbmlzaFByb21pc2VSZWplY3RcIik7ZnVuY3Rpb24gam4obil7cmV0dXJuIG5ldyBUeXBlRXJyb3IoYFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUuJHtufSBjYW4gb25seSBiZSB1c2VkIG9uIGEgVHJhbnNmb3JtU3RyZWFtYCl9dShqbixcInN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb25cIiksZC5CeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5PVB0LGQuQ291bnRRdWV1aW5nU3RyYXRlZ3k9RXQsZC5SZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyPWNlLGQuUmVhZGFibGVTdHJlYW09SCxkLlJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcj1TZSxkLlJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3Q9RWUsZC5SZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyPWhlLGQuUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyPW1lLGQuVHJhbnNmb3JtU3RyZWFtPXZ0LGQuVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI9Q2UsZC5Xcml0YWJsZVN0cmVhbT13ZSxkLldyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXI9TGUsZC5Xcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI9ZGV9KX0ocG9ueWZpbGxfZXMyMDE4JDEscG9ueWZpbGxfZXMyMDE4JDEuZXhwb3J0cykpLHBvbnlmaWxsX2VzMjAxOCQxLmV4cG9ydHN9dShyZXF1aXJlUG9ueWZpbGxfZXMyMDE4LFwicmVxdWlyZVBvbnlmaWxsX2VzMjAxOFwiKTt2YXIgaGFzUmVxdWlyZWRTdHJlYW1zO2Z1bmN0aW9uIHJlcXVpcmVTdHJlYW1zKCl7aWYoaGFzUmVxdWlyZWRTdHJlYW1zKXJldHVybiBzdHJlYW1zO2hhc1JlcXVpcmVkU3RyZWFtcz0xO2NvbnN0IGM9NjU1MzY7aWYoIWdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW0pdHJ5e2NvbnN0IGw9cmVxdWlyZShcIm5vZGU6cHJvY2Vzc1wiKSx7ZW1pdFdhcm5pbmc6ZH09bDt0cnl7bC5lbWl0V2FybmluZz0oKT0+e30sT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLHJlcXVpcmUoXCJub2RlOnN0cmVhbS93ZWJcIikpLGwuZW1pdFdhcm5pbmc9ZH1jYXRjaCh5KXt0aHJvdyBsLmVtaXRXYXJuaW5nPWQseX19Y2F0Y2h7T2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLHJlcXVpcmVQb255ZmlsbF9lczIwMTgoKSl9dHJ5e2NvbnN0e0Jsb2I6bH09cmVxdWlyZShcImJ1ZmZlclwiKTtsJiYhbC5wcm90b3R5cGUuc3RyZWFtJiYobC5wcm90b3R5cGUuc3RyZWFtPXUoZnVuY3Rpb24oeSl7bGV0IGI9MDtjb25zdCBSPXRoaXM7cmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7dHlwZTpcImJ5dGVzXCIsYXN5bmMgcHVsbCh3KXtjb25zdCBGPWF3YWl0IFIuc2xpY2UoYixNYXRoLm1pbihSLnNpemUsYitjKSkuYXJyYXlCdWZmZXIoKTtiKz1GLmJ5dGVMZW5ndGgsdy5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KEYpKSxiPT09Ui5zaXplJiZ3LmNsb3NlKCl9fSl9LFwibmFtZVwiKSl9Y2F0Y2h7fXJldHVybiBzdHJlYW1zfXUocmVxdWlyZVN0cmVhbXMsXCJyZXF1aXJlU3RyZWFtc1wiKSxyZXF1aXJlU3RyZWFtcygpOy8qISBmZXRjaC1ibG9iLiBNSVQgTGljZW5zZS4gSmltbXkgV8OkcnRpbmcgPGh0dHBzOi8vamltbXkud2FydGluZy5zZS9vcGVuc291cmNlPiAqL2NvbnN0IFBPT0xfU0laRT02NTUzNjthc3luYyBmdW5jdGlvbip0b0l0ZXJhdG9yKGMsbD0hMCl7Zm9yKGNvbnN0IGQgb2YgYylpZihcInN0cmVhbVwiaW4gZCl5aWVsZCpkLnN0cmVhbSgpO2Vsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGQpKWlmKGwpe2xldCB5PWQuYnl0ZU9mZnNldDtjb25zdCBiPWQuYnl0ZU9mZnNldCtkLmJ5dGVMZW5ndGg7Zm9yKDt5IT09Yjspe2NvbnN0IFI9TWF0aC5taW4oYi15LFBPT0xfU0laRSksdz1kLmJ1ZmZlci5zbGljZSh5LHkrUik7eSs9dy5ieXRlTGVuZ3RoLHlpZWxkIG5ldyBVaW50OEFycmF5KHcpfX1lbHNlIHlpZWxkIGQ7ZWxzZXtsZXQgeT0wLGI9ZDtmb3IoO3khPT1iLnNpemU7KXtjb25zdCB3PWF3YWl0IGIuc2xpY2UoeSxNYXRoLm1pbihiLnNpemUseStQT09MX1NJWkUpKS5hcnJheUJ1ZmZlcigpO3krPXcuYnl0ZUxlbmd0aCx5aWVsZCBuZXcgVWludDhBcnJheSh3KX19fXUodG9JdGVyYXRvcixcInRvSXRlcmF0b3JcIik7Y29uc3QgX0Jsb2I9Y2xhc3MgU3J7c3RhdGlje3UodGhpcyxcIkJsb2JcIil9I2U9W107I3Q9XCJcIjsjcj0wOyNuPVwidHJhbnNwYXJlbnRcIjtjb25zdHJ1Y3RvcihsPVtdLGQ9e30pe2lmKHR5cGVvZiBsIT1cIm9iamVjdFwifHxsPT09bnVsbCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnQmxvYic6IFRoZSBwcm92aWRlZCB2YWx1ZSBjYW5ub3QgYmUgY29udmVydGVkIHRvIGEgc2VxdWVuY2UuXCIpO2lmKHR5cGVvZiBsW1N5bWJvbC5pdGVyYXRvcl0hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnQmxvYic6IFRoZSBvYmplY3QgbXVzdCBoYXZlIGEgY2FsbGFibGUgQEBpdGVyYXRvciBwcm9wZXJ0eS5cIik7aWYodHlwZW9mIGQhPVwib2JqZWN0XCImJnR5cGVvZiBkIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ0Jsb2InOiBwYXJhbWV0ZXIgMiBjYW5ub3QgY29udmVydCB0byBkaWN0aW9uYXJ5LlwiKTtkPT09bnVsbCYmKGQ9e30pO2NvbnN0IHk9bmV3IFRleHRFbmNvZGVyO2Zvcihjb25zdCBSIG9mIGwpe2xldCB3O0FycmF5QnVmZmVyLmlzVmlldyhSKT93PW5ldyBVaW50OEFycmF5KFIuYnVmZmVyLnNsaWNlKFIuYnl0ZU9mZnNldCxSLmJ5dGVPZmZzZXQrUi5ieXRlTGVuZ3RoKSk6UiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP3c9bmV3IFVpbnQ4QXJyYXkoUi5zbGljZSgwKSk6UiBpbnN0YW5jZW9mIFNyP3c9Ujp3PXkuZW5jb2RlKGAke1J9YCksdGhpcy4jcis9QXJyYXlCdWZmZXIuaXNWaWV3KHcpP3cuYnl0ZUxlbmd0aDp3LnNpemUsdGhpcy4jZS5wdXNoKHcpfXRoaXMuI249YCR7ZC5lbmRpbmdzPT09dm9pZCAwP1widHJhbnNwYXJlbnRcIjpkLmVuZGluZ3N9YDtjb25zdCBiPWQudHlwZT09PXZvaWQgMD9cIlwiOlN0cmluZyhkLnR5cGUpO3RoaXMuI3Q9L15bXFx4MjAtXFx4N0VdKiQvLnRlc3QoYik/YjpcIlwifWdldCBzaXplKCl7cmV0dXJuIHRoaXMuI3J9Z2V0IHR5cGUoKXtyZXR1cm4gdGhpcy4jdH1hc3luYyB0ZXh0KCl7Y29uc3QgbD1uZXcgVGV4dERlY29kZXI7bGV0IGQ9XCJcIjtmb3IgYXdhaXQoY29uc3QgeSBvZiB0b0l0ZXJhdG9yKHRoaXMuI2UsITEpKWQrPWwuZGVjb2RlKHkse3N0cmVhbTohMH0pO3JldHVybiBkKz1sLmRlY29kZSgpLGR9YXN5bmMgYXJyYXlCdWZmZXIoKXtjb25zdCBsPW5ldyBVaW50OEFycmF5KHRoaXMuc2l6ZSk7bGV0IGQ9MDtmb3IgYXdhaXQoY29uc3QgeSBvZiB0b0l0ZXJhdG9yKHRoaXMuI2UsITEpKWwuc2V0KHksZCksZCs9eS5sZW5ndGg7cmV0dXJuIGwuYnVmZmVyfXN0cmVhbSgpe2NvbnN0IGw9dG9JdGVyYXRvcih0aGlzLiNlLCEwKTtyZXR1cm4gbmV3IGdsb2JhbFRoaXMuUmVhZGFibGVTdHJlYW0oe3R5cGU6XCJieXRlc1wiLGFzeW5jIHB1bGwoZCl7Y29uc3QgeT1hd2FpdCBsLm5leHQoKTt5LmRvbmU/ZC5jbG9zZSgpOmQuZW5xdWV1ZSh5LnZhbHVlKX0sYXN5bmMgY2FuY2VsKCl7YXdhaXQgbC5yZXR1cm4oKX19KX1zbGljZShsPTAsZD10aGlzLnNpemUseT1cIlwiKXtjb25zdHtzaXplOmJ9PXRoaXM7bGV0IFI9bDwwP01hdGgubWF4KGIrbCwwKTpNYXRoLm1pbihsLGIpLHc9ZDwwP01hdGgubWF4KGIrZCwwKTpNYXRoLm1pbihkLGIpO2NvbnN0IEE9TWF0aC5tYXgody1SLDApLEY9dGhpcy4jZSxCPVtdO2xldCB6PTA7Zm9yKGNvbnN0IFQgb2YgRil7aWYoej49QSlicmVhaztjb25zdCBEPUFycmF5QnVmZmVyLmlzVmlldyhUKT9ULmJ5dGVMZW5ndGg6VC5zaXplO2lmKFImJkQ8PVIpUi09RCx3LT1EO2Vsc2V7bGV0IEU7QXJyYXlCdWZmZXIuaXNWaWV3KFQpPyhFPVQuc3ViYXJyYXkoUixNYXRoLm1pbihELHcpKSx6Kz1FLmJ5dGVMZW5ndGgpOihFPVQuc2xpY2UoUixNYXRoLm1pbihELHcpKSx6Kz1FLnNpemUpLHctPUQsQi5wdXNoKEUpLFI9MH19Y29uc3QgVz1uZXcgU3IoW10se3R5cGU6U3RyaW5nKHkpLnRvTG93ZXJDYXNlKCl9KTtyZXR1cm4gVy4jcj1BLFcuI2U9QixXfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuXCJCbG9iXCJ9c3RhdGljW1N5bWJvbC5oYXNJbnN0YW5jZV0obCl7cmV0dXJuIGwmJnR5cGVvZiBsPT1cIm9iamVjdFwiJiZ0eXBlb2YgbC5jb25zdHJ1Y3Rvcj09XCJmdW5jdGlvblwiJiYodHlwZW9mIGwuc3RyZWFtPT1cImZ1bmN0aW9uXCJ8fHR5cGVvZiBsLmFycmF5QnVmZmVyPT1cImZ1bmN0aW9uXCIpJiYvXihCbG9ifEZpbGUpJC8udGVzdChsW1N5bWJvbC50b1N0cmluZ1RhZ10pfX07T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX0Jsb2IucHJvdG90eXBlLHtzaXplOntlbnVtZXJhYmxlOiEwfSx0eXBlOntlbnVtZXJhYmxlOiEwfSxzbGljZTp7ZW51bWVyYWJsZTohMH19KTtjb25zdCBCbG9iPV9CbG9iLF9GaWxlPWNsYXNzIGV4dGVuZHMgQmxvYntzdGF0aWN7dSh0aGlzLFwiRmlsZVwiKX0jZT0wOyN0PVwiXCI7Y29uc3RydWN0b3IobCxkLHk9e30pe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil0aHJvdyBuZXcgVHlwZUVycm9yKGBGYWlsZWQgdG8gY29uc3RydWN0ICdGaWxlJzogMiBhcmd1bWVudHMgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7YXJndW1lbnRzLmxlbmd0aH0gcHJlc2VudC5gKTtzdXBlcihsLHkpLHk9PT1udWxsJiYoeT17fSk7Y29uc3QgYj15Lmxhc3RNb2RpZmllZD09PXZvaWQgMD9EYXRlLm5vdygpOk51bWJlcih5Lmxhc3RNb2RpZmllZCk7TnVtYmVyLmlzTmFOKGIpfHwodGhpcy4jZT1iKSx0aGlzLiN0PVN0cmluZyhkKX1nZXQgbmFtZSgpe3JldHVybiB0aGlzLiN0fWdldCBsYXN0TW9kaWZpZWQoKXtyZXR1cm4gdGhpcy4jZX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiRmlsZVwifXN0YXRpY1tTeW1ib2wuaGFzSW5zdGFuY2VdKGwpe3JldHVybiEhbCYmbCBpbnN0YW5jZW9mIEJsb2ImJi9eKEZpbGUpJC8udGVzdChsW1N5bWJvbC50b1N0cmluZ1RhZ10pfX0sRmlsZT1fRmlsZTsvKiEgZm9ybWRhdGEtcG9seWZpbGwuIE1JVCBMaWNlbnNlLiBKaW1teSBXw6RydGluZyA8aHR0cHM6Ly9qaW1teS53YXJ0aW5nLnNlL29wZW5zb3VyY2U+ICovdmFye3RvU3RyaW5nVGFnOnQkMSxpdGVyYXRvcjppLGhhc0luc3RhbmNlOmh9PVN5bWJvbCxyPU1hdGgucmFuZG9tLG09XCJhcHBlbmQsc2V0LGdldCxnZXRBbGwsZGVsZXRlLGtleXMsdmFsdWVzLGVudHJpZXMsZm9yRWFjaCxjb25zdHJ1Y3RvclwiLnNwbGl0KFwiLFwiKSxmPXUoKGMsbCxkKT0+KGMrPVwiXCIsL14oQmxvYnxGaWxlKSQvLnRlc3QobCYmbFt0JDFdKT9bKGQ9ZCE9PXZvaWQgMD9kK1wiXCI6bFt0JDFdPT1cIkZpbGVcIj9sLm5hbWU6XCJibG9iXCIsYyksbC5uYW1lIT09ZHx8bFt0JDFdPT1cImJsb2JcIj9uZXcgRmlsZShbbF0sZCxsKTpsXTpbYyxsK1wiXCJdKSxcImZcIiksZSQxPXUoKGMsbCk9PihsP2M6Yy5yZXBsYWNlKC9cXHI/XFxufFxcci9nLGBcXHJcbmApKS5yZXBsYWNlKC9cXG4vZyxcIiUwQVwiKS5yZXBsYWNlKC9cXHIvZyxcIiUwRFwiKS5yZXBsYWNlKC9cIi9nLFwiJTIyXCIpLFwiZSQxXCIpLHg9dSgoYyxsLGQpPT57aWYobC5sZW5ndGg8ZCl0aHJvdyBuZXcgVHlwZUVycm9yKGBGYWlsZWQgdG8gZXhlY3V0ZSAnJHtjfScgb24gJ0Zvcm1EYXRhJzogJHtkfSBhcmd1bWVudHMgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7bC5sZW5ndGh9IHByZXNlbnQuYCl9LFwieFwiKTtjb25zdCBGb3JtRGF0YT1jbGFzc3tzdGF0aWN7dSh0aGlzLFwiRm9ybURhdGFcIil9I2U9W107Y29uc3RydWN0b3IoLi4ubCl7aWYobC5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ0Zvcm1EYXRhJzogcGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgJ0hUTUxGb3JtRWxlbWVudCcuXCIpfWdldFt0JDFdKCl7cmV0dXJuXCJGb3JtRGF0YVwifVtpXSgpe3JldHVybiB0aGlzLmVudHJpZXMoKX1zdGF0aWNbaF0obCl7cmV0dXJuIGwmJnR5cGVvZiBsPT1cIm9iamVjdFwiJiZsW3QkMV09PT1cIkZvcm1EYXRhXCImJiFtLnNvbWUoZD0+dHlwZW9mIGxbZF0hPVwiZnVuY3Rpb25cIil9YXBwZW5kKC4uLmwpe3goXCJhcHBlbmRcIixhcmd1bWVudHMsMiksdGhpcy4jZS5wdXNoKGYoLi4ubCkpfWRlbGV0ZShsKXt4KFwiZGVsZXRlXCIsYXJndW1lbnRzLDEpLGwrPVwiXCIsdGhpcy4jZT10aGlzLiNlLmZpbHRlcigoW2RdKT0+ZCE9PWwpfWdldChsKXt4KFwiZ2V0XCIsYXJndW1lbnRzLDEpLGwrPVwiXCI7Zm9yKHZhciBkPXRoaXMuI2UseT1kLmxlbmd0aCxiPTA7Yjx5O2IrKylpZihkW2JdWzBdPT09bClyZXR1cm4gZFtiXVsxXTtyZXR1cm4gbnVsbH1nZXRBbGwobCxkKXtyZXR1cm4geChcImdldEFsbFwiLGFyZ3VtZW50cywxKSxkPVtdLGwrPVwiXCIsdGhpcy4jZS5mb3JFYWNoKHk9PnlbMF09PT1sJiZkLnB1c2goeVsxXSkpLGR9aGFzKGwpe3JldHVybiB4KFwiaGFzXCIsYXJndW1lbnRzLDEpLGwrPVwiXCIsdGhpcy4jZS5zb21lKGQ9PmRbMF09PT1sKX1mb3JFYWNoKGwsZCl7eChcImZvckVhY2hcIixhcmd1bWVudHMsMSk7Zm9yKHZhclt5LGJdb2YgdGhpcylsLmNhbGwoZCxiLHksdGhpcyl9c2V0KC4uLmwpe3goXCJzZXRcIixhcmd1bWVudHMsMik7dmFyIGQ9W10seT0hMDtsPWYoLi4ubCksdGhpcy4jZS5mb3JFYWNoKGI9PntiWzBdPT09bFswXT95JiYoeT0hZC5wdXNoKGwpKTpkLnB1c2goYil9KSx5JiZkLnB1c2gobCksdGhpcy4jZT1kfSplbnRyaWVzKCl7eWllbGQqdGhpcy4jZX0qa2V5cygpe2Zvcih2YXJbbF1vZiB0aGlzKXlpZWxkIGx9KnZhbHVlcygpe2Zvcih2YXJbLGxdb2YgdGhpcyl5aWVsZCBsfX07ZnVuY3Rpb24gZm9ybURhdGFUb0Jsb2IoYyxsPUJsb2Ipe3ZhciBkPWAke3IoKX0ke3IoKX1gLnJlcGxhY2UoL1xcLi9nLFwiXCIpLnNsaWNlKC0yOCkucGFkU3RhcnQoMzIsXCItXCIpLHk9W10sYj1gLS0ke2R9XFxyXG5Db250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9XCJgO3JldHVybiBjLmZvckVhY2goKFIsdyk9PnR5cGVvZiBSPT1cInN0cmluZ1wiP3kucHVzaChiK2UkMSh3KStgXCJcXHJcblxcclxuJHtSLnJlcGxhY2UoL1xccig/IVxcbil8KD88IVxccilcXG4vZyxgXFxyXG5gKX1cXHJcbmApOnkucHVzaChiK2UkMSh3KStgXCI7IGZpbGVuYW1lPVwiJHtlJDEoUi5uYW1lLDEpfVwiXFxyXG5Db250ZW50LVR5cGU6ICR7Ui50eXBlfHxcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifVxcclxuXFxyXG5gLFIsYFxcclxuYCkpLHkucHVzaChgLS0ke2R9LS1gKSxuZXcgbCh5LHt0eXBlOlwibXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9XCIrZH0pfXUoZm9ybURhdGFUb0Jsb2IsXCJmb3JtRGF0YVRvQmxvYlwiKTtjbGFzcyBGZXRjaEJhc2VFcnJvciBleHRlbmRzIEVycm9ye3N0YXRpY3t1KHRoaXMsXCJGZXRjaEJhc2VFcnJvclwiKX1jb25zdHJ1Y3RvcihsLGQpe3N1cGVyKGwpLEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsdGhpcy5jb25zdHJ1Y3RvciksdGhpcy50eXBlPWR9Z2V0IG5hbWUoKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lfWdldFtTeW1ib2wudG9TdHJpbmdUYWddKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZX19Y2xhc3MgRmV0Y2hFcnJvciBleHRlbmRzIEZldGNoQmFzZUVycm9ye3N0YXRpY3t1KHRoaXMsXCJGZXRjaEVycm9yXCIpfWNvbnN0cnVjdG9yKGwsZCx5KXtzdXBlcihsLGQpLHkmJih0aGlzLmNvZGU9dGhpcy5lcnJubz15LmNvZGUsdGhpcy5lcnJvcmVkU3lzQ2FsbD15LnN5c2NhbGwpfX1jb25zdCBOQU1FPVN5bWJvbC50b1N0cmluZ1RhZyxpc1VSTFNlYXJjaFBhcmFtZXRlcnM9dShjPT50eXBlb2YgYz09XCJvYmplY3RcIiYmdHlwZW9mIGMuYXBwZW5kPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBjLmRlbGV0ZT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgYy5nZXQ9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGMuZ2V0QWxsPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBjLmhhcz09XCJmdW5jdGlvblwiJiZ0eXBlb2YgYy5zZXQ9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGMuc29ydD09XCJmdW5jdGlvblwiJiZjW05BTUVdPT09XCJVUkxTZWFyY2hQYXJhbXNcIixcImlzVVJMU2VhcmNoUGFyYW1ldGVyc1wiKSxpc0Jsb2I9dShjPT5jJiZ0eXBlb2YgYz09XCJvYmplY3RcIiYmdHlwZW9mIGMuYXJyYXlCdWZmZXI9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIGMudHlwZT09XCJzdHJpbmdcIiYmdHlwZW9mIGMuc3RyZWFtPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBjLmNvbnN0cnVjdG9yPT1cImZ1bmN0aW9uXCImJi9eKEJsb2J8RmlsZSkkLy50ZXN0KGNbTkFNRV0pLFwiaXNCbG9iXCIpLGlzQWJvcnRTaWduYWw9dShjPT50eXBlb2YgYz09XCJvYmplY3RcIiYmKGNbTkFNRV09PT1cIkFib3J0U2lnbmFsXCJ8fGNbTkFNRV09PT1cIkV2ZW50VGFyZ2V0XCIpLFwiaXNBYm9ydFNpZ25hbFwiKSxpc0RvbWFpbk9yU3ViZG9tYWluPXUoKGMsbCk9Pntjb25zdCBkPW5ldyBVUkwobCkuaG9zdG5hbWUseT1uZXcgVVJMKGMpLmhvc3RuYW1lO3JldHVybiBkPT09eXx8ZC5lbmRzV2l0aChgLiR7eX1gKX0sXCJpc0RvbWFpbk9yU3ViZG9tYWluXCIpLGlzU2FtZVByb3RvY29sPXUoKGMsbCk9Pntjb25zdCBkPW5ldyBVUkwobCkucHJvdG9jb2wseT1uZXcgVVJMKGMpLnByb3RvY29sO3JldHVybiBkPT09eX0sXCJpc1NhbWVQcm90b2NvbFwiKSxwaXBlbGluZT1yZXF1aXJlJCQwJDEucHJvbWlzaWZ5KFN0cmVhbV9fZGVmYXVsdC5waXBlbGluZSksSU5URVJOQUxTJDI9U3ltYm9sKFwiQm9keSBpbnRlcm5hbHNcIik7Y2xhc3MgQm9keXtzdGF0aWN7dSh0aGlzLFwiQm9keVwiKX1jb25zdHJ1Y3RvcihsLHtzaXplOmQ9MH09e30pe2xldCB5PW51bGw7bD09PW51bGw/bD1udWxsOmlzVVJMU2VhcmNoUGFyYW1ldGVycyhsKT9sPXJlcXVpcmUkJDAuQnVmZmVyLmZyb20obC50b1N0cmluZygpKTppc0Jsb2IobCl8fHJlcXVpcmUkJDAuQnVmZmVyLmlzQnVmZmVyKGwpfHwocmVxdWlyZSQkMCQxLnR5cGVzLmlzQW55QXJyYXlCdWZmZXIobCk/bD1yZXF1aXJlJCQwLkJ1ZmZlci5mcm9tKGwpOkFycmF5QnVmZmVyLmlzVmlldyhsKT9sPXJlcXVpcmUkJDAuQnVmZmVyLmZyb20obC5idWZmZXIsbC5ieXRlT2Zmc2V0LGwuYnl0ZUxlbmd0aCk6bCBpbnN0YW5jZW9mIFN0cmVhbV9fZGVmYXVsdHx8KGwgaW5zdGFuY2VvZiBGb3JtRGF0YT8obD1mb3JtRGF0YVRvQmxvYihsKSx5PWwudHlwZS5zcGxpdChcIj1cIilbMV0pOmw9cmVxdWlyZSQkMC5CdWZmZXIuZnJvbShTdHJpbmcobCkpKSk7bGV0IGI9bDtyZXF1aXJlJCQwLkJ1ZmZlci5pc0J1ZmZlcihsKT9iPVN0cmVhbV9fZGVmYXVsdC5SZWFkYWJsZS5mcm9tKGwpOmlzQmxvYihsKSYmKGI9U3RyZWFtX19kZWZhdWx0LlJlYWRhYmxlLmZyb20obC5zdHJlYW0oKSkpLHRoaXNbSU5URVJOQUxTJDJdPXtib2R5Omwsc3RyZWFtOmIsYm91bmRhcnk6eSxkaXN0dXJiZWQ6ITEsZXJyb3I6bnVsbH0sdGhpcy5zaXplPWQsbCBpbnN0YW5jZW9mIFN0cmVhbV9fZGVmYXVsdCYmbC5vbihcImVycm9yXCIsUj0+e2NvbnN0IHc9UiBpbnN0YW5jZW9mIEZldGNoQmFzZUVycm9yP1I6bmV3IEZldGNoRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgYm9keSB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHt0aGlzLnVybH06ICR7Ui5tZXNzYWdlfWAsXCJzeXN0ZW1cIixSKTt0aGlzW0lOVEVSTkFMUyQyXS5lcnJvcj13fSl9Z2V0IGJvZHkoKXtyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0uc3RyZWFtfWdldCBib2R5VXNlZCgpe3JldHVybiB0aGlzW0lOVEVSTkFMUyQyXS5kaXN0dXJiZWR9YXN5bmMgYXJyYXlCdWZmZXIoKXtjb25zdHtidWZmZXI6bCxieXRlT2Zmc2V0OmQsYnl0ZUxlbmd0aDp5fT1hd2FpdCBjb25zdW1lQm9keSh0aGlzKTtyZXR1cm4gbC5zbGljZShkLGQreSl9YXN5bmMgZm9ybURhdGEoKXtjb25zdCBsPXRoaXMuaGVhZGVycy5nZXQoXCJjb250ZW50LXR5cGVcIik7aWYobC5zdGFydHNXaXRoKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpKXtjb25zdCB5PW5ldyBGb3JtRGF0YSxiPW5ldyBVUkxTZWFyY2hQYXJhbXMoYXdhaXQgdGhpcy50ZXh0KCkpO2Zvcihjb25zdFtSLHddb2YgYil5LmFwcGVuZChSLHcpO3JldHVybiB5fWNvbnN0e3RvRm9ybURhdGE6ZH09YXdhaXQgaW1wb3J0KFwiLi9jaHVua3MvbXVsdGlwYXJ0LXBhcnNlci5janNcIik7cmV0dXJuIGQodGhpcy5ib2R5LGwpfWFzeW5jIGJsb2IoKXtjb25zdCBsPXRoaXMuaGVhZGVycyYmdGhpcy5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKXx8dGhpc1tJTlRFUk5BTFMkMl0uYm9keSYmdGhpc1tJTlRFUk5BTFMkMl0uYm9keS50eXBlfHxcIlwiLGQ9YXdhaXQgdGhpcy5hcnJheUJ1ZmZlcigpO3JldHVybiBuZXcgQmxvYihbZF0se3R5cGU6bH0pfWFzeW5jIGpzb24oKXtjb25zdCBsPWF3YWl0IHRoaXMudGV4dCgpO3JldHVybiBKU09OLnBhcnNlKGwpfWFzeW5jIHRleHQoKXtjb25zdCBsPWF3YWl0IGNvbnN1bWVCb2R5KHRoaXMpO3JldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUobCl9YnVmZmVyKCl7cmV0dXJuIGNvbnN1bWVCb2R5KHRoaXMpfX1Cb2R5LnByb3RvdHlwZS5idWZmZXI9cmVxdWlyZSQkMCQxLmRlcHJlY2F0ZShCb2R5LnByb3RvdHlwZS5idWZmZXIsXCJQbGVhc2UgdXNlICdyZXNwb25zZS5hcnJheUJ1ZmZlcigpJyBpbnN0ZWFkIG9mICdyZXNwb25zZS5idWZmZXIoKSdcIixcIm5vZGUtZmV0Y2gjYnVmZmVyXCIpLE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEJvZHkucHJvdG90eXBlLHtib2R5OntlbnVtZXJhYmxlOiEwfSxib2R5VXNlZDp7ZW51bWVyYWJsZTohMH0sYXJyYXlCdWZmZXI6e2VudW1lcmFibGU6ITB9LGJsb2I6e2VudW1lcmFibGU6ITB9LGpzb246e2VudW1lcmFibGU6ITB9LHRleHQ6e2VudW1lcmFibGU6ITB9LGRhdGE6e2dldDpyZXF1aXJlJCQwJDEuZGVwcmVjYXRlKCgpPT57fSxcImRhdGEgZG9lc24ndCBleGlzdCwgdXNlIGpzb24oKSwgdGV4dCgpLCBhcnJheUJ1ZmZlcigpLCBvciBib2R5IGluc3RlYWRcIixcImh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWZldGNoL25vZGUtZmV0Y2gvaXNzdWVzLzEwMDAgKHJlc3BvbnNlKVwiKX19KTthc3luYyBmdW5jdGlvbiBjb25zdW1lQm9keShjKXtpZihjW0lOVEVSTkFMUyQyXS5kaXN0dXJiZWQpdGhyb3cgbmV3IFR5cGVFcnJvcihgYm9keSB1c2VkIGFscmVhZHkgZm9yOiAke2MudXJsfWApO2lmKGNbSU5URVJOQUxTJDJdLmRpc3R1cmJlZD0hMCxjW0lOVEVSTkFMUyQyXS5lcnJvcil0aHJvdyBjW0lOVEVSTkFMUyQyXS5lcnJvcjtjb25zdHtib2R5Omx9PWM7aWYobD09PW51bGx8fCEobCBpbnN0YW5jZW9mIFN0cmVhbV9fZGVmYXVsdCkpcmV0dXJuIHJlcXVpcmUkJDAuQnVmZmVyLmFsbG9jKDApO2NvbnN0IGQ9W107bGV0IHk9MDt0cnl7Zm9yIGF3YWl0KGNvbnN0IGIgb2YgbCl7aWYoYy5zaXplPjAmJnkrYi5sZW5ndGg+Yy5zaXplKXtjb25zdCBSPW5ldyBGZXRjaEVycm9yKGBjb250ZW50IHNpemUgYXQgJHtjLnVybH0gb3ZlciBsaW1pdDogJHtjLnNpemV9YCxcIm1heC1zaXplXCIpO3Rocm93IGwuZGVzdHJveShSKSxSfXkrPWIubGVuZ3RoLGQucHVzaChiKX19Y2F0Y2goYil7dGhyb3cgYiBpbnN0YW5jZW9mIEZldGNoQmFzZUVycm9yP2I6bmV3IEZldGNoRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgYm9keSB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHtjLnVybH06ICR7Yi5tZXNzYWdlfWAsXCJzeXN0ZW1cIixiKX1pZihsLnJlYWRhYmxlRW5kZWQ9PT0hMHx8bC5fcmVhZGFibGVTdGF0ZS5lbmRlZD09PSEwKXRyeXtyZXR1cm4gZC5ldmVyeShiPT50eXBlb2YgYj09XCJzdHJpbmdcIik/cmVxdWlyZSQkMC5CdWZmZXIuZnJvbShkLmpvaW4oXCJcIikpOnJlcXVpcmUkJDAuQnVmZmVyLmNvbmNhdChkLHkpfWNhdGNoKGIpe3Rocm93IG5ldyBGZXRjaEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIEJ1ZmZlciBmcm9tIHJlc3BvbnNlIGJvZHkgZm9yICR7Yy51cmx9OiAke2IubWVzc2FnZX1gLFwic3lzdGVtXCIsYil9ZWxzZSB0aHJvdyBuZXcgRmV0Y2hFcnJvcihgUHJlbWF0dXJlIGNsb3NlIG9mIHNlcnZlciByZXNwb25zZSB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHtjLnVybH1gKX11KGNvbnN1bWVCb2R5LFwiY29uc3VtZUJvZHlcIik7Y29uc3QgY2xvbmU9dSgoYyxsKT0+e2xldCBkLHkse2JvZHk6Yn09Y1tJTlRFUk5BTFMkMl07aWYoYy5ib2R5VXNlZCl0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgY2xvbmUgYm9keSBhZnRlciBpdCBpcyB1c2VkXCIpO3JldHVybiBiIGluc3RhbmNlb2YgU3RyZWFtX19kZWZhdWx0JiZ0eXBlb2YgYi5nZXRCb3VuZGFyeSE9XCJmdW5jdGlvblwiJiYoZD1uZXcgU3RyZWFtLlBhc3NUaHJvdWdoKHtoaWdoV2F0ZXJNYXJrOmx9KSx5PW5ldyBTdHJlYW0uUGFzc1Rocm91Z2goe2hpZ2hXYXRlck1hcms6bH0pLGIucGlwZShkKSxiLnBpcGUoeSksY1tJTlRFUk5BTFMkMl0uc3RyZWFtPWQsYj15KSxifSxcImNsb25lXCIpLGdldE5vblNwZWNGb3JtRGF0YUJvdW5kYXJ5PXJlcXVpcmUkJDAkMS5kZXByZWNhdGUoYz0+Yy5nZXRCb3VuZGFyeSgpLFwiZm9ybS1kYXRhIGRvZXNuJ3QgZm9sbG93IHRoZSBzcGVjIGFuZCByZXF1aXJlcyBzcGVjaWFsIHRyZWF0bWVudC4gVXNlIGFsdGVybmF0aXZlIHBhY2thZ2VcIixcImh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWZldGNoL25vZGUtZmV0Y2gvaXNzdWVzLzExNjdcIiksZXh0cmFjdENvbnRlbnRUeXBlPXUoKGMsbCk9PmM9PT1udWxsP251bGw6dHlwZW9mIGM9PVwic3RyaW5nXCI/XCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIjppc1VSTFNlYXJjaFBhcmFtZXRlcnMoYyk/XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOFwiOmlzQmxvYihjKT9jLnR5cGV8fG51bGw6cmVxdWlyZSQkMC5CdWZmZXIuaXNCdWZmZXIoYyl8fHJlcXVpcmUkJDAkMS50eXBlcy5pc0FueUFycmF5QnVmZmVyKGMpfHxBcnJheUJ1ZmZlci5pc1ZpZXcoYyk/bnVsbDpjIGluc3RhbmNlb2YgRm9ybURhdGE/YG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PSR7bFtJTlRFUk5BTFMkMl0uYm91bmRhcnl9YDpjJiZ0eXBlb2YgYy5nZXRCb3VuZGFyeT09XCJmdW5jdGlvblwiP2BtdWx0aXBhcnQvZm9ybS1kYXRhO2JvdW5kYXJ5PSR7Z2V0Tm9uU3BlY0Zvcm1EYXRhQm91bmRhcnkoYyl9YDpjIGluc3RhbmNlb2YgU3RyZWFtX19kZWZhdWx0P251bGw6XCJ0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLThcIixcImV4dHJhY3RDb250ZW50VHlwZVwiKSxnZXRUb3RhbEJ5dGVzPXUoYz0+e2NvbnN0e2JvZHk6bH09Y1tJTlRFUk5BTFMkMl07cmV0dXJuIGw9PT1udWxsPzA6aXNCbG9iKGwpP2wuc2l6ZTpyZXF1aXJlJCQwLkJ1ZmZlci5pc0J1ZmZlcihsKT9sLmxlbmd0aDpsJiZ0eXBlb2YgbC5nZXRMZW5ndGhTeW5jPT1cImZ1bmN0aW9uXCImJmwuaGFzS25vd25MZW5ndGgmJmwuaGFzS25vd25MZW5ndGgoKT9sLmdldExlbmd0aFN5bmMoKTpudWxsfSxcImdldFRvdGFsQnl0ZXNcIiksd3JpdGVUb1N0cmVhbT11KGFzeW5jKGMse2JvZHk6bH0pPT57bD09PW51bGw/Yy5lbmQoKTphd2FpdCBwaXBlbGluZShsLGMpfSxcIndyaXRlVG9TdHJlYW1cIiksdmFsaWRhdGVIZWFkZXJOYW1lPXR5cGVvZiBodHRwX19kZWZhdWx0LnZhbGlkYXRlSGVhZGVyTmFtZT09XCJmdW5jdGlvblwiP2h0dHBfX2RlZmF1bHQudmFsaWRhdGVIZWFkZXJOYW1lOmM9PntpZighL15bXFxeYFxcLVxcdyEjJCUmJyorLnx+XSskLy50ZXN0KGMpKXtjb25zdCBsPW5ldyBUeXBlRXJyb3IoYEhlYWRlciBuYW1lIG11c3QgYmUgYSB2YWxpZCBIVFRQIHRva2VuIFske2N9XWApO3Rocm93IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShsLFwiY29kZVwiLHt2YWx1ZTpcIkVSUl9JTlZBTElEX0hUVFBfVE9LRU5cIn0pLGx9fSx2YWxpZGF0ZUhlYWRlclZhbHVlPXR5cGVvZiBodHRwX19kZWZhdWx0LnZhbGlkYXRlSGVhZGVyVmFsdWU9PVwiZnVuY3Rpb25cIj9odHRwX19kZWZhdWx0LnZhbGlkYXRlSGVhZGVyVmFsdWU6KGMsbCk9PntpZigvW15cXHRcXHUwMDIwLVxcdTAwN0VcXHUwMDgwLVxcdTAwRkZdLy50ZXN0KGwpKXtjb25zdCBkPW5ldyBUeXBlRXJyb3IoYEludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBjb250ZW50IFtcIiR7Y31cIl1gKTt0aHJvdyBPYmplY3QuZGVmaW5lUHJvcGVydHkoZCxcImNvZGVcIix7dmFsdWU6XCJFUlJfSU5WQUxJRF9DSEFSXCJ9KSxkfX07Y2xhc3MgSGVhZGVycyBleHRlbmRzIFVSTFNlYXJjaFBhcmFtc3tzdGF0aWN7dSh0aGlzLFwiSGVhZGVyc1wiKX1jb25zdHJ1Y3RvcihsKXtsZXQgZD1bXTtpZihsIGluc3RhbmNlb2YgSGVhZGVycyl7Y29uc3QgeT1sLnJhdygpO2Zvcihjb25zdFtiLFJdb2YgT2JqZWN0LmVudHJpZXMoeSkpZC5wdXNoKC4uLlIubWFwKHc9PltiLHddKSl9ZWxzZSBpZihsIT1udWxsKWlmKHR5cGVvZiBsPT1cIm9iamVjdFwiJiYhcmVxdWlyZSQkMCQxLnR5cGVzLmlzQm94ZWRQcmltaXRpdmUobCkpe2NvbnN0IHk9bFtTeW1ib2wuaXRlcmF0b3JdO2lmKHk9PW51bGwpZC5wdXNoKC4uLk9iamVjdC5lbnRyaWVzKGwpKTtlbHNle2lmKHR5cGVvZiB5IT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkhlYWRlciBwYWlycyBtdXN0IGJlIGl0ZXJhYmxlXCIpO2Q9Wy4uLmxdLm1hcChiPT57aWYodHlwZW9mIGIhPVwib2JqZWN0XCJ8fHJlcXVpcmUkJDAkMS50eXBlcy5pc0JveGVkUHJpbWl0aXZlKGIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgYW4gaXRlcmFibGUgb2JqZWN0XCIpO3JldHVyblsuLi5iXX0pLm1hcChiPT57aWYoYi5sZW5ndGghPT0yKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgYSBuYW1lL3ZhbHVlIHR1cGxlXCIpO3JldHVyblsuLi5iXX0pfX1lbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdIZWFkZXJzJzogVGhlIHByb3ZpZGVkIHZhbHVlIGlzIG5vdCBvZiB0eXBlICcoc2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+IG9yIHJlY29yZDxCeXRlU3RyaW5nLCBCeXRlU3RyaW5nPilcIik7cmV0dXJuIGQ9ZC5sZW5ndGg+MD9kLm1hcCgoW3ksYl0pPT4odmFsaWRhdGVIZWFkZXJOYW1lKHkpLHZhbGlkYXRlSGVhZGVyVmFsdWUoeSxTdHJpbmcoYikpLFtTdHJpbmcoeSkudG9Mb3dlckNhc2UoKSxTdHJpbmcoYildKSk6dm9pZCAwLHN1cGVyKGQpLG5ldyBQcm94eSh0aGlzLHtnZXQoeSxiLFIpe3N3aXRjaChiKXtjYXNlXCJhcHBlbmRcIjpjYXNlXCJzZXRcIjpyZXR1cm4odyxBKT0+KHZhbGlkYXRlSGVhZGVyTmFtZSh3KSx2YWxpZGF0ZUhlYWRlclZhbHVlKHcsU3RyaW5nKEEpKSxVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlW2JdLmNhbGwoeSxTdHJpbmcodykudG9Mb3dlckNhc2UoKSxTdHJpbmcoQSkpKTtjYXNlXCJkZWxldGVcIjpjYXNlXCJoYXNcIjpjYXNlXCJnZXRBbGxcIjpyZXR1cm4gdz0+KHZhbGlkYXRlSGVhZGVyTmFtZSh3KSxVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlW2JdLmNhbGwoeSxTdHJpbmcodykudG9Mb3dlckNhc2UoKSkpO2Nhc2VcImtleXNcIjpyZXR1cm4oKT0+KHkuc29ydCgpLG5ldyBTZXQoVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzLmNhbGwoeSkpLmtleXMoKSk7ZGVmYXVsdDpyZXR1cm4gUmVmbGVjdC5nZXQoeSxiLFIpfX19KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWV9dG9TdHJpbmcoKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpfWdldChsKXtjb25zdCBkPXRoaXMuZ2V0QWxsKGwpO2lmKGQubGVuZ3RoPT09MClyZXR1cm4gbnVsbDtsZXQgeT1kLmpvaW4oXCIsIFwiKTtyZXR1cm4vXmNvbnRlbnQtZW5jb2RpbmckL2kudGVzdChsKSYmKHk9eS50b0xvd2VyQ2FzZSgpKSx5fWZvckVhY2gobCxkPXZvaWQgMCl7Zm9yKGNvbnN0IHkgb2YgdGhpcy5rZXlzKCkpUmVmbGVjdC5hcHBseShsLGQsW3RoaXMuZ2V0KHkpLHksdGhpc10pfSp2YWx1ZXMoKXtmb3IoY29uc3QgbCBvZiB0aGlzLmtleXMoKSl5aWVsZCB0aGlzLmdldChsKX0qZW50cmllcygpe2Zvcihjb25zdCBsIG9mIHRoaXMua2V5cygpKXlpZWxkW2wsdGhpcy5nZXQobCldfVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIHRoaXMuZW50cmllcygpfXJhdygpe3JldHVyblsuLi50aGlzLmtleXMoKV0ucmVkdWNlKChsLGQpPT4obFtkXT10aGlzLmdldEFsbChkKSxsKSx7fSl9W1N5bWJvbC5mb3IoXCJub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbVwiKV0oKXtyZXR1cm5bLi4udGhpcy5rZXlzKCldLnJlZHVjZSgobCxkKT0+e2NvbnN0IHk9dGhpcy5nZXRBbGwoZCk7cmV0dXJuIGQ9PT1cImhvc3RcIj9sW2RdPXlbMF06bFtkXT15Lmxlbmd0aD4xP3k6eVswXSxsfSx7fSl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEhlYWRlcnMucHJvdG90eXBlLFtcImdldFwiLFwiZW50cmllc1wiLFwiZm9yRWFjaFwiLFwidmFsdWVzXCJdLnJlZHVjZSgoYyxsKT0+KGNbbF09e2VudW1lcmFibGU6ITB9LGMpLHt9KSk7ZnVuY3Rpb24gZnJvbVJhd0hlYWRlcnMoYz1bXSl7cmV0dXJuIG5ldyBIZWFkZXJzKGMucmVkdWNlKChsLGQseSxiKT0+KHklMj09PTAmJmwucHVzaChiLnNsaWNlKHkseSsyKSksbCksW10pLmZpbHRlcigoW2wsZF0pPT57dHJ5e3JldHVybiB2YWxpZGF0ZUhlYWRlck5hbWUobCksdmFsaWRhdGVIZWFkZXJWYWx1ZShsLFN0cmluZyhkKSksITB9Y2F0Y2h7cmV0dXJuITF9fSkpfXUoZnJvbVJhd0hlYWRlcnMsXCJmcm9tUmF3SGVhZGVyc1wiKTtjb25zdCByZWRpcmVjdFN0YXR1cz1uZXcgU2V0KFszMDEsMzAyLDMwMywzMDcsMzA4XSksaXNSZWRpcmVjdD11KGM9PnJlZGlyZWN0U3RhdHVzLmhhcyhjKSxcImlzUmVkaXJlY3RcIiksSU5URVJOQUxTJDE9U3ltYm9sKFwiUmVzcG9uc2UgaW50ZXJuYWxzXCIpO2NsYXNzIFJlc3BvbnNlIGV4dGVuZHMgQm9keXtzdGF0aWN7dSh0aGlzLFwiUmVzcG9uc2VcIil9Y29uc3RydWN0b3IobD1udWxsLGQ9e30pe3N1cGVyKGwsZCk7Y29uc3QgeT1kLnN0YXR1cyE9bnVsbD9kLnN0YXR1czoyMDAsYj1uZXcgSGVhZGVycyhkLmhlYWRlcnMpO2lmKGwhPT1udWxsJiYhYi5oYXMoXCJDb250ZW50LVR5cGVcIikpe2NvbnN0IFI9ZXh0cmFjdENvbnRlbnRUeXBlKGwsdGhpcyk7UiYmYi5hcHBlbmQoXCJDb250ZW50LVR5cGVcIixSKX10aGlzW0lOVEVSTkFMUyQxXT17dHlwZTpcImRlZmF1bHRcIix1cmw6ZC51cmwsc3RhdHVzOnksc3RhdHVzVGV4dDpkLnN0YXR1c1RleHR8fFwiXCIsaGVhZGVyczpiLGNvdW50ZXI6ZC5jb3VudGVyLGhpZ2hXYXRlck1hcms6ZC5oaWdoV2F0ZXJNYXJrfX1nZXQgdHlwZSgpe3JldHVybiB0aGlzW0lOVEVSTkFMUyQxXS50eXBlfWdldCB1cmwoKXtyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0udXJsfHxcIlwifWdldCBzdGF0dXMoKXtyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzfWdldCBvaygpe3JldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXM+PTIwMCYmdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzPDMwMH1nZXQgcmVkaXJlY3RlZCgpe3JldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5jb3VudGVyPjB9Z2V0IHN0YXR1c1RleHQoKXtyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMV0uc3RhdHVzVGV4dH1nZXQgaGVhZGVycygpe3JldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5oZWFkZXJzfWdldCBoaWdoV2F0ZXJNYXJrKCl7cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLmhpZ2hXYXRlck1hcmt9Y2xvbmUoKXtyZXR1cm4gbmV3IFJlc3BvbnNlKGNsb25lKHRoaXMsdGhpcy5oaWdoV2F0ZXJNYXJrKSx7dHlwZTp0aGlzLnR5cGUsdXJsOnRoaXMudXJsLHN0YXR1czp0aGlzLnN0YXR1cyxzdGF0dXNUZXh0OnRoaXMuc3RhdHVzVGV4dCxoZWFkZXJzOnRoaXMuaGVhZGVycyxvazp0aGlzLm9rLHJlZGlyZWN0ZWQ6dGhpcy5yZWRpcmVjdGVkLHNpemU6dGhpcy5zaXplLGhpZ2hXYXRlck1hcms6dGhpcy5oaWdoV2F0ZXJNYXJrfSl9c3RhdGljIHJlZGlyZWN0KGwsZD0zMDIpe2lmKCFpc1JlZGlyZWN0KGQpKXRocm93IG5ldyBSYW5nZUVycm9yKCdGYWlsZWQgdG8gZXhlY3V0ZSBcInJlZGlyZWN0XCIgb24gXCJyZXNwb25zZVwiOiBJbnZhbGlkIHN0YXR1cyBjb2RlJyk7cmV0dXJuIG5ldyBSZXNwb25zZShudWxsLHtoZWFkZXJzOntsb2NhdGlvbjpuZXcgVVJMKGwpLnRvU3RyaW5nKCl9LHN0YXR1czpkfSl9c3RhdGljIGVycm9yKCl7Y29uc3QgbD1uZXcgUmVzcG9uc2UobnVsbCx7c3RhdHVzOjAsc3RhdHVzVGV4dDpcIlwifSk7cmV0dXJuIGxbSU5URVJOQUxTJDFdLnR5cGU9XCJlcnJvclwiLGx9c3RhdGljIGpzb24obD12b2lkIDAsZD17fSl7Y29uc3QgeT1KU09OLnN0cmluZ2lmeShsKTtpZih5PT09dm9pZCAwKXRocm93IG5ldyBUeXBlRXJyb3IoXCJkYXRhIGlzIG5vdCBKU09OIHNlcmlhbGl6YWJsZVwiKTtjb25zdCBiPW5ldyBIZWFkZXJzKGQmJmQuaGVhZGVycyk7cmV0dXJuIGIuaGFzKFwiY29udGVudC10eXBlXCIpfHxiLnNldChcImNvbnRlbnQtdHlwZVwiLFwiYXBwbGljYXRpb24vanNvblwiKSxuZXcgUmVzcG9uc2UoeSx7Li4uZCxoZWFkZXJzOmJ9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiUmVzcG9uc2VcIn19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVzcG9uc2UucHJvdG90eXBlLHt0eXBlOntlbnVtZXJhYmxlOiEwfSx1cmw6e2VudW1lcmFibGU6ITB9LHN0YXR1czp7ZW51bWVyYWJsZTohMH0sb2s6e2VudW1lcmFibGU6ITB9LHJlZGlyZWN0ZWQ6e2VudW1lcmFibGU6ITB9LHN0YXR1c1RleHQ6e2VudW1lcmFibGU6ITB9LGhlYWRlcnM6e2VudW1lcmFibGU6ITB9LGNsb25lOntlbnVtZXJhYmxlOiEwfX0pO2NvbnN0IGdldFNlYXJjaD11KGM9PntpZihjLnNlYXJjaClyZXR1cm4gYy5zZWFyY2g7Y29uc3QgbD1jLmhyZWYubGVuZ3RoLTEsZD1jLmhhc2h8fChjLmhyZWZbbF09PT1cIiNcIj9cIiNcIjpcIlwiKTtyZXR1cm4gYy5ocmVmW2wtZC5sZW5ndGhdPT09XCI/XCI/XCI/XCI6XCJcIn0sXCJnZXRTZWFyY2hcIik7ZnVuY3Rpb24gc3RyaXBVUkxGb3JVc2VBc0FSZWZlcnJlcihjLGw9ITEpe3JldHVybiBjPT1udWxsfHwoYz1uZXcgVVJMKGMpLC9eKGFib3V0fGJsb2J8ZGF0YSk6JC8udGVzdChjLnByb3RvY29sKSk/XCJuby1yZWZlcnJlclwiOihjLnVzZXJuYW1lPVwiXCIsYy5wYXNzd29yZD1cIlwiLGMuaGFzaD1cIlwiLGwmJihjLnBhdGhuYW1lPVwiXCIsYy5zZWFyY2g9XCJcIiksYyl9dShzdHJpcFVSTEZvclVzZUFzQVJlZmVycmVyLFwic3RyaXBVUkxGb3JVc2VBc0FSZWZlcnJlclwiKTtjb25zdCBSZWZlcnJlclBvbGljeT1uZXcgU2V0KFtcIlwiLFwibm8tcmVmZXJyZXJcIixcIm5vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlXCIsXCJzYW1lLW9yaWdpblwiLFwib3JpZ2luXCIsXCJzdHJpY3Qtb3JpZ2luXCIsXCJvcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIixcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIixcInVuc2FmZS11cmxcIl0pLERFRkFVTFRfUkVGRVJSRVJfUE9MSUNZPVwic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiO2Z1bmN0aW9uIHZhbGlkYXRlUmVmZXJyZXJQb2xpY3koYyl7aWYoIVJlZmVycmVyUG9saWN5LmhhcyhjKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHJlZmVycmVyUG9saWN5OiAke2N9YCk7cmV0dXJuIGN9dSh2YWxpZGF0ZVJlZmVycmVyUG9saWN5LFwidmFsaWRhdGVSZWZlcnJlclBvbGljeVwiKTtmdW5jdGlvbiBpc09yaWdpblBvdGVudGlhbGx5VHJ1c3R3b3J0aHkoYyl7aWYoL14oaHR0cHx3cylzOiQvLnRlc3QoYy5wcm90b2NvbCkpcmV0dXJuITA7Y29uc3QgbD1jLmhvc3QucmVwbGFjZSgvKF5cXFspfChdJCkvZyxcIlwiKSxkPXJlcXVpcmUkJDAkMi5pc0lQKGwpO3JldHVybiBkPT09NCYmL14xMjdcXC4vLnRlc3QobCl8fGQ9PT02JiYvXigoKDArOil7N30pfCg6OigwKzopezAsNn0pKTAqMSQvLnRlc3QobCk/ITA6Yy5ob3N0PT09XCJsb2NhbGhvc3RcInx8Yy5ob3N0LmVuZHNXaXRoKFwiLmxvY2FsaG9zdFwiKT8hMTpjLnByb3RvY29sPT09XCJmaWxlOlwifXUoaXNPcmlnaW5Qb3RlbnRpYWxseVRydXN0d29ydGh5LFwiaXNPcmlnaW5Qb3RlbnRpYWxseVRydXN0d29ydGh5XCIpO2Z1bmN0aW9uIGlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeShjKXtyZXR1cm4vXmFib3V0OihibGFua3xzcmNkb2MpJC8udGVzdChjKXx8Yy5wcm90b2NvbD09PVwiZGF0YTpcInx8L14oYmxvYnxmaWxlc3lzdGVtKTokLy50ZXN0KGMucHJvdG9jb2wpPyEwOmlzT3JpZ2luUG90ZW50aWFsbHlUcnVzdHdvcnRoeShjKX11KGlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeSxcImlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeVwiKTtmdW5jdGlvbiBkZXRlcm1pbmVSZXF1ZXN0c1JlZmVycmVyKGMse3JlZmVycmVyVVJMQ2FsbGJhY2s6bCxyZWZlcnJlck9yaWdpbkNhbGxiYWNrOmR9PXt9KXtpZihjLnJlZmVycmVyPT09XCJuby1yZWZlcnJlclwifHxjLnJlZmVycmVyUG9saWN5PT09XCJcIilyZXR1cm4gbnVsbDtjb25zdCB5PWMucmVmZXJyZXJQb2xpY3k7aWYoYy5yZWZlcnJlcj09PVwiYWJvdXQ6Y2xpZW50XCIpcmV0dXJuXCJuby1yZWZlcnJlclwiO2NvbnN0IGI9Yy5yZWZlcnJlcjtsZXQgUj1zdHJpcFVSTEZvclVzZUFzQVJlZmVycmVyKGIpLHc9c3RyaXBVUkxGb3JVc2VBc0FSZWZlcnJlcihiLCEwKTtSLnRvU3RyaW5nKCkubGVuZ3RoPjQwOTYmJihSPXcpLGwmJihSPWwoUikpLGQmJih3PWQodykpO2NvbnN0IEE9bmV3IFVSTChjLnVybCk7c3dpdGNoKHkpe2Nhc2VcIm5vLXJlZmVycmVyXCI6cmV0dXJuXCJuby1yZWZlcnJlclwiO2Nhc2VcIm9yaWdpblwiOnJldHVybiB3O2Nhc2VcInVuc2FmZS11cmxcIjpyZXR1cm4gUjtjYXNlXCJzdHJpY3Qtb3JpZ2luXCI6cmV0dXJuIGlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeShSKSYmIWlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeShBKT9cIm5vLXJlZmVycmVyXCI6dy50b1N0cmluZygpO2Nhc2VcInN0cmljdC1vcmlnaW4td2hlbi1jcm9zcy1vcmlnaW5cIjpyZXR1cm4gUi5vcmlnaW49PT1BLm9yaWdpbj9SOmlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeShSKSYmIWlzVXJsUG90ZW50aWFsbHlUcnVzdHdvcnRoeShBKT9cIm5vLXJlZmVycmVyXCI6dztjYXNlXCJzYW1lLW9yaWdpblwiOnJldHVybiBSLm9yaWdpbj09PUEub3JpZ2luP1I6XCJuby1yZWZlcnJlclwiO2Nhc2VcIm9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiOnJldHVybiBSLm9yaWdpbj09PUEub3JpZ2luP1I6dztjYXNlXCJuby1yZWZlcnJlci13aGVuLWRvd25ncmFkZVwiOnJldHVybiBpc1VybFBvdGVudGlhbGx5VHJ1c3R3b3J0aHkoUikmJiFpc1VybFBvdGVudGlhbGx5VHJ1c3R3b3J0aHkoQSk/XCJuby1yZWZlcnJlclwiOlI7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHJlZmVycmVyUG9saWN5OiAke3l9YCl9fXUoZGV0ZXJtaW5lUmVxdWVzdHNSZWZlcnJlcixcImRldGVybWluZVJlcXVlc3RzUmVmZXJyZXJcIik7ZnVuY3Rpb24gcGFyc2VSZWZlcnJlclBvbGljeUZyb21IZWFkZXIoYyl7Y29uc3QgbD0oYy5nZXQoXCJyZWZlcnJlci1wb2xpY3lcIil8fFwiXCIpLnNwbGl0KC9bLFxcc10rLyk7bGV0IGQ9XCJcIjtmb3IoY29uc3QgeSBvZiBsKXkmJlJlZmVycmVyUG9saWN5Lmhhcyh5KSYmKGQ9eSk7cmV0dXJuIGR9dShwYXJzZVJlZmVycmVyUG9saWN5RnJvbUhlYWRlcixcInBhcnNlUmVmZXJyZXJQb2xpY3lGcm9tSGVhZGVyXCIpO2NvbnN0IElOVEVSTkFMUz1TeW1ib2woXCJSZXF1ZXN0IGludGVybmFsc1wiKSxpc1JlcXVlc3Q9dShjPT50eXBlb2YgYz09XCJvYmplY3RcIiYmdHlwZW9mIGNbSU5URVJOQUxTXT09XCJvYmplY3RcIixcImlzUmVxdWVzdFwiKSxkb0JhZERhdGFXYXJuPXJlcXVpcmUkJDAkMS5kZXByZWNhdGUoKCk9Pnt9LFwiLmRhdGEgaXMgbm90IGEgdmFsaWQgUmVxdWVzdEluaXQgcHJvcGVydHksIHVzZSAuYm9keSBpbnN0ZWFkXCIsXCJodHRwczovL2dpdGh1Yi5jb20vbm9kZS1mZXRjaC9ub2RlLWZldGNoL2lzc3Vlcy8xMDAwIChyZXF1ZXN0KVwiKTtjbGFzcyBSZXF1ZXN0IGV4dGVuZHMgQm9keXtzdGF0aWN7dSh0aGlzLFwiUmVxdWVzdFwiKX1jb25zdHJ1Y3RvcihsLGQ9e30pe2xldCB5O2lmKGlzUmVxdWVzdChsKT95PW5ldyBVUkwobC51cmwpOih5PW5ldyBVUkwobCksbD17fSkseS51c2VybmFtZSE9PVwiXCJ8fHkucGFzc3dvcmQhPT1cIlwiKXRocm93IG5ldyBUeXBlRXJyb3IoYCR7eX0gaXMgYW4gdXJsIHdpdGggZW1iZWRkZWQgY3JlZGVudGlhbHMuYCk7bGV0IGI9ZC5tZXRob2R8fGwubWV0aG9kfHxcIkdFVFwiO2lmKC9eKGRlbGV0ZXxnZXR8aGVhZHxvcHRpb25zfHBvc3R8cHV0KSQvaS50ZXN0KGIpJiYoYj1iLnRvVXBwZXJDYXNlKCkpLCFpc1JlcXVlc3QoZCkmJlwiZGF0YVwiaW4gZCYmZG9CYWREYXRhV2FybigpLChkLmJvZHkhPW51bGx8fGlzUmVxdWVzdChsKSYmbC5ib2R5IT09bnVsbCkmJihiPT09XCJHRVRcInx8Yj09PVwiSEVBRFwiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiUmVxdWVzdCB3aXRoIEdFVC9IRUFEIG1ldGhvZCBjYW5ub3QgaGF2ZSBib2R5XCIpO2NvbnN0IFI9ZC5ib2R5P2QuYm9keTppc1JlcXVlc3QobCkmJmwuYm9keSE9PW51bGw/Y2xvbmUobCk6bnVsbDtzdXBlcihSLHtzaXplOmQuc2l6ZXx8bC5zaXplfHwwfSk7Y29uc3Qgdz1uZXcgSGVhZGVycyhkLmhlYWRlcnN8fGwuaGVhZGVyc3x8e30pO2lmKFIhPT1udWxsJiYhdy5oYXMoXCJDb250ZW50LVR5cGVcIikpe2NvbnN0IEI9ZXh0cmFjdENvbnRlbnRUeXBlKFIsdGhpcyk7QiYmdy5zZXQoXCJDb250ZW50LVR5cGVcIixCKX1sZXQgQT1pc1JlcXVlc3QobCk/bC5zaWduYWw6bnVsbDtpZihcInNpZ25hbFwiaW4gZCYmKEE9ZC5zaWduYWwpLEEhPW51bGwmJiFpc0Fib3J0U2lnbmFsKEEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBzaWduYWwgdG8gYmUgYW4gaW5zdGFuY2VvZiBBYm9ydFNpZ25hbCBvciBFdmVudFRhcmdldFwiKTtsZXQgRj1kLnJlZmVycmVyPT1udWxsP2wucmVmZXJyZXI6ZC5yZWZlcnJlcjtpZihGPT09XCJcIilGPVwibm8tcmVmZXJyZXJcIjtlbHNlIGlmKEYpe2NvbnN0IEI9bmV3IFVSTChGKTtGPS9eYWJvdXQ6KFxcL1xcLyk/Y2xpZW50JC8udGVzdChCKT9cImNsaWVudFwiOkJ9ZWxzZSBGPXZvaWQgMDt0aGlzW0lOVEVSTkFMU109e21ldGhvZDpiLHJlZGlyZWN0OmQucmVkaXJlY3R8fGwucmVkaXJlY3R8fFwiZm9sbG93XCIsaGVhZGVyczp3LHBhcnNlZFVSTDp5LHNpZ25hbDpBLHJlZmVycmVyOkZ9LHRoaXMuZm9sbG93PWQuZm9sbG93PT09dm9pZCAwP2wuZm9sbG93PT09dm9pZCAwPzIwOmwuZm9sbG93OmQuZm9sbG93LHRoaXMuY29tcHJlc3M9ZC5jb21wcmVzcz09PXZvaWQgMD9sLmNvbXByZXNzPT09dm9pZCAwPyEwOmwuY29tcHJlc3M6ZC5jb21wcmVzcyx0aGlzLmNvdW50ZXI9ZC5jb3VudGVyfHxsLmNvdW50ZXJ8fDAsdGhpcy5hZ2VudD1kLmFnZW50fHxsLmFnZW50LHRoaXMuaGlnaFdhdGVyTWFyaz1kLmhpZ2hXYXRlck1hcmt8fGwuaGlnaFdhdGVyTWFya3x8MTYzODQsdGhpcy5pbnNlY3VyZUhUVFBQYXJzZXI9ZC5pbnNlY3VyZUhUVFBQYXJzZXJ8fGwuaW5zZWN1cmVIVFRQUGFyc2VyfHwhMSx0aGlzLnJlZmVycmVyUG9saWN5PWQucmVmZXJyZXJQb2xpY3l8fGwucmVmZXJyZXJQb2xpY3l8fFwiXCJ9Z2V0IG1ldGhvZCgpe3JldHVybiB0aGlzW0lOVEVSTkFMU10ubWV0aG9kfWdldCB1cmwoKXtyZXR1cm4gcmVxdWlyZSQkMS5mb3JtYXQodGhpc1tJTlRFUk5BTFNdLnBhcnNlZFVSTCl9Z2V0IGhlYWRlcnMoKXtyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmhlYWRlcnN9Z2V0IHJlZGlyZWN0KCl7cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5yZWRpcmVjdH1nZXQgc2lnbmFsKCl7cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5zaWduYWx9Z2V0IHJlZmVycmVyKCl7aWYodGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyPT09XCJuby1yZWZlcnJlclwiKXJldHVyblwiXCI7aWYodGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyPT09XCJjbGllbnRcIilyZXR1cm5cImFib3V0OmNsaWVudFwiO2lmKHRoaXNbSU5URVJOQUxTXS5yZWZlcnJlcilyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyLnRvU3RyaW5nKCl9Z2V0IHJlZmVycmVyUG9saWN5KCl7cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5yZWZlcnJlclBvbGljeX1zZXQgcmVmZXJyZXJQb2xpY3kobCl7dGhpc1tJTlRFUk5BTFNdLnJlZmVycmVyUG9saWN5PXZhbGlkYXRlUmVmZXJyZXJQb2xpY3kobCl9Y2xvbmUoKXtyZXR1cm4gbmV3IFJlcXVlc3QodGhpcyl9Z2V0W1N5bWJvbC50b1N0cmluZ1RhZ10oKXtyZXR1cm5cIlJlcXVlc3RcIn19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUmVxdWVzdC5wcm90b3R5cGUse21ldGhvZDp7ZW51bWVyYWJsZTohMH0sdXJsOntlbnVtZXJhYmxlOiEwfSxoZWFkZXJzOntlbnVtZXJhYmxlOiEwfSxyZWRpcmVjdDp7ZW51bWVyYWJsZTohMH0sY2xvbmU6e2VudW1lcmFibGU6ITB9LHNpZ25hbDp7ZW51bWVyYWJsZTohMH0scmVmZXJyZXI6e2VudW1lcmFibGU6ITB9LHJlZmVycmVyUG9saWN5OntlbnVtZXJhYmxlOiEwfX0pO2NvbnN0IGdldE5vZGVSZXF1ZXN0T3B0aW9ucz11KGM9Pntjb25zdHtwYXJzZWRVUkw6bH09Y1tJTlRFUk5BTFNdLGQ9bmV3IEhlYWRlcnMoY1tJTlRFUk5BTFNdLmhlYWRlcnMpO2QuaGFzKFwiQWNjZXB0XCIpfHxkLnNldChcIkFjY2VwdFwiLFwiKi8qXCIpO2xldCB5PW51bGw7aWYoYy5ib2R5PT09bnVsbCYmL14ocG9zdHxwdXQpJC9pLnRlc3QoYy5tZXRob2QpJiYoeT1cIjBcIiksYy5ib2R5IT09bnVsbCl7Y29uc3QgQT1nZXRUb3RhbEJ5dGVzKGMpO3R5cGVvZiBBPT1cIm51bWJlclwiJiYhTnVtYmVyLmlzTmFOKEEpJiYoeT1TdHJpbmcoQSkpfXkmJmQuc2V0KFwiQ29udGVudC1MZW5ndGhcIix5KSxjLnJlZmVycmVyUG9saWN5PT09XCJcIiYmKGMucmVmZXJyZXJQb2xpY3k9REVGQVVMVF9SRUZFUlJFUl9QT0xJQ1kpLGMucmVmZXJyZXImJmMucmVmZXJyZXIhPT1cIm5vLXJlZmVycmVyXCI/Y1tJTlRFUk5BTFNdLnJlZmVycmVyPWRldGVybWluZVJlcXVlc3RzUmVmZXJyZXIoYyk6Y1tJTlRFUk5BTFNdLnJlZmVycmVyPVwibm8tcmVmZXJyZXJcIixjW0lOVEVSTkFMU10ucmVmZXJyZXIgaW5zdGFuY2VvZiBVUkwmJmQuc2V0KFwiUmVmZXJlclwiLGMucmVmZXJyZXIpLGQuaGFzKFwiVXNlci1BZ2VudFwiKXx8ZC5zZXQoXCJVc2VyLUFnZW50XCIsXCJub2RlLWZldGNoXCIpLGMuY29tcHJlc3MmJiFkLmhhcyhcIkFjY2VwdC1FbmNvZGluZ1wiKSYmZC5zZXQoXCJBY2NlcHQtRW5jb2RpbmdcIixcImd6aXAsIGRlZmxhdGUsIGJyXCIpO2xldHthZ2VudDpifT1jO3R5cGVvZiBiPT1cImZ1bmN0aW9uXCImJihiPWIobCkpO2NvbnN0IFI9Z2V0U2VhcmNoKGwpLHc9e3BhdGg6bC5wYXRobmFtZStSLG1ldGhvZDpjLm1ldGhvZCxoZWFkZXJzOmRbU3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpXSgpLGluc2VjdXJlSFRUUFBhcnNlcjpjLmluc2VjdXJlSFRUUFBhcnNlcixhZ2VudDpifTtyZXR1cm57cGFyc2VkVVJMOmwsb3B0aW9uczp3fX0sXCJnZXROb2RlUmVxdWVzdE9wdGlvbnNcIik7Y2xhc3MgQWJvcnRFcnJvciBleHRlbmRzIEZldGNoQmFzZUVycm9ye3N0YXRpY3t1KHRoaXMsXCJBYm9ydEVycm9yXCIpfWNvbnN0cnVjdG9yKGwsZD1cImFib3J0ZWRcIil7c3VwZXIobCxkKX19LyohIG5vZGUtZG9tZXhjZXB0aW9uLiBNSVQgTGljZW5zZS4gSmltbXkgV8OkcnRpbmcgPGh0dHBzOi8vamltbXkud2FydGluZy5zZS9vcGVuc291cmNlPiAqL3ZhciBub2RlRG9tZXhjZXB0aW9uLGhhc1JlcXVpcmVkTm9kZURvbWV4Y2VwdGlvbjtmdW5jdGlvbiByZXF1aXJlTm9kZURvbWV4Y2VwdGlvbigpe2lmKGhhc1JlcXVpcmVkTm9kZURvbWV4Y2VwdGlvbilyZXR1cm4gbm9kZURvbWV4Y2VwdGlvbjtpZihoYXNSZXF1aXJlZE5vZGVEb21leGNlcHRpb249MSwhZ2xvYmFsVGhpcy5ET01FeGNlcHRpb24pdHJ5e2NvbnN0e01lc3NhZ2VDaGFubmVsOmN9PXJlcXVpcmUoXCJ3b3JrZXJfdGhyZWFkc1wiKSxsPW5ldyBjKCkucG9ydDEsZD1uZXcgQXJyYXlCdWZmZXI7bC5wb3N0TWVzc2FnZShkLFtkLGRdKX1jYXRjaChjKXtjLmNvbnN0cnVjdG9yLm5hbWU9PT1cIkRPTUV4Y2VwdGlvblwiJiYoZ2xvYmFsVGhpcy5ET01FeGNlcHRpb249Yy5jb25zdHJ1Y3Rvcil9cmV0dXJuIG5vZGVEb21leGNlcHRpb249Z2xvYmFsVGhpcy5ET01FeGNlcHRpb24sbm9kZURvbWV4Y2VwdGlvbn11KHJlcXVpcmVOb2RlRG9tZXhjZXB0aW9uLFwicmVxdWlyZU5vZGVEb21leGNlcHRpb25cIik7dmFyIG5vZGVEb21leGNlcHRpb25FeHBvcnRzPXJlcXVpcmVOb2RlRG9tZXhjZXB0aW9uKCk7Y29uc3QgRE9NRXhjZXB0aW9uPV9jb21tb25qc0hlbHBlcnMuZ2V0RGVmYXVsdEV4cG9ydEZyb21DanMobm9kZURvbWV4Y2VwdGlvbkV4cG9ydHMpLHtzdGF0fT1ub2RlX2ZzLnByb21pc2VzLGJsb2JGcm9tU3luYz11KChjLGwpPT5mcm9tQmxvYihub2RlX2ZzLnN0YXRTeW5jKGMpLGMsbCksXCJibG9iRnJvbVN5bmNcIiksYmxvYkZyb209dSgoYyxsKT0+c3RhdChjKS50aGVuKGQ9PmZyb21CbG9iKGQsYyxsKSksXCJibG9iRnJvbVwiKSxmaWxlRnJvbT11KChjLGwpPT5zdGF0KGMpLnRoZW4oZD0+ZnJvbUZpbGUoZCxjLGwpKSxcImZpbGVGcm9tXCIpLGZpbGVGcm9tU3luYz11KChjLGwpPT5mcm9tRmlsZShub2RlX2ZzLnN0YXRTeW5jKGMpLGMsbCksXCJmaWxlRnJvbVN5bmNcIiksZnJvbUJsb2I9dSgoYyxsLGQ9XCJcIik9Pm5ldyBCbG9iKFtuZXcgQmxvYkRhdGFJdGVtKHtwYXRoOmwsc2l6ZTpjLnNpemUsbGFzdE1vZGlmaWVkOmMubXRpbWVNcyxzdGFydDowfSldLHt0eXBlOmR9KSxcImZyb21CbG9iXCIpLGZyb21GaWxlPXUoKGMsbCxkPVwiXCIpPT5uZXcgRmlsZShbbmV3IEJsb2JEYXRhSXRlbSh7cGF0aDpsLHNpemU6Yy5zaXplLGxhc3RNb2RpZmllZDpjLm10aW1lTXMsc3RhcnQ6MH0pXSxub2RlX3BhdGguYmFzZW5hbWUobCkse3R5cGU6ZCxsYXN0TW9kaWZpZWQ6Yy5tdGltZU1zfSksXCJmcm9tRmlsZVwiKTtjbGFzcyBCbG9iRGF0YUl0ZW17c3RhdGlje3UodGhpcyxcIkJsb2JEYXRhSXRlbVwiKX0jZTsjdDtjb25zdHJ1Y3RvcihsKXt0aGlzLiNlPWwucGF0aCx0aGlzLiN0PWwuc3RhcnQsdGhpcy5zaXplPWwuc2l6ZSx0aGlzLmxhc3RNb2RpZmllZD1sLmxhc3RNb2RpZmllZH1zbGljZShsLGQpe3JldHVybiBuZXcgQmxvYkRhdGFJdGVtKHtwYXRoOnRoaXMuI2UsbGFzdE1vZGlmaWVkOnRoaXMubGFzdE1vZGlmaWVkLHNpemU6ZC1sLHN0YXJ0OnRoaXMuI3QrbH0pfWFzeW5jKnN0cmVhbSgpe2NvbnN0e210aW1lTXM6bH09YXdhaXQgc3RhdCh0aGlzLiNlKTtpZihsPnRoaXMubGFzdE1vZGlmaWVkKXRocm93IG5ldyBET01FeGNlcHRpb24oXCJUaGUgcmVxdWVzdGVkIGZpbGUgY291bGQgbm90IGJlIHJlYWQsIHR5cGljYWxseSBkdWUgdG8gcGVybWlzc2lvbiBwcm9ibGVtcyB0aGF0IGhhdmUgb2NjdXJyZWQgYWZ0ZXIgYSByZWZlcmVuY2UgdG8gYSBmaWxlIHdhcyBhY3F1aXJlZC5cIixcIk5vdFJlYWRhYmxlRXJyb3JcIik7eWllbGQqbm9kZV9mcy5jcmVhdGVSZWFkU3RyZWFtKHRoaXMuI2Use3N0YXJ0OnRoaXMuI3QsZW5kOnRoaXMuI3QrdGhpcy5zaXplLTF9KX1nZXRbU3ltYm9sLnRvU3RyaW5nVGFnXSgpe3JldHVyblwiQmxvYlwifX1jb25zdCBzdXBwb3J0ZWRTY2hlbWFzPW5ldyBTZXQoW1wiZGF0YTpcIixcImh0dHA6XCIsXCJodHRwczpcIl0pO2FzeW5jIGZ1bmN0aW9uIGZldGNoJDEoYyxsKXtyZXR1cm4gbmV3IFByb21pc2UoKGQseSk9Pntjb25zdCBiPW5ldyBSZXF1ZXN0KGMsbCkse3BhcnNlZFVSTDpSLG9wdGlvbnM6d309Z2V0Tm9kZVJlcXVlc3RPcHRpb25zKGIpO2lmKCFzdXBwb3J0ZWRTY2hlbWFzLmhhcyhSLnByb3RvY29sKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBub2RlLWZldGNoIGNhbm5vdCBsb2FkICR7Y30uIFVSTCBzY2hlbWUgXCIke1IucHJvdG9jb2wucmVwbGFjZSgvOiQvLFwiXCIpfVwiIGlzIG5vdCBzdXBwb3J0ZWQuYCk7aWYoUi5wcm90b2NvbD09PVwiZGF0YTpcIil7Y29uc3QgRT1kYXRhVXJpVG9CdWZmZXIoYi51cmwpLFo9bmV3IFJlc3BvbnNlKEUse2hlYWRlcnM6e1wiQ29udGVudC1UeXBlXCI6RS50eXBlRnVsbH19KTtkKFopO3JldHVybn1jb25zdCBBPShSLnByb3RvY29sPT09XCJodHRwczpcIj9odHRwc19fZGVmYXVsdDpodHRwX19kZWZhdWx0KS5yZXF1ZXN0LHtzaWduYWw6Rn09YjtsZXQgQj1udWxsO2NvbnN0IHo9dSgoKT0+e2NvbnN0IEU9bmV3IEFib3J0RXJyb3IoXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiKTt5KEUpLGIuYm9keSYmYi5ib2R5IGluc3RhbmNlb2YgU3RyZWFtX19kZWZhdWx0LlJlYWRhYmxlJiZiLmJvZHkuZGVzdHJveShFKSwhKCFCfHwhQi5ib2R5KSYmQi5ib2R5LmVtaXQoXCJlcnJvclwiLEUpfSxcImFib3J0XCIpO2lmKEYmJkYuYWJvcnRlZCl7eigpO3JldHVybn1jb25zdCBXPXUoKCk9Pnt6KCksRCgpfSxcImFib3J0QW5kRmluYWxpemVcIiksVD1BKFIudG9TdHJpbmcoKSx3KTtGJiZGLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLFcpO2NvbnN0IEQ9dSgoKT0+e1QuYWJvcnQoKSxGJiZGLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLFcpfSxcImZpbmFsaXplXCIpO1Qub24oXCJlcnJvclwiLEU9Pnt5KG5ldyBGZXRjaEVycm9yKGByZXF1ZXN0IHRvICR7Yi51cmx9IGZhaWxlZCwgcmVhc29uOiAke0UubWVzc2FnZX1gLFwic3lzdGVtXCIsRSkpLEQoKX0pLGZpeFJlc3BvbnNlQ2h1bmtlZFRyYW5zZmVyQmFkRW5kaW5nKFQsRT0+e0ImJkIuYm9keSYmQi5ib2R5LmRlc3Ryb3koRSl9KSxwcm9jZXNzLnZlcnNpb248XCJ2MTRcIiYmVC5vbihcInNvY2tldFwiLEU9PntsZXQgWjtFLnByZXBlbmRMaXN0ZW5lcihcImVuZFwiLCgpPT57Wj1FLl9ldmVudHNDb3VudH0pLEUucHJlcGVuZExpc3RlbmVyKFwiY2xvc2VcIixNPT57aWYoQiYmWjxFLl9ldmVudHNDb3VudCYmIU0pe2NvbnN0IFU9bmV3IEVycm9yKFwiUHJlbWF0dXJlIGNsb3NlXCIpO1UuY29kZT1cIkVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFXCIsQi5ib2R5LmVtaXQoXCJlcnJvclwiLFUpfX0pfSksVC5vbihcInJlc3BvbnNlXCIsRT0+e1Quc2V0VGltZW91dCgwKTtjb25zdCBaPWZyb21SYXdIZWFkZXJzKEUucmF3SGVhZGVycyk7aWYoaXNSZWRpcmVjdChFLnN0YXR1c0NvZGUpKXtjb25zdCAkPVouZ2V0KFwiTG9jYXRpb25cIik7bGV0IE49bnVsbDt0cnl7Tj0kPT09bnVsbD9udWxsOm5ldyBVUkwoJCxiLnVybCl9Y2F0Y2h7aWYoYi5yZWRpcmVjdCE9PVwibWFudWFsXCIpe3kobmV3IEZldGNoRXJyb3IoYHVyaSByZXF1ZXN0ZWQgcmVzcG9uZHMgd2l0aCBhbiBpbnZhbGlkIHJlZGlyZWN0IFVSTDogJHskfWAsXCJpbnZhbGlkLXJlZGlyZWN0XCIpKSxEKCk7cmV0dXJufX1zd2l0Y2goYi5yZWRpcmVjdCl7Y2FzZVwiZXJyb3JcIjp5KG5ldyBGZXRjaEVycm9yKGB1cmkgcmVxdWVzdGVkIHJlc3BvbmRzIHdpdGggYSByZWRpcmVjdCwgcmVkaXJlY3QgbW9kZSBpcyBzZXQgdG8gZXJyb3I6ICR7Yi51cmx9YCxcIm5vLXJlZGlyZWN0XCIpKSxEKCk7cmV0dXJuO2Nhc2VcIm1hbnVhbFwiOmJyZWFrO2Nhc2VcImZvbGxvd1wiOntpZihOPT09bnVsbClicmVhaztpZihiLmNvdW50ZXI+PWIuZm9sbG93KXt5KG5ldyBGZXRjaEVycm9yKGBtYXhpbXVtIHJlZGlyZWN0IHJlYWNoZWQgYXQ6ICR7Yi51cmx9YCxcIm1heC1yZWRpcmVjdFwiKSksRCgpO3JldHVybn1jb25zdCBWPXtoZWFkZXJzOm5ldyBIZWFkZXJzKGIuaGVhZGVycyksZm9sbG93OmIuZm9sbG93LGNvdW50ZXI6Yi5jb3VudGVyKzEsYWdlbnQ6Yi5hZ2VudCxjb21wcmVzczpiLmNvbXByZXNzLG1ldGhvZDpiLm1ldGhvZCxib2R5OmNsb25lKGIpLHNpZ25hbDpiLnNpZ25hbCxzaXplOmIuc2l6ZSxyZWZlcnJlcjpiLnJlZmVycmVyLHJlZmVycmVyUG9saWN5OmIucmVmZXJyZXJQb2xpY3l9O2lmKCFpc0RvbWFpbk9yU3ViZG9tYWluKGIudXJsLE4pfHwhaXNTYW1lUHJvdG9jb2woYi51cmwsTikpZm9yKGNvbnN0IHJ0IG9mW1wiYXV0aG9yaXphdGlvblwiLFwid3d3LWF1dGhlbnRpY2F0ZVwiLFwiY29va2llXCIsXCJjb29raWUyXCJdKVYuaGVhZGVycy5kZWxldGUocnQpO2lmKEUuc3RhdHVzQ29kZSE9PTMwMyYmYi5ib2R5JiZsLmJvZHkgaW5zdGFuY2VvZiBTdHJlYW1fX2RlZmF1bHQuUmVhZGFibGUpe3kobmV3IEZldGNoRXJyb3IoXCJDYW5ub3QgZm9sbG93IHJlZGlyZWN0IHdpdGggYm9keSBiZWluZyBhIHJlYWRhYmxlIHN0cmVhbVwiLFwidW5zdXBwb3J0ZWQtcmVkaXJlY3RcIikpLEQoKTtyZXR1cm59KEUuc3RhdHVzQ29kZT09PTMwM3x8KEUuc3RhdHVzQ29kZT09PTMwMXx8RS5zdGF0dXNDb2RlPT09MzAyKSYmYi5tZXRob2Q9PT1cIlBPU1RcIikmJihWLm1ldGhvZD1cIkdFVFwiLFYuYm9keT12b2lkIDAsVi5oZWFkZXJzLmRlbGV0ZShcImNvbnRlbnQtbGVuZ3RoXCIpKTtjb25zdCBRPXBhcnNlUmVmZXJyZXJQb2xpY3lGcm9tSGVhZGVyKFopO1EmJihWLnJlZmVycmVyUG9saWN5PVEpLGQoZmV0Y2gkMShuZXcgUmVxdWVzdChOLFYpKSksRCgpO3JldHVybn1kZWZhdWx0OnJldHVybiB5KG5ldyBUeXBlRXJyb3IoYFJlZGlyZWN0IG9wdGlvbiAnJHtiLnJlZGlyZWN0fScgaXMgbm90IGEgdmFsaWQgdmFsdWUgb2YgUmVxdWVzdFJlZGlyZWN0YCkpfX1GJiZFLm9uY2UoXCJlbmRcIiwoKT0+e0YucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsVyl9KTtsZXQgTT1TdHJlYW0ucGlwZWxpbmUoRSxuZXcgU3RyZWFtLlBhc3NUaHJvdWdoLCQ9PnskJiZ5KCQpfSk7cHJvY2Vzcy52ZXJzaW9uPFwidjEyLjEwXCImJkUub24oXCJhYm9ydGVkXCIsVyk7Y29uc3QgVT17dXJsOmIudXJsLHN0YXR1czpFLnN0YXR1c0NvZGUsc3RhdHVzVGV4dDpFLnN0YXR1c01lc3NhZ2UsaGVhZGVyczpaLHNpemU6Yi5zaXplLGNvdW50ZXI6Yi5jb3VudGVyLGhpZ2hXYXRlck1hcms6Yi5oaWdoV2F0ZXJNYXJrfSxLPVouZ2V0KFwiQ29udGVudC1FbmNvZGluZ1wiKTtpZighYi5jb21wcmVzc3x8Yi5tZXRob2Q9PT1cIkhFQURcInx8Sz09PW51bGx8fEUuc3RhdHVzQ29kZT09PTIwNHx8RS5zdGF0dXNDb2RlPT09MzA0KXtCPW5ldyBSZXNwb25zZShNLFUpLGQoQik7cmV0dXJufWNvbnN0IHNlPXtmbHVzaDp6bGliX19kZWZhdWx0LlpfU1lOQ19GTFVTSCxmaW5pc2hGbHVzaDp6bGliX19kZWZhdWx0LlpfU1lOQ19GTFVTSH07aWYoSz09PVwiZ3ppcFwifHxLPT09XCJ4LWd6aXBcIil7TT1TdHJlYW0ucGlwZWxpbmUoTSx6bGliX19kZWZhdWx0LmNyZWF0ZUd1bnppcChzZSksJD0+eyQmJnkoJCl9KSxCPW5ldyBSZXNwb25zZShNLFUpLGQoQik7cmV0dXJufWlmKEs9PT1cImRlZmxhdGVcInx8Sz09PVwieC1kZWZsYXRlXCIpe2NvbnN0ICQ9U3RyZWFtLnBpcGVsaW5lKEUsbmV3IFN0cmVhbS5QYXNzVGhyb3VnaCxOPT57TiYmeShOKX0pOyQub25jZShcImRhdGFcIixOPT57KE5bMF0mMTUpPT09OD9NPVN0cmVhbS5waXBlbGluZShNLHpsaWJfX2RlZmF1bHQuY3JlYXRlSW5mbGF0ZSgpLFY9PntWJiZ5KFYpfSk6TT1TdHJlYW0ucGlwZWxpbmUoTSx6bGliX19kZWZhdWx0LmNyZWF0ZUluZmxhdGVSYXcoKSxWPT57ViYmeShWKX0pLEI9bmV3IFJlc3BvbnNlKE0sVSksZChCKX0pLCQub25jZShcImVuZFwiLCgpPT57Qnx8KEI9bmV3IFJlc3BvbnNlKE0sVSksZChCKSl9KTtyZXR1cm59aWYoSz09PVwiYnJcIil7TT1TdHJlYW0ucGlwZWxpbmUoTSx6bGliX19kZWZhdWx0LmNyZWF0ZUJyb3RsaURlY29tcHJlc3MoKSwkPT57JCYmeSgkKX0pLEI9bmV3IFJlc3BvbnNlKE0sVSksZChCKTtyZXR1cm59Qj1uZXcgUmVzcG9uc2UoTSxVKSxkKEIpfSksd3JpdGVUb1N0cmVhbShULGIpLmNhdGNoKHkpfSl9dShmZXRjaCQxLFwiZmV0Y2gkMVwiKTtmdW5jdGlvbiBmaXhSZXNwb25zZUNodW5rZWRUcmFuc2ZlckJhZEVuZGluZyhjLGwpe2NvbnN0IGQ9cmVxdWlyZSQkMC5CdWZmZXIuZnJvbShgMFxcclxuXFxyXG5gKTtsZXQgeT0hMSxiPSExLFI7Yy5vbihcInJlc3BvbnNlXCIsdz0+e2NvbnN0e2hlYWRlcnM6QX09dzt5PUFbXCJ0cmFuc2Zlci1lbmNvZGluZ1wiXT09PVwiY2h1bmtlZFwiJiYhQVtcImNvbnRlbnQtbGVuZ3RoXCJdfSksYy5vbihcInNvY2tldFwiLHc9Pntjb25zdCBBPXUoKCk9PntpZih5JiYhYil7Y29uc3QgQj1uZXcgRXJyb3IoXCJQcmVtYXR1cmUgY2xvc2VcIik7Qi5jb2RlPVwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIixsKEIpfX0sXCJvblNvY2tldENsb3NlXCIpLEY9dShCPT57Yj1yZXF1aXJlJCQwLkJ1ZmZlci5jb21wYXJlKEIuc2xpY2UoLTUpLGQpPT09MCwhYiYmUiYmKGI9cmVxdWlyZSQkMC5CdWZmZXIuY29tcGFyZShSLnNsaWNlKC0zKSxkLnNsaWNlKDAsMykpPT09MCYmcmVxdWlyZSQkMC5CdWZmZXIuY29tcGFyZShCLnNsaWNlKC0yKSxkLnNsaWNlKDMpKT09PTApLFI9Qn0sXCJvbkRhdGFcIik7dy5wcmVwZW5kTGlzdGVuZXIoXCJjbG9zZVwiLEEpLHcub24oXCJkYXRhXCIsRiksYy5vbihcImNsb3NlXCIsKCk9Pnt3LnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixBKSx3LnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLEYpfSl9KX11KGZpeFJlc3BvbnNlQ2h1bmtlZFRyYW5zZmVyQmFkRW5kaW5nLFwiZml4UmVzcG9uc2VDaHVua2VkVHJhbnNmZXJCYWRFbmRpbmdcIik7Y29uc3QgcHJpdmF0ZURhdGE9bmV3IFdlYWtNYXAsd3JhcHBlcnM9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gcGQoYyl7Y29uc3QgbD1wcml2YXRlRGF0YS5nZXQoYyk7cmV0dXJuIGNvbnNvbGUuYXNzZXJ0KGwhPW51bGwsXCIndGhpcycgaXMgZXhwZWN0ZWQgYW4gRXZlbnQgb2JqZWN0LCBidXQgZ290XCIsYyksbH11KHBkLFwicGRcIik7ZnVuY3Rpb24gc2V0Q2FuY2VsRmxhZyhjKXtpZihjLnBhc3NpdmVMaXN0ZW5lciE9bnVsbCl7dHlwZW9mIGNvbnNvbGU8XCJ1XCImJnR5cGVvZiBjb25zb2xlLmVycm9yPT1cImZ1bmN0aW9uXCImJmNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gcHJldmVudERlZmF1bHQgaW5zaWRlIHBhc3NpdmUgZXZlbnQgbGlzdGVuZXIgaW52b2NhdGlvbi5cIixjLnBhc3NpdmVMaXN0ZW5lcik7cmV0dXJufWMuZXZlbnQuY2FuY2VsYWJsZSYmKGMuY2FuY2VsZWQ9ITAsdHlwZW9mIGMuZXZlbnQucHJldmVudERlZmF1bHQ9PVwiZnVuY3Rpb25cIiYmYy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpKX11KHNldENhbmNlbEZsYWcsXCJzZXRDYW5jZWxGbGFnXCIpO2Z1bmN0aW9uIEV2ZW50KGMsbCl7cHJpdmF0ZURhdGEuc2V0KHRoaXMse2V2ZW50VGFyZ2V0OmMsZXZlbnQ6bCxldmVudFBoYXNlOjIsY3VycmVudFRhcmdldDpjLGNhbmNlbGVkOiExLHN0b3BwZWQ6ITEsaW1tZWRpYXRlU3RvcHBlZDohMSxwYXNzaXZlTGlzdGVuZXI6bnVsbCx0aW1lU3RhbXA6bC50aW1lU3RhbXB8fERhdGUubm93KCl9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlzVHJ1c3RlZFwiLHt2YWx1ZTohMSxlbnVtZXJhYmxlOiEwfSk7Y29uc3QgZD1PYmplY3Qua2V5cyhsKTtmb3IobGV0IHk9MDt5PGQubGVuZ3RoOysreSl7Y29uc3QgYj1kW3ldO2IgaW4gdGhpc3x8T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsYixkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3IoYikpfX11KEV2ZW50LFwiRXZlbnRcIiksRXZlbnQucHJvdG90eXBlPXtnZXQgdHlwZSgpe3JldHVybiBwZCh0aGlzKS5ldmVudC50eXBlfSxnZXQgdGFyZ2V0KCl7cmV0dXJuIHBkKHRoaXMpLmV2ZW50VGFyZ2V0fSxnZXQgY3VycmVudFRhcmdldCgpe3JldHVybiBwZCh0aGlzKS5jdXJyZW50VGFyZ2V0fSxjb21wb3NlZFBhdGgoKXtjb25zdCBjPXBkKHRoaXMpLmN1cnJlbnRUYXJnZXQ7cmV0dXJuIGM9PW51bGw/W106W2NdfSxnZXQgTk9ORSgpe3JldHVybiAwfSxnZXQgQ0FQVFVSSU5HX1BIQVNFKCl7cmV0dXJuIDF9LGdldCBBVF9UQVJHRVQoKXtyZXR1cm4gMn0sZ2V0IEJVQkJMSU5HX1BIQVNFKCl7cmV0dXJuIDN9LGdldCBldmVudFBoYXNlKCl7cmV0dXJuIHBkKHRoaXMpLmV2ZW50UGhhc2V9LHN0b3BQcm9wYWdhdGlvbigpe2NvbnN0IGM9cGQodGhpcyk7Yy5zdG9wcGVkPSEwLHR5cGVvZiBjLmV2ZW50LnN0b3BQcm9wYWdhdGlvbj09XCJmdW5jdGlvblwiJiZjLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpfSxzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKXtjb25zdCBjPXBkKHRoaXMpO2Muc3RvcHBlZD0hMCxjLmltbWVkaWF0ZVN0b3BwZWQ9ITAsdHlwZW9mIGMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uPT1cImZ1bmN0aW9uXCImJmMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCl9LGdldCBidWJibGVzKCl7cmV0dXJuISFwZCh0aGlzKS5ldmVudC5idWJibGVzfSxnZXQgY2FuY2VsYWJsZSgpe3JldHVybiEhcGQodGhpcykuZXZlbnQuY2FuY2VsYWJsZX0scHJldmVudERlZmF1bHQoKXtzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKX0sZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKXtyZXR1cm4gcGQodGhpcykuY2FuY2VsZWR9LGdldCBjb21wb3NlZCgpe3JldHVybiEhcGQodGhpcykuZXZlbnQuY29tcG9zZWR9LGdldCB0aW1lU3RhbXAoKXtyZXR1cm4gcGQodGhpcykudGltZVN0YW1wfSxnZXQgc3JjRWxlbWVudCgpe3JldHVybiBwZCh0aGlzKS5ldmVudFRhcmdldH0sZ2V0IGNhbmNlbEJ1YmJsZSgpe3JldHVybiBwZCh0aGlzKS5zdG9wcGVkfSxzZXQgY2FuY2VsQnViYmxlKGMpe2lmKCFjKXJldHVybjtjb25zdCBsPXBkKHRoaXMpO2wuc3RvcHBlZD0hMCx0eXBlb2YgbC5ldmVudC5jYW5jZWxCdWJibGU9PVwiYm9vbGVhblwiJiYobC5ldmVudC5jYW5jZWxCdWJibGU9ITApfSxnZXQgcmV0dXJuVmFsdWUoKXtyZXR1cm4hcGQodGhpcykuY2FuY2VsZWR9LHNldCByZXR1cm5WYWx1ZShjKXtjfHxzZXRDYW5jZWxGbGFnKHBkKHRoaXMpKX0saW5pdEV2ZW50KCl7fX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50LnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIse3ZhbHVlOkV2ZW50LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLHR5cGVvZiB3aW5kb3c8XCJ1XCImJnR5cGVvZiB3aW5kb3cuRXZlbnQ8XCJ1XCImJihPYmplY3Quc2V0UHJvdG90eXBlT2YoRXZlbnQucHJvdG90eXBlLHdpbmRvdy5FdmVudC5wcm90b3R5cGUpLHdyYXBwZXJzLnNldCh3aW5kb3cuRXZlbnQucHJvdG90eXBlLEV2ZW50KSk7ZnVuY3Rpb24gZGVmaW5lUmVkaXJlY3REZXNjcmlwdG9yKGMpe3JldHVybntnZXQoKXtyZXR1cm4gcGQodGhpcykuZXZlbnRbY119LHNldChsKXtwZCh0aGlzKS5ldmVudFtjXT1sfSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19dShkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3IsXCJkZWZpbmVSZWRpcmVjdERlc2NyaXB0b3JcIik7ZnVuY3Rpb24gZGVmaW5lQ2FsbERlc2NyaXB0b3IoYyl7cmV0dXJue3ZhbHVlKCl7Y29uc3QgbD1wZCh0aGlzKS5ldmVudDtyZXR1cm4gbFtjXS5hcHBseShsLGFyZ3VtZW50cyl9LGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwfX11KGRlZmluZUNhbGxEZXNjcmlwdG9yLFwiZGVmaW5lQ2FsbERlc2NyaXB0b3JcIik7ZnVuY3Rpb24gZGVmaW5lV3JhcHBlcihjLGwpe2NvbnN0IGQ9T2JqZWN0LmtleXMobCk7aWYoZC5sZW5ndGg9PT0wKXJldHVybiBjO2Z1bmN0aW9uIHkoYixSKXtjLmNhbGwodGhpcyxiLFIpfXUoeSxcIkN1c3RvbUV2ZW50XCIpLHkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYy5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp5LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH19KTtmb3IobGV0IGI9MDtiPGQubGVuZ3RoOysrYil7Y29uc3QgUj1kW2JdO2lmKCEoUiBpbiBjLnByb3RvdHlwZSkpe2NvbnN0IEE9dHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobCxSKS52YWx1ZT09XCJmdW5jdGlvblwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh5LnByb3RvdHlwZSxSLEE/ZGVmaW5lQ2FsbERlc2NyaXB0b3IoUik6ZGVmaW5lUmVkaXJlY3REZXNjcmlwdG9yKFIpKX19cmV0dXJuIHl9dShkZWZpbmVXcmFwcGVyLFwiZGVmaW5lV3JhcHBlclwiKTtmdW5jdGlvbiBnZXRXcmFwcGVyKGMpe2lmKGM9PW51bGx8fGM9PT1PYmplY3QucHJvdG90eXBlKXJldHVybiBFdmVudDtsZXQgbD13cmFwcGVycy5nZXQoYyk7cmV0dXJuIGw9PW51bGwmJihsPWRlZmluZVdyYXBwZXIoZ2V0V3JhcHBlcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoYykpLGMpLHdyYXBwZXJzLnNldChjLGwpKSxsfXUoZ2V0V3JhcHBlcixcImdldFdyYXBwZXJcIik7ZnVuY3Rpb24gd3JhcEV2ZW50KGMsbCl7Y29uc3QgZD1nZXRXcmFwcGVyKE9iamVjdC5nZXRQcm90b3R5cGVPZihsKSk7cmV0dXJuIG5ldyBkKGMsbCl9dSh3cmFwRXZlbnQsXCJ3cmFwRXZlbnRcIik7ZnVuY3Rpb24gaXNTdG9wcGVkKGMpe3JldHVybiBwZChjKS5pbW1lZGlhdGVTdG9wcGVkfXUoaXNTdG9wcGVkLFwiaXNTdG9wcGVkXCIpO2Z1bmN0aW9uIHNldEV2ZW50UGhhc2UoYyxsKXtwZChjKS5ldmVudFBoYXNlPWx9dShzZXRFdmVudFBoYXNlLFwic2V0RXZlbnRQaGFzZVwiKTtmdW5jdGlvbiBzZXRDdXJyZW50VGFyZ2V0KGMsbCl7cGQoYykuY3VycmVudFRhcmdldD1sfXUoc2V0Q3VycmVudFRhcmdldCxcInNldEN1cnJlbnRUYXJnZXRcIik7ZnVuY3Rpb24gc2V0UGFzc2l2ZUxpc3RlbmVyKGMsbCl7cGQoYykucGFzc2l2ZUxpc3RlbmVyPWx9dShzZXRQYXNzaXZlTGlzdGVuZXIsXCJzZXRQYXNzaXZlTGlzdGVuZXJcIik7Y29uc3QgbGlzdGVuZXJzTWFwPW5ldyBXZWFrTWFwLENBUFRVUkU9MSxCVUJCTEU9MixBVFRSSUJVVEU9MztmdW5jdGlvbiBpc09iamVjdChjKXtyZXR1cm4gYyE9PW51bGwmJnR5cGVvZiBjPT1cIm9iamVjdFwifXUoaXNPYmplY3QsXCJpc09iamVjdFwiKTtmdW5jdGlvbiBnZXRMaXN0ZW5lcnMoYyl7Y29uc3QgbD1saXN0ZW5lcnNNYXAuZ2V0KGMpO2lmKGw9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIid0aGlzJyBpcyBleHBlY3RlZCBhbiBFdmVudFRhcmdldCBvYmplY3QsIGJ1dCBnb3QgYW5vdGhlciB2YWx1ZS5cIik7cmV0dXJuIGx9dShnZXRMaXN0ZW5lcnMsXCJnZXRMaXN0ZW5lcnNcIik7ZnVuY3Rpb24gZGVmaW5lRXZlbnRBdHRyaWJ1dGVEZXNjcmlwdG9yKGMpe3JldHVybntnZXQoKXtsZXQgZD1nZXRMaXN0ZW5lcnModGhpcykuZ2V0KGMpO2Zvcig7ZCE9bnVsbDspe2lmKGQubGlzdGVuZXJUeXBlPT09QVRUUklCVVRFKXJldHVybiBkLmxpc3RlbmVyO2Q9ZC5uZXh0fXJldHVybiBudWxsfSxzZXQobCl7dHlwZW9mIGwhPVwiZnVuY3Rpb25cIiYmIWlzT2JqZWN0KGwpJiYobD1udWxsKTtjb25zdCBkPWdldExpc3RlbmVycyh0aGlzKTtsZXQgeT1udWxsLGI9ZC5nZXQoYyk7Zm9yKDtiIT1udWxsOyliLmxpc3RlbmVyVHlwZT09PUFUVFJJQlVURT95IT09bnVsbD95Lm5leHQ9Yi5uZXh0OmIubmV4dCE9PW51bGw/ZC5zZXQoYyxiLm5leHQpOmQuZGVsZXRlKGMpOnk9YixiPWIubmV4dDtpZihsIT09bnVsbCl7Y29uc3QgUj17bGlzdGVuZXI6bCxsaXN0ZW5lclR5cGU6QVRUUklCVVRFLHBhc3NpdmU6ITEsb25jZTohMSxuZXh0Om51bGx9O3k9PT1udWxsP2Quc2V0KGMsUik6eS5uZXh0PVJ9fSxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMH19dShkZWZpbmVFdmVudEF0dHJpYnV0ZURlc2NyaXB0b3IsXCJkZWZpbmVFdmVudEF0dHJpYnV0ZURlc2NyaXB0b3JcIik7ZnVuY3Rpb24gZGVmaW5lRXZlbnRBdHRyaWJ1dGUoYyxsKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYyxgb24ke2x9YCxkZWZpbmVFdmVudEF0dHJpYnV0ZURlc2NyaXB0b3IobCkpfXUoZGVmaW5lRXZlbnRBdHRyaWJ1dGUsXCJkZWZpbmVFdmVudEF0dHJpYnV0ZVwiKTtmdW5jdGlvbiBkZWZpbmVDdXN0b21FdmVudFRhcmdldChjKXtmdW5jdGlvbiBsKCl7RXZlbnRUYXJnZXQuY2FsbCh0aGlzKX11KGwsXCJDdXN0b21FdmVudFRhcmdldFwiKSxsLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEV2ZW50VGFyZ2V0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmwsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfX0pO2ZvcihsZXQgZD0wO2Q8Yy5sZW5ndGg7KytkKWRlZmluZUV2ZW50QXR0cmlidXRlKGwucHJvdG90eXBlLGNbZF0pO3JldHVybiBsfXUoZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQsXCJkZWZpbmVDdXN0b21FdmVudFRhcmdldFwiKTtmdW5jdGlvbiBFdmVudFRhcmdldCgpe2lmKHRoaXMgaW5zdGFuY2VvZiBFdmVudFRhcmdldCl7bGlzdGVuZXJzTWFwLnNldCh0aGlzLG5ldyBNYXApO3JldHVybn1pZihhcmd1bWVudHMubGVuZ3RoPT09MSYmQXJyYXkuaXNBcnJheShhcmd1bWVudHNbMF0pKXJldHVybiBkZWZpbmVDdXN0b21FdmVudFRhcmdldChhcmd1bWVudHNbMF0pO2lmKGFyZ3VtZW50cy5sZW5ndGg+MCl7Y29uc3QgYz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7Zm9yKGxldCBsPTA7bDxhcmd1bWVudHMubGVuZ3RoOysrbCljW2xdPWFyZ3VtZW50c1tsXTtyZXR1cm4gZGVmaW5lQ3VzdG9tRXZlbnRUYXJnZXQoYyl9dGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX11KEV2ZW50VGFyZ2V0LFwiRXZlbnRUYXJnZXRcIiksRXZlbnRUYXJnZXQucHJvdG90eXBlPXthZGRFdmVudExpc3RlbmVyKGMsbCxkKXtpZihsPT1udWxsKXJldHVybjtpZih0eXBlb2YgbCE9XCJmdW5jdGlvblwiJiYhaXNPYmplY3QobCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIidsaXN0ZW5lcicgc2hvdWxkIGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0LlwiKTtjb25zdCB5PWdldExpc3RlbmVycyh0aGlzKSxiPWlzT2JqZWN0KGQpLHc9KGI/ISFkLmNhcHR1cmU6ISFkKT9DQVBUVVJFOkJVQkJMRSxBPXtsaXN0ZW5lcjpsLGxpc3RlbmVyVHlwZTp3LHBhc3NpdmU6YiYmISFkLnBhc3NpdmUsb25jZTpiJiYhIWQub25jZSxuZXh0Om51bGx9O2xldCBGPXkuZ2V0KGMpO2lmKEY9PT12b2lkIDApe3kuc2V0KGMsQSk7cmV0dXJufWxldCBCPW51bGw7Zm9yKDtGIT1udWxsOyl7aWYoRi5saXN0ZW5lcj09PWwmJkYubGlzdGVuZXJUeXBlPT09dylyZXR1cm47Qj1GLEY9Ri5uZXh0fUIubmV4dD1BfSxyZW1vdmVFdmVudExpc3RlbmVyKGMsbCxkKXtpZihsPT1udWxsKXJldHVybjtjb25zdCB5PWdldExpc3RlbmVycyh0aGlzKSxSPShpc09iamVjdChkKT8hIWQuY2FwdHVyZTohIWQpP0NBUFRVUkU6QlVCQkxFO2xldCB3PW51bGwsQT15LmdldChjKTtmb3IoO0EhPW51bGw7KXtpZihBLmxpc3RlbmVyPT09bCYmQS5saXN0ZW5lclR5cGU9PT1SKXt3IT09bnVsbD93Lm5leHQ9QS5uZXh0OkEubmV4dCE9PW51bGw/eS5zZXQoYyxBLm5leHQpOnkuZGVsZXRlKGMpO3JldHVybn13PUEsQT1BLm5leHR9fSxkaXNwYXRjaEV2ZW50KGMpe2lmKGM9PW51bGx8fHR5cGVvZiBjLnR5cGUhPVwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJldmVudC50eXBlXCIgc2hvdWxkIGJlIGEgc3RyaW5nLicpO2NvbnN0IGw9Z2V0TGlzdGVuZXJzKHRoaXMpLGQ9Yy50eXBlO2xldCB5PWwuZ2V0KGQpO2lmKHk9PW51bGwpcmV0dXJuITA7Y29uc3QgYj13cmFwRXZlbnQodGhpcyxjKTtsZXQgUj1udWxsO2Zvcig7eSE9bnVsbDspe2lmKHkub25jZT9SIT09bnVsbD9SLm5leHQ9eS5uZXh0OnkubmV4dCE9PW51bGw/bC5zZXQoZCx5Lm5leHQpOmwuZGVsZXRlKGQpOlI9eSxzZXRQYXNzaXZlTGlzdGVuZXIoYix5LnBhc3NpdmU/eS5saXN0ZW5lcjpudWxsKSx0eXBlb2YgeS5saXN0ZW5lcj09XCJmdW5jdGlvblwiKXRyeXt5Lmxpc3RlbmVyLmNhbGwodGhpcyxiKX1jYXRjaCh3KXt0eXBlb2YgY29uc29sZTxcInVcIiYmdHlwZW9mIGNvbnNvbGUuZXJyb3I9PVwiZnVuY3Rpb25cIiYmY29uc29sZS5lcnJvcih3KX1lbHNlIHkubGlzdGVuZXJUeXBlIT09QVRUUklCVVRFJiZ0eXBlb2YgeS5saXN0ZW5lci5oYW5kbGVFdmVudD09XCJmdW5jdGlvblwiJiZ5Lmxpc3RlbmVyLmhhbmRsZUV2ZW50KGIpO2lmKGlzU3RvcHBlZChiKSlicmVhazt5PXkubmV4dH1yZXR1cm4gc2V0UGFzc2l2ZUxpc3RlbmVyKGIsbnVsbCksc2V0RXZlbnRQaGFzZShiLDApLHNldEN1cnJlbnRUYXJnZXQoYixudWxsKSwhYi5kZWZhdWx0UHJldmVudGVkfX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50VGFyZ2V0LnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIse3ZhbHVlOkV2ZW50VGFyZ2V0LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLHR5cGVvZiB3aW5kb3c8XCJ1XCImJnR5cGVvZiB3aW5kb3cuRXZlbnRUYXJnZXQ8XCJ1XCImJk9iamVjdC5zZXRQcm90b3R5cGVPZihFdmVudFRhcmdldC5wcm90b3R5cGUsd2luZG93LkV2ZW50VGFyZ2V0LnByb3RvdHlwZSk7Y2xhc3MgQWJvcnRTaWduYWwgZXh0ZW5kcyBFdmVudFRhcmdldHtzdGF0aWN7dSh0aGlzLFwiQWJvcnRTaWduYWxcIil9Y29uc3RydWN0b3IoKXt0aHJvdyBzdXBlcigpLG5ldyBUeXBlRXJyb3IoXCJBYm9ydFNpZ25hbCBjYW5ub3QgYmUgY29uc3RydWN0ZWQgZGlyZWN0bHlcIil9Z2V0IGFib3J0ZWQoKXtjb25zdCBsPWFib3J0ZWRGbGFncy5nZXQodGhpcyk7aWYodHlwZW9mIGwhPVwiYm9vbGVhblwiKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkICd0aGlzJyB0byBiZSBhbiAnQWJvcnRTaWduYWwnIG9iamVjdCwgYnV0IGdvdCAke3RoaXM9PT1udWxsP1wibnVsbFwiOnR5cGVvZiB0aGlzfWApO3JldHVybiBsfX1kZWZpbmVFdmVudEF0dHJpYnV0ZShBYm9ydFNpZ25hbC5wcm90b3R5cGUsXCJhYm9ydFwiKTtmdW5jdGlvbiBjcmVhdGVBYm9ydFNpZ25hbCgpe2NvbnN0IGM9T2JqZWN0LmNyZWF0ZShBYm9ydFNpZ25hbC5wcm90b3R5cGUpO3JldHVybiBFdmVudFRhcmdldC5jYWxsKGMpLGFib3J0ZWRGbGFncy5zZXQoYywhMSksY311KGNyZWF0ZUFib3J0U2lnbmFsLFwiY3JlYXRlQWJvcnRTaWduYWxcIik7ZnVuY3Rpb24gYWJvcnRTaWduYWwoYyl7YWJvcnRlZEZsYWdzLmdldChjKT09PSExJiYoYWJvcnRlZEZsYWdzLnNldChjLCEwKSxjLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJhYm9ydFwifSkpfXUoYWJvcnRTaWduYWwsXCJhYm9ydFNpZ25hbFwiKTtjb25zdCBhYm9ydGVkRmxhZ3M9bmV3IFdlYWtNYXA7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQWJvcnRTaWduYWwucHJvdG90eXBlLHthYm9ydGVkOntlbnVtZXJhYmxlOiEwfX0pLHR5cGVvZiBTeW1ib2w9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZz09XCJzeW1ib2xcIiYmT2JqZWN0LmRlZmluZVByb3BlcnR5KEFib3J0U2lnbmFsLnByb3RvdHlwZSxTeW1ib2wudG9TdHJpbmdUYWcse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTpcIkFib3J0U2lnbmFsXCJ9KTtsZXQgQWJvcnRDb250cm9sbGVyJDE9Y2xhc3N7c3RhdGlje3UodGhpcyxcIkFib3J0Q29udHJvbGxlclwiKX1jb25zdHJ1Y3Rvcigpe3NpZ25hbHMuc2V0KHRoaXMsY3JlYXRlQWJvcnRTaWduYWwoKSl9Z2V0IHNpZ25hbCgpe3JldHVybiBnZXRTaWduYWwodGhpcyl9YWJvcnQoKXthYm9ydFNpZ25hbChnZXRTaWduYWwodGhpcykpfX07Y29uc3Qgc2lnbmFscz1uZXcgV2Vha01hcDtmdW5jdGlvbiBnZXRTaWduYWwoYyl7Y29uc3QgbD1zaWduYWxzLmdldChjKTtpZihsPT1udWxsKXRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkICd0aGlzJyB0byBiZSBhbiAnQWJvcnRDb250cm9sbGVyJyBvYmplY3QsIGJ1dCBnb3QgJHtjPT09bnVsbD9cIm51bGxcIjp0eXBlb2YgY31gKTtyZXR1cm4gbH11KGdldFNpZ25hbCxcImdldFNpZ25hbFwiKSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhBYm9ydENvbnRyb2xsZXIkMS5wcm90b3R5cGUse3NpZ25hbDp7ZW51bWVyYWJsZTohMH0sYWJvcnQ6e2VudW1lcmFibGU6ITB9fSksdHlwZW9mIFN5bWJvbD09XCJmdW5jdGlvblwiJiZ0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnPT1cInN5bWJvbFwiJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJvcnRDb250cm9sbGVyJDEucHJvdG90eXBlLFN5bWJvbC50b1N0cmluZ1RhZyx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOlwiQWJvcnRDb250cm9sbGVyXCJ9KTt2YXIgdD1PYmplY3QuZGVmaW5lUHJvcGVydHksZT11KChjLGwpPT50KGMsXCJuYW1lXCIse3ZhbHVlOmwsY29uZmlndXJhYmxlOiEwfSksXCJlXCIpO2NvbnN0IGZldGNoPWZldGNoJDE7cygpO2Z1bmN0aW9uIHMoKXshZ2xvYmFsVGhpcy5wcm9jZXNzPy52ZXJzaW9ucz8ubm9kZSYmIWdsb2JhbFRoaXMucHJvY2Vzcz8uZW52Py5ESVNBQkxFX05PREVfRkVUQ0hfTkFUSVZFX1dBUk4mJmNvbnNvbGUud2FybihcIltub2RlLWZldGNoLW5hdGl2ZV0gTm9kZS5qcyBjb21wYXRpYmxlIGJ1aWxkIG9mIGBub2RlLWZldGNoLW5hdGl2ZWAgaXMgYmVpbmcgdXNlZCBpbiBhIG5vbi1Ob2RlLmpzIGVudmlyb25tZW50LiBQbGVhc2UgbWFrZSBzdXJlIHlvdSBhcmUgdXNpbmcgcHJvcGVyIGV4cG9ydCBjb25kaXRpb25zIG9yIHJlcG9ydCB0aGlzIGlzc3VlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS91bmpzL25vZGUtZmV0Y2gtbmF0aXZlLiBZb3UgY2FuIHNldCBgcHJvY2Vzcy5lbnYuRElTQUJMRV9OT0RFX0ZFVENIX05BVElWRV9XQVJOYCB0byBkaXNhYmxlIHRoaXMgd2FybmluZy5cIil9dShzLFwic1wiKSxlKHMsXCJjaGVja05vZGVFbnZpcm9ubWVudFwiKSxleHBvcnRzLkFib3J0Q29udHJvbGxlcj1BYm9ydENvbnRyb2xsZXIkMSxleHBvcnRzLkFib3J0RXJyb3I9QWJvcnRFcnJvcixleHBvcnRzLkJsb2I9QmxvYixleHBvcnRzLkZldGNoRXJyb3I9RmV0Y2hFcnJvcixleHBvcnRzLkZpbGU9RmlsZSxleHBvcnRzLkZvcm1EYXRhPUZvcm1EYXRhLGV4cG9ydHMuSGVhZGVycz1IZWFkZXJzLGV4cG9ydHMuUmVxdWVzdD1SZXF1ZXN0LGV4cG9ydHMuUmVzcG9uc2U9UmVzcG9uc2UsZXhwb3J0cy5ibG9iRnJvbT1ibG9iRnJvbSxleHBvcnRzLmJsb2JGcm9tU3luYz1ibG9iRnJvbVN5bmMsZXhwb3J0cy5kZWZhdWx0PWZldGNoLGV4cG9ydHMuZmV0Y2g9ZmV0Y2gsZXhwb3J0cy5maWxlRnJvbT1maWxlRnJvbSxleHBvcnRzLmZpbGVGcm9tU3luYz1maWxlRnJvbVN5bmMsZXhwb3J0cy5pc1JlZGlyZWN0PWlzUmVkaXJlY3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/node.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("var l=Object.defineProperty;var o=(e,t)=>l(e,\"name\",{value:t,configurable:!0});var commonjsGlobal=typeof globalThis<\"u\"?globalThis:typeof window<\"u\"?window:typeof global<\"u\"?global:typeof self<\"u\"?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\"default\")?e.default:e}o(getDefaultExportFromCjs,\"getDefaultExportFromCjs\"),exports.commonjsGlobal=commonjsGlobal,exports.getDefaultExportFromCjs=getDefaultExportFromCjs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvZGlzdC9zaGFyZWQvbm9kZS1mZXRjaC1uYXRpdmUuRGhFcWIwNmcuY2pzIiwibWFwcGluZ3MiOiJBQUFhLDRCQUE0Qix5QkFBeUIsd0JBQXdCLEVBQUUsOEhBQThILG9DQUFvQyxzRkFBc0YscURBQXFELHNCQUFzQixnQkFBZ0IsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb25jaGFpbi1hZ2VudC8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoLW5hdGl2ZS9kaXN0L3NoYXJlZC9ub2RlLWZldGNoLW5hdGl2ZS5EaEVxYjA2Zy5janM/NzVlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjt2YXIgbD1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIG89KGUsdCk9PmwoZSxcIm5hbWVcIix7dmFsdWU6dCxjb25maWd1cmFibGU6ITB9KTt2YXIgY29tbW9uanNHbG9iYWw9dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczp0eXBlb2Ygd2luZG93PFwidVwiP3dpbmRvdzp0eXBlb2YgZ2xvYmFsPFwidVwiP2dsb2JhbDp0eXBlb2Ygc2VsZjxcInVcIj9zZWxmOnt9O2Z1bmN0aW9uIGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLFwiZGVmYXVsdFwiKT9lLmRlZmF1bHQ6ZX1vKGdldERlZmF1bHRFeHBvcnRGcm9tQ2pzLFwiZ2V0RGVmYXVsdEV4cG9ydEZyb21DanNcIiksZXhwb3J0cy5jb21tb25qc0dsb2JhbD1jb21tb25qc0dsb2JhbCxleHBvcnRzLmdldERlZmF1bHRFeHBvcnRGcm9tQ2pzPWdldERlZmF1bHRFeHBvcnRGcm9tQ2pzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/dist/shared/node-fetch-native.DhEqb06g.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-fetch-native/lib/index.cjs":
/*!******************************************************!*\
  !*** ./node_modules/node-fetch-native/lib/index.cjs ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! ../dist/index.cjs */ \"(rsc)/./node_modules/node-fetch-native/dist/index.cjs\");\n\nfunction fetch(input, options) {\n  return nodeFetch.fetch(input, options);\n}\n\nfor (const key in nodeFetch) {\n  fetch[key] = nodeFetch[key];\n}\n\nmodule.exports = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1mZXRjaC1uYXRpdmUvbGliL2luZGV4LmNqcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBbUI7O0FBRTdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vbmNoYWluLWFnZW50Ly4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gtbmF0aXZlL2xpYi9pbmRleC5janM/ZGFlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBub2RlRmV0Y2ggPSByZXF1aXJlKFwiLi4vZGlzdC9pbmRleC5janNcIik7XG5cbmZ1bmN0aW9uIGZldGNoKGlucHV0LCBvcHRpb25zKSB7XG4gIHJldHVybiBub2RlRmV0Y2guZmV0Y2goaW5wdXQsIG9wdGlvbnMpO1xufVxuXG5mb3IgKGNvbnN0IGtleSBpbiBub2RlRmV0Y2gpIHtcbiAgZmV0Y2hba2V5XSA9IG5vZGVGZXRjaFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZldGNoO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-fetch-native/lib/index.cjs\n");

/***/ })

};
;